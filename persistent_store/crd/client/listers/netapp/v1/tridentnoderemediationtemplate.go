// Copyright 2025 NetApp, Inc. All Rights Reserved.

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/netapp/trident/persistent_store/crd/apis/netapp/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TridentNodeRemediationTemplateLister helps list TridentNodeRemediationTemplates.
type TridentNodeRemediationTemplateLister interface {
	// List lists all TridentNodeRemediationTemplates in the indexer.
	List(selector labels.Selector) (ret []*v1.TridentNodeRemediationTemplate, err error)
	// TridentNodeRemediationTemplates returns an object that can list and get TridentNodeRemediationTemplates.
	TridentNodeRemediationTemplates(namespace string) TridentNodeRemediationTemplateNamespaceLister
	TridentNodeRemediationTemplateListerExpansion
}

// tridentNodeRemediationTemplateLister implements the TridentNodeRemediationTemplateLister interface.
type tridentNodeRemediationTemplateLister struct {
	indexer cache.Indexer
}

// NewTridentNodeRemediationTemplateLister returns a new TridentNodeRemediationTemplateLister.
func NewTridentNodeRemediationTemplateLister(indexer cache.Indexer) TridentNodeRemediationTemplateLister {
	return &tridentNodeRemediationTemplateLister{indexer: indexer}
}

// List lists all TridentNodeRemediationTemplates in the indexer.
func (s *tridentNodeRemediationTemplateLister) List(selector labels.Selector) (ret []*v1.TridentNodeRemediationTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.TridentNodeRemediationTemplate))
	})
	return ret, err
}

// TridentNodeRemediationTemplates returns an object that can list and get TridentNodeRemediationTemplates.
func (s *tridentNodeRemediationTemplateLister) TridentNodeRemediationTemplates(namespace string) TridentNodeRemediationTemplateNamespaceLister {
	return tridentNodeRemediationTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TridentNodeRemediationTemplateNamespaceLister helps list and get TridentNodeRemediationTemplates.
type TridentNodeRemediationTemplateNamespaceLister interface {
	// List lists all TridentNodeRemediationTemplates in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.TridentNodeRemediationTemplate, err error)
	// Get retrieves the TridentNodeRemediationTemplate from the indexer for a given namespace and name.
	Get(name string) (*v1.TridentNodeRemediationTemplate, error)
	TridentNodeRemediationTemplateNamespaceListerExpansion
}

// tridentNodeRemediationTemplateNamespaceLister implements the TridentNodeRemediationTemplateNamespaceLister
// interface.
type tridentNodeRemediationTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TridentNodeRemediationTemplates in the indexer for a given namespace.
func (s tridentNodeRemediationTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1.TridentNodeRemediationTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.TridentNodeRemediationTemplate))
	})
	return ret, err
}

// Get retrieves the TridentNodeRemediationTemplate from the indexer for a given namespace and name.
func (s tridentNodeRemediationTemplateNamespaceLister) Get(name string) (*v1.TridentNodeRemediationTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("tridentnoderemediationtemplate"), name)
	}
	return obj.(*v1.TridentNodeRemediationTemplate), nil
}
