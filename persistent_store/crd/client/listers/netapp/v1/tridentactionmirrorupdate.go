// Copyright 2025 NetApp, Inc. All Rights Reserved.

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/netapp/trident/persistent_store/crd/apis/netapp/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TridentActionMirrorUpdateLister helps list TridentActionMirrorUpdates.
type TridentActionMirrorUpdateLister interface {
	// List lists all TridentActionMirrorUpdates in the indexer.
	List(selector labels.Selector) (ret []*v1.TridentActionMirrorUpdate, err error)
	// TridentActionMirrorUpdates returns an object that can list and get TridentActionMirrorUpdates.
	TridentActionMirrorUpdates(namespace string) TridentActionMirrorUpdateNamespaceLister
	TridentActionMirrorUpdateListerExpansion
}

// tridentActionMirrorUpdateLister implements the TridentActionMirrorUpdateLister interface.
type tridentActionMirrorUpdateLister struct {
	indexer cache.Indexer
}

// NewTridentActionMirrorUpdateLister returns a new TridentActionMirrorUpdateLister.
func NewTridentActionMirrorUpdateLister(indexer cache.Indexer) TridentActionMirrorUpdateLister {
	return &tridentActionMirrorUpdateLister{indexer: indexer}
}

// List lists all TridentActionMirrorUpdates in the indexer.
func (s *tridentActionMirrorUpdateLister) List(selector labels.Selector) (ret []*v1.TridentActionMirrorUpdate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.TridentActionMirrorUpdate))
	})
	return ret, err
}

// TridentActionMirrorUpdates returns an object that can list and get TridentActionMirrorUpdates.
func (s *tridentActionMirrorUpdateLister) TridentActionMirrorUpdates(namespace string) TridentActionMirrorUpdateNamespaceLister {
	return tridentActionMirrorUpdateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TridentActionMirrorUpdateNamespaceLister helps list and get TridentActionMirrorUpdates.
type TridentActionMirrorUpdateNamespaceLister interface {
	// List lists all TridentActionMirrorUpdates in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.TridentActionMirrorUpdate, err error)
	// Get retrieves the TridentActionMirrorUpdate from the indexer for a given namespace and name.
	Get(name string) (*v1.TridentActionMirrorUpdate, error)
	TridentActionMirrorUpdateNamespaceListerExpansion
}

// tridentActionMirrorUpdateNamespaceLister implements the TridentActionMirrorUpdateNamespaceLister
// interface.
type tridentActionMirrorUpdateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TridentActionMirrorUpdates in the indexer for a given namespace.
func (s tridentActionMirrorUpdateNamespaceLister) List(selector labels.Selector) (ret []*v1.TridentActionMirrorUpdate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.TridentActionMirrorUpdate))
	})
	return ret, err
}

// Get retrieves the TridentActionMirrorUpdate from the indexer for a given namespace and name.
func (s tridentActionMirrorUpdateNamespaceLister) Get(name string) (*v1.TridentActionMirrorUpdate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("tridentactionmirrorupdate"), name)
	}
	return obj.(*v1.TridentActionMirrorUpdate), nil
}
