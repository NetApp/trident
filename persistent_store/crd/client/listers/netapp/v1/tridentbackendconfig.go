// Copyright 2025 NetApp, Inc. All Rights Reserved.

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/netapp/trident/persistent_store/crd/apis/netapp/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TridentBackendConfigLister helps list TridentBackendConfigs.
type TridentBackendConfigLister interface {
	// List lists all TridentBackendConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1.TridentBackendConfig, err error)
	// TridentBackendConfigs returns an object that can list and get TridentBackendConfigs.
	TridentBackendConfigs(namespace string) TridentBackendConfigNamespaceLister
	TridentBackendConfigListerExpansion
}

// tridentBackendConfigLister implements the TridentBackendConfigLister interface.
type tridentBackendConfigLister struct {
	indexer cache.Indexer
}

// NewTridentBackendConfigLister returns a new TridentBackendConfigLister.
func NewTridentBackendConfigLister(indexer cache.Indexer) TridentBackendConfigLister {
	return &tridentBackendConfigLister{indexer: indexer}
}

// List lists all TridentBackendConfigs in the indexer.
func (s *tridentBackendConfigLister) List(selector labels.Selector) (ret []*v1.TridentBackendConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.TridentBackendConfig))
	})
	return ret, err
}

// TridentBackendConfigs returns an object that can list and get TridentBackendConfigs.
func (s *tridentBackendConfigLister) TridentBackendConfigs(namespace string) TridentBackendConfigNamespaceLister {
	return tridentBackendConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TridentBackendConfigNamespaceLister helps list and get TridentBackendConfigs.
type TridentBackendConfigNamespaceLister interface {
	// List lists all TridentBackendConfigs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.TridentBackendConfig, err error)
	// Get retrieves the TridentBackendConfig from the indexer for a given namespace and name.
	Get(name string) (*v1.TridentBackendConfig, error)
	TridentBackendConfigNamespaceListerExpansion
}

// tridentBackendConfigNamespaceLister implements the TridentBackendConfigNamespaceLister
// interface.
type tridentBackendConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TridentBackendConfigs in the indexer for a given namespace.
func (s tridentBackendConfigNamespaceLister) List(selector labels.Selector) (ret []*v1.TridentBackendConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.TridentBackendConfig))
	})
	return ret, err
}

// Get retrieves the TridentBackendConfig from the indexer for a given namespace and name.
func (s tridentBackendConfigNamespaceLister) Get(name string) (*v1.TridentBackendConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("tridentbackendconfig"), name)
	}
	return obj.(*v1.TridentBackendConfig), nil
}
