// Copyright 2025 NetApp, Inc. All Rights Reserved.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	netappv1 "github.com/netapp/trident/persistent_store/crd/apis/netapp/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeTridentVolumes implements TridentVolumeInterface
type FakeTridentVolumes struct {
	Fake *FakeTridentV1
	ns   string
}

var tridentvolumesResource = schema.GroupVersionResource{Group: "trident.netapp.io", Version: "v1", Resource: "tridentvolumes"}

var tridentvolumesKind = schema.GroupVersionKind{Group: "trident.netapp.io", Version: "v1", Kind: "TridentVolume"}

// Get takes name of the tridentVolume, and returns the corresponding tridentVolume object, and an error if there is any.
func (c *FakeTridentVolumes) Get(ctx context.Context, name string, options v1.GetOptions) (result *netappv1.TridentVolume, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(tridentvolumesResource, c.ns, name), &netappv1.TridentVolume{})

	if obj == nil {
		return nil, err
	}
	return obj.(*netappv1.TridentVolume), err
}

// List takes label and field selectors, and returns the list of TridentVolumes that match those selectors.
func (c *FakeTridentVolumes) List(ctx context.Context, opts v1.ListOptions) (result *netappv1.TridentVolumeList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(tridentvolumesResource, tridentvolumesKind, c.ns, opts), &netappv1.TridentVolumeList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &netappv1.TridentVolumeList{ListMeta: obj.(*netappv1.TridentVolumeList).ListMeta}
	for _, item := range obj.(*netappv1.TridentVolumeList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested tridentVolumes.
func (c *FakeTridentVolumes) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(tridentvolumesResource, c.ns, opts))

}

// Create takes the representation of a tridentVolume and creates it.  Returns the server's representation of the tridentVolume, and an error, if there is any.
func (c *FakeTridentVolumes) Create(ctx context.Context, tridentVolume *netappv1.TridentVolume, opts v1.CreateOptions) (result *netappv1.TridentVolume, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(tridentvolumesResource, c.ns, tridentVolume), &netappv1.TridentVolume{})

	if obj == nil {
		return nil, err
	}
	return obj.(*netappv1.TridentVolume), err
}

// Update takes the representation of a tridentVolume and updates it. Returns the server's representation of the tridentVolume, and an error, if there is any.
func (c *FakeTridentVolumes) Update(ctx context.Context, tridentVolume *netappv1.TridentVolume, opts v1.UpdateOptions) (result *netappv1.TridentVolume, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(tridentvolumesResource, c.ns, tridentVolume), &netappv1.TridentVolume{})

	if obj == nil {
		return nil, err
	}
	return obj.(*netappv1.TridentVolume), err
}

// Delete takes name of the tridentVolume and deletes it. Returns an error if one occurs.
func (c *FakeTridentVolumes) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(tridentvolumesResource, c.ns, name), &netappv1.TridentVolume{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeTridentVolumes) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(tridentvolumesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &netappv1.TridentVolumeList{})
	return err
}

// Patch applies the patch and returns the patched tridentVolume.
func (c *FakeTridentVolumes) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *netappv1.TridentVolume, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(tridentvolumesResource, c.ns, name, pt, data, subresources...), &netappv1.TridentVolume{})

	if obj == nil {
		return nil, err
	}
	return obj.(*netappv1.TridentVolume), err
}
