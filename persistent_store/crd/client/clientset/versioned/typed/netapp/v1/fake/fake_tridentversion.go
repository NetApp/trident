// Copyright 2025 NetApp, Inc. All Rights Reserved.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	netappv1 "github.com/netapp/trident/persistent_store/crd/apis/netapp/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeTridentVersions implements TridentVersionInterface
type FakeTridentVersions struct {
	Fake *FakeTridentV1
	ns   string
}

var tridentversionsResource = schema.GroupVersionResource{Group: "trident.netapp.io", Version: "v1", Resource: "tridentversions"}

var tridentversionsKind = schema.GroupVersionKind{Group: "trident.netapp.io", Version: "v1", Kind: "TridentVersion"}

// Get takes name of the tridentVersion, and returns the corresponding tridentVersion object, and an error if there is any.
func (c *FakeTridentVersions) Get(ctx context.Context, name string, options v1.GetOptions) (result *netappv1.TridentVersion, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(tridentversionsResource, c.ns, name), &netappv1.TridentVersion{})

	if obj == nil {
		return nil, err
	}
	return obj.(*netappv1.TridentVersion), err
}

// List takes label and field selectors, and returns the list of TridentVersions that match those selectors.
func (c *FakeTridentVersions) List(ctx context.Context, opts v1.ListOptions) (result *netappv1.TridentVersionList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(tridentversionsResource, tridentversionsKind, c.ns, opts), &netappv1.TridentVersionList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &netappv1.TridentVersionList{ListMeta: obj.(*netappv1.TridentVersionList).ListMeta}
	for _, item := range obj.(*netappv1.TridentVersionList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested tridentVersions.
func (c *FakeTridentVersions) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(tridentversionsResource, c.ns, opts))

}

// Create takes the representation of a tridentVersion and creates it.  Returns the server's representation of the tridentVersion, and an error, if there is any.
func (c *FakeTridentVersions) Create(ctx context.Context, tridentVersion *netappv1.TridentVersion, opts v1.CreateOptions) (result *netappv1.TridentVersion, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(tridentversionsResource, c.ns, tridentVersion), &netappv1.TridentVersion{})

	if obj == nil {
		return nil, err
	}
	return obj.(*netappv1.TridentVersion), err
}

// Update takes the representation of a tridentVersion and updates it. Returns the server's representation of the tridentVersion, and an error, if there is any.
func (c *FakeTridentVersions) Update(ctx context.Context, tridentVersion *netappv1.TridentVersion, opts v1.UpdateOptions) (result *netappv1.TridentVersion, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(tridentversionsResource, c.ns, tridentVersion), &netappv1.TridentVersion{})

	if obj == nil {
		return nil, err
	}
	return obj.(*netappv1.TridentVersion), err
}

// Delete takes name of the tridentVersion and deletes it. Returns an error if one occurs.
func (c *FakeTridentVersions) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(tridentversionsResource, c.ns, name), &netappv1.TridentVersion{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeTridentVersions) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(tridentversionsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &netappv1.TridentVersionList{})
	return err
}

// Patch applies the patch and returns the patched tridentVersion.
func (c *FakeTridentVersions) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *netappv1.TridentVersion, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(tridentversionsResource, c.ns, name, pt, data, subresources...), &netappv1.TridentVersion{})

	if obj == nil {
		return nil, err
	}
	return obj.(*netappv1.TridentVersion), err
}
