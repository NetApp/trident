// Code generated by go-swagger; DO NOT EDIT.

package n_a_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewVscanOnAccessDeleteCollectionParams creates a new VscanOnAccessDeleteCollectionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewVscanOnAccessDeleteCollectionParams() *VscanOnAccessDeleteCollectionParams {
	return &VscanOnAccessDeleteCollectionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewVscanOnAccessDeleteCollectionParamsWithTimeout creates a new VscanOnAccessDeleteCollectionParams object
// with the ability to set a timeout on a request.
func NewVscanOnAccessDeleteCollectionParamsWithTimeout(timeout time.Duration) *VscanOnAccessDeleteCollectionParams {
	return &VscanOnAccessDeleteCollectionParams{
		timeout: timeout,
	}
}

// NewVscanOnAccessDeleteCollectionParamsWithContext creates a new VscanOnAccessDeleteCollectionParams object
// with the ability to set a context for a request.
func NewVscanOnAccessDeleteCollectionParamsWithContext(ctx context.Context) *VscanOnAccessDeleteCollectionParams {
	return &VscanOnAccessDeleteCollectionParams{
		Context: ctx,
	}
}

// NewVscanOnAccessDeleteCollectionParamsWithHTTPClient creates a new VscanOnAccessDeleteCollectionParams object
// with the ability to set a custom HTTPClient for a request.
func NewVscanOnAccessDeleteCollectionParamsWithHTTPClient(client *http.Client) *VscanOnAccessDeleteCollectionParams {
	return &VscanOnAccessDeleteCollectionParams{
		HTTPClient: client,
	}
}

/*
VscanOnAccessDeleteCollectionParams contains all the parameters to send to the API endpoint

	for the vscan on access delete collection operation.

	Typically these are written to a http.Request.
*/
type VscanOnAccessDeleteCollectionParams struct {

	/* ContinueOnFailure.

	   Continue even when the operation fails on one of the records.
	*/
	ContinueOnFailure *bool

	/* Enabled.

	   Filter by enabled
	*/
	Enabled *bool

	/* Info.

	   Info specification
	*/
	Info VscanOnAccessDeleteCollectionBody

	/* Mandatory.

	   Filter by mandatory
	*/
	Mandatory *bool

	/* Name.

	   Filter by name
	*/
	Name *string

	/* Owner.

	   Filter by owner
	*/
	Owner *string

	/* Protocol.

	   Filter by protocol
	*/
	Protocol *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* ScopeExcludeExtensions.

	   Filter by scope.exclude_extensions
	*/
	ScopeExcludeExtensions *string

	/* ScopeExcludePaths.

	   Filter by scope.exclude_paths
	*/
	ScopeExcludePaths *string

	/* ScopeIncludeExtensions.

	   Filter by scope.include_extensions
	*/
	ScopeIncludeExtensions *string

	/* ScopeMaxFileSize.

	   Filter by scope.max_file_size
	*/
	ScopeMaxFileSize *int64

	/* ScopeOnlyExecuteAccess.

	   Filter by scope.only_execute_access
	*/
	ScopeOnlyExecuteAccess *bool

	/* ScopeScanReadonlyVolumes.

	   Filter by scope.scan_readonly_volumes
	*/
	ScopeScanReadonlyVolumes *bool

	/* ScopeScanWithoutExtension.

	   Filter by scope.scan_without_extension
	*/
	ScopeScanWithoutExtension *bool

	/* SerialRecords.

	   Perform the operation on the records synchronously.
	*/
	SerialRecords *bool

	/* SvmName.

	   Filter by svm.name
	*/
	SvmName *string

	/* SvmUUID.

	   UUID of the SVM to which this object belongs.
	*/
	SvmUUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the vscan on access delete collection params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *VscanOnAccessDeleteCollectionParams) WithDefaults() *VscanOnAccessDeleteCollectionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the vscan on access delete collection params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *VscanOnAccessDeleteCollectionParams) SetDefaults() {
	var (
		continueOnFailureDefault = bool(false)

		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)

		serialRecordsDefault = bool(false)
	)

	val := VscanOnAccessDeleteCollectionParams{
		ContinueOnFailure: &continueOnFailureDefault,
		ReturnRecords:     &returnRecordsDefault,
		ReturnTimeout:     &returnTimeoutDefault,
		SerialRecords:     &serialRecordsDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) WithTimeout(timeout time.Duration) *VscanOnAccessDeleteCollectionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) WithContext(ctx context.Context) *VscanOnAccessDeleteCollectionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) WithHTTPClient(client *http.Client) *VscanOnAccessDeleteCollectionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContinueOnFailure adds the continueOnFailure to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) WithContinueOnFailure(continueOnFailure *bool) *VscanOnAccessDeleteCollectionParams {
	o.SetContinueOnFailure(continueOnFailure)
	return o
}

// SetContinueOnFailure adds the continueOnFailure to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) SetContinueOnFailure(continueOnFailure *bool) {
	o.ContinueOnFailure = continueOnFailure
}

// WithEnabled adds the enabled to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) WithEnabled(enabled *bool) *VscanOnAccessDeleteCollectionParams {
	o.SetEnabled(enabled)
	return o
}

// SetEnabled adds the enabled to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) SetEnabled(enabled *bool) {
	o.Enabled = enabled
}

// WithInfo adds the info to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) WithInfo(info VscanOnAccessDeleteCollectionBody) *VscanOnAccessDeleteCollectionParams {
	o.SetInfo(info)
	return o
}

// SetInfo adds the info to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) SetInfo(info VscanOnAccessDeleteCollectionBody) {
	o.Info = info
}

// WithMandatory adds the mandatory to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) WithMandatory(mandatory *bool) *VscanOnAccessDeleteCollectionParams {
	o.SetMandatory(mandatory)
	return o
}

// SetMandatory adds the mandatory to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) SetMandatory(mandatory *bool) {
	o.Mandatory = mandatory
}

// WithName adds the name to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) WithName(name *string) *VscanOnAccessDeleteCollectionParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) SetName(name *string) {
	o.Name = name
}

// WithOwner adds the owner to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) WithOwner(owner *string) *VscanOnAccessDeleteCollectionParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) SetOwner(owner *string) {
	o.Owner = owner
}

// WithProtocol adds the protocol to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) WithProtocol(protocol *string) *VscanOnAccessDeleteCollectionParams {
	o.SetProtocol(protocol)
	return o
}

// SetProtocol adds the protocol to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) SetProtocol(protocol *string) {
	o.Protocol = protocol
}

// WithReturnRecords adds the returnRecords to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) WithReturnRecords(returnRecords *bool) *VscanOnAccessDeleteCollectionParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) WithReturnTimeout(returnTimeout *int64) *VscanOnAccessDeleteCollectionParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithScopeExcludeExtensions adds the scopeExcludeExtensions to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) WithScopeExcludeExtensions(scopeExcludeExtensions *string) *VscanOnAccessDeleteCollectionParams {
	o.SetScopeExcludeExtensions(scopeExcludeExtensions)
	return o
}

// SetScopeExcludeExtensions adds the scopeExcludeExtensions to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) SetScopeExcludeExtensions(scopeExcludeExtensions *string) {
	o.ScopeExcludeExtensions = scopeExcludeExtensions
}

// WithScopeExcludePaths adds the scopeExcludePaths to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) WithScopeExcludePaths(scopeExcludePaths *string) *VscanOnAccessDeleteCollectionParams {
	o.SetScopeExcludePaths(scopeExcludePaths)
	return o
}

// SetScopeExcludePaths adds the scopeExcludePaths to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) SetScopeExcludePaths(scopeExcludePaths *string) {
	o.ScopeExcludePaths = scopeExcludePaths
}

// WithScopeIncludeExtensions adds the scopeIncludeExtensions to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) WithScopeIncludeExtensions(scopeIncludeExtensions *string) *VscanOnAccessDeleteCollectionParams {
	o.SetScopeIncludeExtensions(scopeIncludeExtensions)
	return o
}

// SetScopeIncludeExtensions adds the scopeIncludeExtensions to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) SetScopeIncludeExtensions(scopeIncludeExtensions *string) {
	o.ScopeIncludeExtensions = scopeIncludeExtensions
}

// WithScopeMaxFileSize adds the scopeMaxFileSize to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) WithScopeMaxFileSize(scopeMaxFileSize *int64) *VscanOnAccessDeleteCollectionParams {
	o.SetScopeMaxFileSize(scopeMaxFileSize)
	return o
}

// SetScopeMaxFileSize adds the scopeMaxFileSize to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) SetScopeMaxFileSize(scopeMaxFileSize *int64) {
	o.ScopeMaxFileSize = scopeMaxFileSize
}

// WithScopeOnlyExecuteAccess adds the scopeOnlyExecuteAccess to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) WithScopeOnlyExecuteAccess(scopeOnlyExecuteAccess *bool) *VscanOnAccessDeleteCollectionParams {
	o.SetScopeOnlyExecuteAccess(scopeOnlyExecuteAccess)
	return o
}

// SetScopeOnlyExecuteAccess adds the scopeOnlyExecuteAccess to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) SetScopeOnlyExecuteAccess(scopeOnlyExecuteAccess *bool) {
	o.ScopeOnlyExecuteAccess = scopeOnlyExecuteAccess
}

// WithScopeScanReadonlyVolumes adds the scopeScanReadonlyVolumes to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) WithScopeScanReadonlyVolumes(scopeScanReadonlyVolumes *bool) *VscanOnAccessDeleteCollectionParams {
	o.SetScopeScanReadonlyVolumes(scopeScanReadonlyVolumes)
	return o
}

// SetScopeScanReadonlyVolumes adds the scopeScanReadonlyVolumes to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) SetScopeScanReadonlyVolumes(scopeScanReadonlyVolumes *bool) {
	o.ScopeScanReadonlyVolumes = scopeScanReadonlyVolumes
}

// WithScopeScanWithoutExtension adds the scopeScanWithoutExtension to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) WithScopeScanWithoutExtension(scopeScanWithoutExtension *bool) *VscanOnAccessDeleteCollectionParams {
	o.SetScopeScanWithoutExtension(scopeScanWithoutExtension)
	return o
}

// SetScopeScanWithoutExtension adds the scopeScanWithoutExtension to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) SetScopeScanWithoutExtension(scopeScanWithoutExtension *bool) {
	o.ScopeScanWithoutExtension = scopeScanWithoutExtension
}

// WithSerialRecords adds the serialRecords to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) WithSerialRecords(serialRecords *bool) *VscanOnAccessDeleteCollectionParams {
	o.SetSerialRecords(serialRecords)
	return o
}

// SetSerialRecords adds the serialRecords to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) SetSerialRecords(serialRecords *bool) {
	o.SerialRecords = serialRecords
}

// WithSvmName adds the svmName to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) WithSvmName(svmName *string) *VscanOnAccessDeleteCollectionParams {
	o.SetSvmName(svmName)
	return o
}

// SetSvmName adds the svmName to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) SetSvmName(svmName *string) {
	o.SvmName = svmName
}

// WithSvmUUID adds the svmUUID to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) WithSvmUUID(svmUUID string) *VscanOnAccessDeleteCollectionParams {
	o.SetSvmUUID(svmUUID)
	return o
}

// SetSvmUUID adds the svmUuid to the vscan on access delete collection params
func (o *VscanOnAccessDeleteCollectionParams) SetSvmUUID(svmUUID string) {
	o.SvmUUID = svmUUID
}

// WriteToRequest writes these params to a swagger request
func (o *VscanOnAccessDeleteCollectionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ContinueOnFailure != nil {

		// query param continue_on_failure
		var qrContinueOnFailure bool

		if o.ContinueOnFailure != nil {
			qrContinueOnFailure = *o.ContinueOnFailure
		}
		qContinueOnFailure := swag.FormatBool(qrContinueOnFailure)
		if qContinueOnFailure != "" {

			if err := r.SetQueryParam("continue_on_failure", qContinueOnFailure); err != nil {
				return err
			}
		}
	}

	if o.Enabled != nil {

		// query param enabled
		var qrEnabled bool

		if o.Enabled != nil {
			qrEnabled = *o.Enabled
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {

			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}
	}
	if err := r.SetBodyParam(o.Info); err != nil {
		return err
	}

	if o.Mandatory != nil {

		// query param mandatory
		var qrMandatory bool

		if o.Mandatory != nil {
			qrMandatory = *o.Mandatory
		}
		qMandatory := swag.FormatBool(qrMandatory)
		if qMandatory != "" {

			if err := r.SetQueryParam("mandatory", qMandatory); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Owner != nil {

		// query param owner
		var qrOwner string

		if o.Owner != nil {
			qrOwner = *o.Owner
		}
		qOwner := qrOwner
		if qOwner != "" {

			if err := r.SetQueryParam("owner", qOwner); err != nil {
				return err
			}
		}
	}

	if o.Protocol != nil {

		// query param protocol
		var qrProtocol string

		if o.Protocol != nil {
			qrProtocol = *o.Protocol
		}
		qProtocol := qrProtocol
		if qProtocol != "" {

			if err := r.SetQueryParam("protocol", qProtocol); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.ScopeExcludeExtensions != nil {

		// query param scope.exclude_extensions
		var qrScopeExcludeExtensions string

		if o.ScopeExcludeExtensions != nil {
			qrScopeExcludeExtensions = *o.ScopeExcludeExtensions
		}
		qScopeExcludeExtensions := qrScopeExcludeExtensions
		if qScopeExcludeExtensions != "" {

			if err := r.SetQueryParam("scope.exclude_extensions", qScopeExcludeExtensions); err != nil {
				return err
			}
		}
	}

	if o.ScopeExcludePaths != nil {

		// query param scope.exclude_paths
		var qrScopeExcludePaths string

		if o.ScopeExcludePaths != nil {
			qrScopeExcludePaths = *o.ScopeExcludePaths
		}
		qScopeExcludePaths := qrScopeExcludePaths
		if qScopeExcludePaths != "" {

			if err := r.SetQueryParam("scope.exclude_paths", qScopeExcludePaths); err != nil {
				return err
			}
		}
	}

	if o.ScopeIncludeExtensions != nil {

		// query param scope.include_extensions
		var qrScopeIncludeExtensions string

		if o.ScopeIncludeExtensions != nil {
			qrScopeIncludeExtensions = *o.ScopeIncludeExtensions
		}
		qScopeIncludeExtensions := qrScopeIncludeExtensions
		if qScopeIncludeExtensions != "" {

			if err := r.SetQueryParam("scope.include_extensions", qScopeIncludeExtensions); err != nil {
				return err
			}
		}
	}

	if o.ScopeMaxFileSize != nil {

		// query param scope.max_file_size
		var qrScopeMaxFileSize int64

		if o.ScopeMaxFileSize != nil {
			qrScopeMaxFileSize = *o.ScopeMaxFileSize
		}
		qScopeMaxFileSize := swag.FormatInt64(qrScopeMaxFileSize)
		if qScopeMaxFileSize != "" {

			if err := r.SetQueryParam("scope.max_file_size", qScopeMaxFileSize); err != nil {
				return err
			}
		}
	}

	if o.ScopeOnlyExecuteAccess != nil {

		// query param scope.only_execute_access
		var qrScopeOnlyExecuteAccess bool

		if o.ScopeOnlyExecuteAccess != nil {
			qrScopeOnlyExecuteAccess = *o.ScopeOnlyExecuteAccess
		}
		qScopeOnlyExecuteAccess := swag.FormatBool(qrScopeOnlyExecuteAccess)
		if qScopeOnlyExecuteAccess != "" {

			if err := r.SetQueryParam("scope.only_execute_access", qScopeOnlyExecuteAccess); err != nil {
				return err
			}
		}
	}

	if o.ScopeScanReadonlyVolumes != nil {

		// query param scope.scan_readonly_volumes
		var qrScopeScanReadonlyVolumes bool

		if o.ScopeScanReadonlyVolumes != nil {
			qrScopeScanReadonlyVolumes = *o.ScopeScanReadonlyVolumes
		}
		qScopeScanReadonlyVolumes := swag.FormatBool(qrScopeScanReadonlyVolumes)
		if qScopeScanReadonlyVolumes != "" {

			if err := r.SetQueryParam("scope.scan_readonly_volumes", qScopeScanReadonlyVolumes); err != nil {
				return err
			}
		}
	}

	if o.ScopeScanWithoutExtension != nil {

		// query param scope.scan_without_extension
		var qrScopeScanWithoutExtension bool

		if o.ScopeScanWithoutExtension != nil {
			qrScopeScanWithoutExtension = *o.ScopeScanWithoutExtension
		}
		qScopeScanWithoutExtension := swag.FormatBool(qrScopeScanWithoutExtension)
		if qScopeScanWithoutExtension != "" {

			if err := r.SetQueryParam("scope.scan_without_extension", qScopeScanWithoutExtension); err != nil {
				return err
			}
		}
	}

	if o.SerialRecords != nil {

		// query param serial_records
		var qrSerialRecords bool

		if o.SerialRecords != nil {
			qrSerialRecords = *o.SerialRecords
		}
		qSerialRecords := swag.FormatBool(qrSerialRecords)
		if qSerialRecords != "" {

			if err := r.SetQueryParam("serial_records", qSerialRecords); err != nil {
				return err
			}
		}
	}

	if o.SvmName != nil {

		// query param svm.name
		var qrSvmName string

		if o.SvmName != nil {
			qrSvmName = *o.SvmName
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	// path param svm.uuid
	if err := r.SetPathParam("svm.uuid", o.SvmUUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
