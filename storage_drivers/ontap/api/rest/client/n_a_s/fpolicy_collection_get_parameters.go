// Code generated by go-swagger; DO NOT EDIT.

package n_a_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewFpolicyCollectionGetParams creates a new FpolicyCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFpolicyCollectionGetParams() *FpolicyCollectionGetParams {
	return &FpolicyCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFpolicyCollectionGetParamsWithTimeout creates a new FpolicyCollectionGetParams object
// with the ability to set a timeout on a request.
func NewFpolicyCollectionGetParamsWithTimeout(timeout time.Duration) *FpolicyCollectionGetParams {
	return &FpolicyCollectionGetParams{
		timeout: timeout,
	}
}

// NewFpolicyCollectionGetParamsWithContext creates a new FpolicyCollectionGetParams object
// with the ability to set a context for a request.
func NewFpolicyCollectionGetParamsWithContext(ctx context.Context) *FpolicyCollectionGetParams {
	return &FpolicyCollectionGetParams{
		Context: ctx,
	}
}

// NewFpolicyCollectionGetParamsWithHTTPClient creates a new FpolicyCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewFpolicyCollectionGetParamsWithHTTPClient(client *http.Client) *FpolicyCollectionGetParams {
	return &FpolicyCollectionGetParams{
		HTTPClient: client,
	}
}

/*
FpolicyCollectionGetParams contains all the parameters to send to the API endpoint

	for the fpolicy collection get operation.

	Typically these are written to a http.Request.
*/
type FpolicyCollectionGetParams struct {

	/* EnginesBufferSizeRecvBuffer.

	   Filter by engines.buffer_size.recv_buffer
	*/
	EnginesBufferSizeRecvBuffer *int64

	/* EnginesBufferSizeSendBuffer.

	   Filter by engines.buffer_size.send_buffer
	*/
	EnginesBufferSizeSendBuffer *int64

	/* EnginesCertificateCa.

	   Filter by engines.certificate.ca
	*/
	EnginesCertificateCa *string

	/* EnginesCertificateName.

	   Filter by engines.certificate.name
	*/
	EnginesCertificateName *string

	/* EnginesCertificateSerialNumber.

	   Filter by engines.certificate.serial_number
	*/
	EnginesCertificateSerialNumber *string

	/* EnginesFormat.

	   Filter by engines.format
	*/
	EnginesFormat *string

	/* EnginesKeepAliveInterval.

	   Filter by engines.keep_alive_interval
	*/
	EnginesKeepAliveInterval *string

	/* EnginesMaxConnectionRetries.

	   Filter by engines.max_connection_retries
	*/
	EnginesMaxConnectionRetries *int64

	/* EnginesMaxServerRequests.

	   Filter by engines.max_server_requests
	*/
	EnginesMaxServerRequests *int64

	/* EnginesName.

	   Filter by engines.name
	*/
	EnginesName *string

	/* EnginesPort.

	   Filter by engines.port
	*/
	EnginesPort *int64

	/* EnginesPrimaryServers.

	   Filter by engines.primary_servers
	*/
	EnginesPrimaryServers *string

	/* EnginesRequestAbortTimeout.

	   Filter by engines.request_abort_timeout
	*/
	EnginesRequestAbortTimeout *string

	/* EnginesRequestCancelTimeout.

	   Filter by engines.request_cancel_timeout
	*/
	EnginesRequestCancelTimeout *string

	/* EnginesResiliencyDirectoryPath.

	   Filter by engines.resiliency.directory_path
	*/
	EnginesResiliencyDirectoryPath *string

	/* EnginesResiliencyEnabled.

	   Filter by engines.resiliency.enabled
	*/
	EnginesResiliencyEnabled *bool

	/* EnginesResiliencyRetentionDuration.

	   Filter by engines.resiliency.retention_duration
	*/
	EnginesResiliencyRetentionDuration *string

	/* EnginesSecondaryServers.

	   Filter by engines.secondary_servers
	*/
	EnginesSecondaryServers *string

	/* EnginesServerProgressTimeout.

	   Filter by engines.server_progress_timeout
	*/
	EnginesServerProgressTimeout *string

	/* EnginesSessionTimeout.

	   Filter by engines.session_timeout
	*/
	EnginesSessionTimeout *string

	/* EnginesSslOption.

	   Filter by engines.ssl_option
	*/
	EnginesSslOption *string

	/* EnginesStatusRequestInterval.

	   Filter by engines.status_request_interval
	*/
	EnginesStatusRequestInterval *string

	/* EnginesType.

	   Filter by engines.type
	*/
	EnginesType *string

	/* EventsFileOperationsAccess.

	   Filter by events.file_operations.access
	*/
	EventsFileOperationsAccess *bool

	/* EventsFileOperationsClose.

	   Filter by events.file_operations.close
	*/
	EventsFileOperationsClose *bool

	/* EventsFileOperationsCreate.

	   Filter by events.file_operations.create
	*/
	EventsFileOperationsCreate *bool

	/* EventsFileOperationsCreateDir.

	   Filter by events.file_operations.create_dir
	*/
	EventsFileOperationsCreateDir *bool

	/* EventsFileOperationsDelete.

	   Filter by events.file_operations.delete
	*/
	EventsFileOperationsDelete *bool

	/* EventsFileOperationsDeleteDir.

	   Filter by events.file_operations.delete_dir
	*/
	EventsFileOperationsDeleteDir *bool

	/* EventsFileOperationsGetattr.

	   Filter by events.file_operations.getattr
	*/
	EventsFileOperationsGetattr *bool

	/* EventsFileOperationsLink.

	   Filter by events.file_operations.link
	*/
	EventsFileOperationsLink *bool

	/* EventsFileOperationsLookup.

	   Filter by events.file_operations.lookup
	*/
	EventsFileOperationsLookup *bool

	/* EventsFileOperationsOpen.

	   Filter by events.file_operations.open
	*/
	EventsFileOperationsOpen *bool

	/* EventsFileOperationsRead.

	   Filter by events.file_operations.read
	*/
	EventsFileOperationsRead *bool

	/* EventsFileOperationsRename.

	   Filter by events.file_operations.rename
	*/
	EventsFileOperationsRename *bool

	/* EventsFileOperationsRenameDir.

	   Filter by events.file_operations.rename_dir
	*/
	EventsFileOperationsRenameDir *bool

	/* EventsFileOperationsSetattr.

	   Filter by events.file_operations.setattr
	*/
	EventsFileOperationsSetattr *bool

	/* EventsFileOperationsSymlink.

	   Filter by events.file_operations.symlink
	*/
	EventsFileOperationsSymlink *bool

	/* EventsFileOperationsWrite.

	   Filter by events.file_operations.write
	*/
	EventsFileOperationsWrite *bool

	/* EventsFiltersCloseWithModification.

	   Filter by events.filters.close_with_modification
	*/
	EventsFiltersCloseWithModification *bool

	/* EventsFiltersCloseWithRead.

	   Filter by events.filters.close_with_read
	*/
	EventsFiltersCloseWithRead *bool

	/* EventsFiltersCloseWithoutModification.

	   Filter by events.filters.close_without_modification
	*/
	EventsFiltersCloseWithoutModification *bool

	/* EventsFiltersExcludeDirectory.

	   Filter by events.filters.exclude_directory
	*/
	EventsFiltersExcludeDirectory *bool

	/* EventsFiltersFirstRead.

	   Filter by events.filters.first_read
	*/
	EventsFiltersFirstRead *bool

	/* EventsFiltersFirstWrite.

	   Filter by events.filters.first_write
	*/
	EventsFiltersFirstWrite *bool

	/* EventsFiltersMonitorAds.

	   Filter by events.filters.monitor_ads
	*/
	EventsFiltersMonitorAds *bool

	/* EventsFiltersOfflineBit.

	   Filter by events.filters.offline_bit
	*/
	EventsFiltersOfflineBit *bool

	/* EventsFiltersOpenWithDeleteIntent.

	   Filter by events.filters.open_with_delete_intent
	*/
	EventsFiltersOpenWithDeleteIntent *bool

	/* EventsFiltersOpenWithWriteIntent.

	   Filter by events.filters.open_with_write_intent
	*/
	EventsFiltersOpenWithWriteIntent *bool

	/* EventsFiltersSetattrWithAccessTimeChange.

	   Filter by events.filters.setattr_with_access_time_change
	*/
	EventsFiltersSetattrWithAccessTimeChange *bool

	/* EventsFiltersSetattrWithAllocationSizeChange.

	   Filter by events.filters.setattr_with_allocation_size_change
	*/
	EventsFiltersSetattrWithAllocationSizeChange *bool

	/* EventsFiltersSetattrWithCreationTimeChange.

	   Filter by events.filters.setattr_with_creation_time_change
	*/
	EventsFiltersSetattrWithCreationTimeChange *bool

	/* EventsFiltersSetattrWithDaclChange.

	   Filter by events.filters.setattr_with_dacl_change
	*/
	EventsFiltersSetattrWithDaclChange *bool

	/* EventsFiltersSetattrWithGroupChange.

	   Filter by events.filters.setattr_with_group_change
	*/
	EventsFiltersSetattrWithGroupChange *bool

	/* EventsFiltersSetattrWithModeChange.

	   Filter by events.filters.setattr_with_mode_change
	*/
	EventsFiltersSetattrWithModeChange *bool

	/* EventsFiltersSetattrWithModifyTimeChange.

	   Filter by events.filters.setattr_with_modify_time_change
	*/
	EventsFiltersSetattrWithModifyTimeChange *bool

	/* EventsFiltersSetattrWithOwnerChange.

	   Filter by events.filters.setattr_with_owner_change
	*/
	EventsFiltersSetattrWithOwnerChange *bool

	/* EventsFiltersSetattrWithSaclChange.

	   Filter by events.filters.setattr_with_sacl_change
	*/
	EventsFiltersSetattrWithSaclChange *bool

	/* EventsFiltersSetattrWithSizeChange.

	   Filter by events.filters.setattr_with_size_change
	*/
	EventsFiltersSetattrWithSizeChange *bool

	/* EventsFiltersWriteWithSizeChange.

	   Filter by events.filters.write_with_size_change
	*/
	EventsFiltersWriteWithSizeChange *bool

	/* EventsMonitorFileopFailure.

	   Filter by events.monitor_fileop_failure
	*/
	EventsMonitorFileopFailure *bool

	/* EventsName.

	   Filter by events.name
	*/
	EventsName *string

	/* EventsProtocol.

	   Filter by events.protocol
	*/
	EventsProtocol *string

	/* EventsVolumeMonitoring.

	   Filter by events.volume_monitoring
	*/
	EventsVolumeMonitoring *bool

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* PersistentStoresAutosizeMode.

	   Filter by persistent_stores.autosize_mode
	*/
	PersistentStoresAutosizeMode *string

	/* PersistentStoresName.

	   Filter by persistent_stores.name
	*/
	PersistentStoresName *string

	/* PersistentStoresSize.

	   Filter by persistent_stores.size
	*/
	PersistentStoresSize *int64

	/* PersistentStoresVolume.

	   Filter by persistent_stores.volume
	*/
	PersistentStoresVolume *string

	/* PoliciesAllowPrivilegedAccess.

	   Filter by policies.allow_privileged_access
	*/
	PoliciesAllowPrivilegedAccess *bool

	/* PoliciesEnabled.

	   Filter by policies.enabled
	*/
	PoliciesEnabled *bool

	/* PoliciesEngineName.

	   Filter by policies.engine.name
	*/
	PoliciesEngineName *string

	/* PoliciesEventsName.

	   Filter by policies.events.name
	*/
	PoliciesEventsName *string

	/* PoliciesMandatory.

	   Filter by policies.mandatory
	*/
	PoliciesMandatory *bool

	/* PoliciesName.

	   Filter by policies.name
	*/
	PoliciesName *string

	/* PoliciesPassthroughRead.

	   Filter by policies.passthrough_read
	*/
	PoliciesPassthroughRead *bool

	/* PoliciesPersistentStore.

	   Filter by policies.persistent_store
	*/
	PoliciesPersistentStore *string

	/* PoliciesPriority.

	   Filter by policies.priority
	*/
	PoliciesPriority *int64

	/* PoliciesPrivilegedUser.

	   Filter by policies.privileged_user
	*/
	PoliciesPrivilegedUser *string

	/* PoliciesScopeCheckExtensionsOnDirectories.

	   Filter by policies.scope.check_extensions_on_directories
	*/
	PoliciesScopeCheckExtensionsOnDirectories *bool

	/* PoliciesScopeExcludeExportPolicies.

	   Filter by policies.scope.exclude_export_policies
	*/
	PoliciesScopeExcludeExportPolicies *string

	/* PoliciesScopeExcludeExtension.

	   Filter by policies.scope.exclude_extension
	*/
	PoliciesScopeExcludeExtension *string

	/* PoliciesScopeExcludeShares.

	   Filter by policies.scope.exclude_shares
	*/
	PoliciesScopeExcludeShares *string

	/* PoliciesScopeExcludeVolumes.

	   Filter by policies.scope.exclude_volumes
	*/
	PoliciesScopeExcludeVolumes *string

	/* PoliciesScopeIncludeExportPolicies.

	   Filter by policies.scope.include_export_policies
	*/
	PoliciesScopeIncludeExportPolicies *string

	/* PoliciesScopeIncludeExtension.

	   Filter by policies.scope.include_extension
	*/
	PoliciesScopeIncludeExtension *string

	/* PoliciesScopeIncludeShares.

	   Filter by policies.scope.include_shares
	*/
	PoliciesScopeIncludeShares *string

	/* PoliciesScopeIncludeVolumes.

	   Filter by policies.scope.include_volumes
	*/
	PoliciesScopeIncludeVolumes *string

	/* PoliciesScopeObjectMonitoringWithNoExtension.

	   Filter by policies.scope.object_monitoring_with_no_extension
	*/
	PoliciesScopeObjectMonitoringWithNoExtension *bool

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* SvmName.

	   Filter by svm.name
	*/
	SvmName *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SvmUUID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the fpolicy collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FpolicyCollectionGetParams) WithDefaults() *FpolicyCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the fpolicy collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FpolicyCollectionGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := FpolicyCollectionGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithTimeout(timeout time.Duration) *FpolicyCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithContext(ctx context.Context) *FpolicyCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithHTTPClient(client *http.Client) *FpolicyCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnginesBufferSizeRecvBuffer adds the enginesBufferSizeRecvBuffer to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesBufferSizeRecvBuffer(enginesBufferSizeRecvBuffer *int64) *FpolicyCollectionGetParams {
	o.SetEnginesBufferSizeRecvBuffer(enginesBufferSizeRecvBuffer)
	return o
}

// SetEnginesBufferSizeRecvBuffer adds the enginesBufferSizeRecvBuffer to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesBufferSizeRecvBuffer(enginesBufferSizeRecvBuffer *int64) {
	o.EnginesBufferSizeRecvBuffer = enginesBufferSizeRecvBuffer
}

// WithEnginesBufferSizeSendBuffer adds the enginesBufferSizeSendBuffer to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesBufferSizeSendBuffer(enginesBufferSizeSendBuffer *int64) *FpolicyCollectionGetParams {
	o.SetEnginesBufferSizeSendBuffer(enginesBufferSizeSendBuffer)
	return o
}

// SetEnginesBufferSizeSendBuffer adds the enginesBufferSizeSendBuffer to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesBufferSizeSendBuffer(enginesBufferSizeSendBuffer *int64) {
	o.EnginesBufferSizeSendBuffer = enginesBufferSizeSendBuffer
}

// WithEnginesCertificateCa adds the enginesCertificateCa to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesCertificateCa(enginesCertificateCa *string) *FpolicyCollectionGetParams {
	o.SetEnginesCertificateCa(enginesCertificateCa)
	return o
}

// SetEnginesCertificateCa adds the enginesCertificateCa to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesCertificateCa(enginesCertificateCa *string) {
	o.EnginesCertificateCa = enginesCertificateCa
}

// WithEnginesCertificateName adds the enginesCertificateName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesCertificateName(enginesCertificateName *string) *FpolicyCollectionGetParams {
	o.SetEnginesCertificateName(enginesCertificateName)
	return o
}

// SetEnginesCertificateName adds the enginesCertificateName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesCertificateName(enginesCertificateName *string) {
	o.EnginesCertificateName = enginesCertificateName
}

// WithEnginesCertificateSerialNumber adds the enginesCertificateSerialNumber to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesCertificateSerialNumber(enginesCertificateSerialNumber *string) *FpolicyCollectionGetParams {
	o.SetEnginesCertificateSerialNumber(enginesCertificateSerialNumber)
	return o
}

// SetEnginesCertificateSerialNumber adds the enginesCertificateSerialNumber to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesCertificateSerialNumber(enginesCertificateSerialNumber *string) {
	o.EnginesCertificateSerialNumber = enginesCertificateSerialNumber
}

// WithEnginesFormat adds the enginesFormat to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesFormat(enginesFormat *string) *FpolicyCollectionGetParams {
	o.SetEnginesFormat(enginesFormat)
	return o
}

// SetEnginesFormat adds the enginesFormat to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesFormat(enginesFormat *string) {
	o.EnginesFormat = enginesFormat
}

// WithEnginesKeepAliveInterval adds the enginesKeepAliveInterval to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesKeepAliveInterval(enginesKeepAliveInterval *string) *FpolicyCollectionGetParams {
	o.SetEnginesKeepAliveInterval(enginesKeepAliveInterval)
	return o
}

// SetEnginesKeepAliveInterval adds the enginesKeepAliveInterval to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesKeepAliveInterval(enginesKeepAliveInterval *string) {
	o.EnginesKeepAliveInterval = enginesKeepAliveInterval
}

// WithEnginesMaxConnectionRetries adds the enginesMaxConnectionRetries to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesMaxConnectionRetries(enginesMaxConnectionRetries *int64) *FpolicyCollectionGetParams {
	o.SetEnginesMaxConnectionRetries(enginesMaxConnectionRetries)
	return o
}

// SetEnginesMaxConnectionRetries adds the enginesMaxConnectionRetries to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesMaxConnectionRetries(enginesMaxConnectionRetries *int64) {
	o.EnginesMaxConnectionRetries = enginesMaxConnectionRetries
}

// WithEnginesMaxServerRequests adds the enginesMaxServerRequests to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesMaxServerRequests(enginesMaxServerRequests *int64) *FpolicyCollectionGetParams {
	o.SetEnginesMaxServerRequests(enginesMaxServerRequests)
	return o
}

// SetEnginesMaxServerRequests adds the enginesMaxServerRequests to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesMaxServerRequests(enginesMaxServerRequests *int64) {
	o.EnginesMaxServerRequests = enginesMaxServerRequests
}

// WithEnginesName adds the enginesName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesName(enginesName *string) *FpolicyCollectionGetParams {
	o.SetEnginesName(enginesName)
	return o
}

// SetEnginesName adds the enginesName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesName(enginesName *string) {
	o.EnginesName = enginesName
}

// WithEnginesPort adds the enginesPort to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesPort(enginesPort *int64) *FpolicyCollectionGetParams {
	o.SetEnginesPort(enginesPort)
	return o
}

// SetEnginesPort adds the enginesPort to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesPort(enginesPort *int64) {
	o.EnginesPort = enginesPort
}

// WithEnginesPrimaryServers adds the enginesPrimaryServers to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesPrimaryServers(enginesPrimaryServers *string) *FpolicyCollectionGetParams {
	o.SetEnginesPrimaryServers(enginesPrimaryServers)
	return o
}

// SetEnginesPrimaryServers adds the enginesPrimaryServers to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesPrimaryServers(enginesPrimaryServers *string) {
	o.EnginesPrimaryServers = enginesPrimaryServers
}

// WithEnginesRequestAbortTimeout adds the enginesRequestAbortTimeout to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesRequestAbortTimeout(enginesRequestAbortTimeout *string) *FpolicyCollectionGetParams {
	o.SetEnginesRequestAbortTimeout(enginesRequestAbortTimeout)
	return o
}

// SetEnginesRequestAbortTimeout adds the enginesRequestAbortTimeout to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesRequestAbortTimeout(enginesRequestAbortTimeout *string) {
	o.EnginesRequestAbortTimeout = enginesRequestAbortTimeout
}

// WithEnginesRequestCancelTimeout adds the enginesRequestCancelTimeout to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesRequestCancelTimeout(enginesRequestCancelTimeout *string) *FpolicyCollectionGetParams {
	o.SetEnginesRequestCancelTimeout(enginesRequestCancelTimeout)
	return o
}

// SetEnginesRequestCancelTimeout adds the enginesRequestCancelTimeout to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesRequestCancelTimeout(enginesRequestCancelTimeout *string) {
	o.EnginesRequestCancelTimeout = enginesRequestCancelTimeout
}

// WithEnginesResiliencyDirectoryPath adds the enginesResiliencyDirectoryPath to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesResiliencyDirectoryPath(enginesResiliencyDirectoryPath *string) *FpolicyCollectionGetParams {
	o.SetEnginesResiliencyDirectoryPath(enginesResiliencyDirectoryPath)
	return o
}

// SetEnginesResiliencyDirectoryPath adds the enginesResiliencyDirectoryPath to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesResiliencyDirectoryPath(enginesResiliencyDirectoryPath *string) {
	o.EnginesResiliencyDirectoryPath = enginesResiliencyDirectoryPath
}

// WithEnginesResiliencyEnabled adds the enginesResiliencyEnabled to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesResiliencyEnabled(enginesResiliencyEnabled *bool) *FpolicyCollectionGetParams {
	o.SetEnginesResiliencyEnabled(enginesResiliencyEnabled)
	return o
}

// SetEnginesResiliencyEnabled adds the enginesResiliencyEnabled to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesResiliencyEnabled(enginesResiliencyEnabled *bool) {
	o.EnginesResiliencyEnabled = enginesResiliencyEnabled
}

// WithEnginesResiliencyRetentionDuration adds the enginesResiliencyRetentionDuration to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesResiliencyRetentionDuration(enginesResiliencyRetentionDuration *string) *FpolicyCollectionGetParams {
	o.SetEnginesResiliencyRetentionDuration(enginesResiliencyRetentionDuration)
	return o
}

// SetEnginesResiliencyRetentionDuration adds the enginesResiliencyRetentionDuration to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesResiliencyRetentionDuration(enginesResiliencyRetentionDuration *string) {
	o.EnginesResiliencyRetentionDuration = enginesResiliencyRetentionDuration
}

// WithEnginesSecondaryServers adds the enginesSecondaryServers to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesSecondaryServers(enginesSecondaryServers *string) *FpolicyCollectionGetParams {
	o.SetEnginesSecondaryServers(enginesSecondaryServers)
	return o
}

// SetEnginesSecondaryServers adds the enginesSecondaryServers to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesSecondaryServers(enginesSecondaryServers *string) {
	o.EnginesSecondaryServers = enginesSecondaryServers
}

// WithEnginesServerProgressTimeout adds the enginesServerProgressTimeout to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesServerProgressTimeout(enginesServerProgressTimeout *string) *FpolicyCollectionGetParams {
	o.SetEnginesServerProgressTimeout(enginesServerProgressTimeout)
	return o
}

// SetEnginesServerProgressTimeout adds the enginesServerProgressTimeout to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesServerProgressTimeout(enginesServerProgressTimeout *string) {
	o.EnginesServerProgressTimeout = enginesServerProgressTimeout
}

// WithEnginesSessionTimeout adds the enginesSessionTimeout to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesSessionTimeout(enginesSessionTimeout *string) *FpolicyCollectionGetParams {
	o.SetEnginesSessionTimeout(enginesSessionTimeout)
	return o
}

// SetEnginesSessionTimeout adds the enginesSessionTimeout to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesSessionTimeout(enginesSessionTimeout *string) {
	o.EnginesSessionTimeout = enginesSessionTimeout
}

// WithEnginesSslOption adds the enginesSslOption to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesSslOption(enginesSslOption *string) *FpolicyCollectionGetParams {
	o.SetEnginesSslOption(enginesSslOption)
	return o
}

// SetEnginesSslOption adds the enginesSslOption to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesSslOption(enginesSslOption *string) {
	o.EnginesSslOption = enginesSslOption
}

// WithEnginesStatusRequestInterval adds the enginesStatusRequestInterval to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesStatusRequestInterval(enginesStatusRequestInterval *string) *FpolicyCollectionGetParams {
	o.SetEnginesStatusRequestInterval(enginesStatusRequestInterval)
	return o
}

// SetEnginesStatusRequestInterval adds the enginesStatusRequestInterval to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesStatusRequestInterval(enginesStatusRequestInterval *string) {
	o.EnginesStatusRequestInterval = enginesStatusRequestInterval
}

// WithEnginesType adds the enginesType to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesType(enginesType *string) *FpolicyCollectionGetParams {
	o.SetEnginesType(enginesType)
	return o
}

// SetEnginesType adds the enginesType to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesType(enginesType *string) {
	o.EnginesType = enginesType
}

// WithEventsFileOperationsAccess adds the eventsFileOperationsAccess to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsAccess(eventsFileOperationsAccess *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsAccess(eventsFileOperationsAccess)
	return o
}

// SetEventsFileOperationsAccess adds the eventsFileOperationsAccess to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsAccess(eventsFileOperationsAccess *bool) {
	o.EventsFileOperationsAccess = eventsFileOperationsAccess
}

// WithEventsFileOperationsClose adds the eventsFileOperationsClose to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsClose(eventsFileOperationsClose *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsClose(eventsFileOperationsClose)
	return o
}

// SetEventsFileOperationsClose adds the eventsFileOperationsClose to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsClose(eventsFileOperationsClose *bool) {
	o.EventsFileOperationsClose = eventsFileOperationsClose
}

// WithEventsFileOperationsCreate adds the eventsFileOperationsCreate to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsCreate(eventsFileOperationsCreate *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsCreate(eventsFileOperationsCreate)
	return o
}

// SetEventsFileOperationsCreate adds the eventsFileOperationsCreate to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsCreate(eventsFileOperationsCreate *bool) {
	o.EventsFileOperationsCreate = eventsFileOperationsCreate
}

// WithEventsFileOperationsCreateDir adds the eventsFileOperationsCreateDir to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsCreateDir(eventsFileOperationsCreateDir *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsCreateDir(eventsFileOperationsCreateDir)
	return o
}

// SetEventsFileOperationsCreateDir adds the eventsFileOperationsCreateDir to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsCreateDir(eventsFileOperationsCreateDir *bool) {
	o.EventsFileOperationsCreateDir = eventsFileOperationsCreateDir
}

// WithEventsFileOperationsDelete adds the eventsFileOperationsDelete to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsDelete(eventsFileOperationsDelete *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsDelete(eventsFileOperationsDelete)
	return o
}

// SetEventsFileOperationsDelete adds the eventsFileOperationsDelete to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsDelete(eventsFileOperationsDelete *bool) {
	o.EventsFileOperationsDelete = eventsFileOperationsDelete
}

// WithEventsFileOperationsDeleteDir adds the eventsFileOperationsDeleteDir to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsDeleteDir(eventsFileOperationsDeleteDir *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsDeleteDir(eventsFileOperationsDeleteDir)
	return o
}

// SetEventsFileOperationsDeleteDir adds the eventsFileOperationsDeleteDir to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsDeleteDir(eventsFileOperationsDeleteDir *bool) {
	o.EventsFileOperationsDeleteDir = eventsFileOperationsDeleteDir
}

// WithEventsFileOperationsGetattr adds the eventsFileOperationsGetattr to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsGetattr(eventsFileOperationsGetattr *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsGetattr(eventsFileOperationsGetattr)
	return o
}

// SetEventsFileOperationsGetattr adds the eventsFileOperationsGetattr to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsGetattr(eventsFileOperationsGetattr *bool) {
	o.EventsFileOperationsGetattr = eventsFileOperationsGetattr
}

// WithEventsFileOperationsLink adds the eventsFileOperationsLink to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsLink(eventsFileOperationsLink *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsLink(eventsFileOperationsLink)
	return o
}

// SetEventsFileOperationsLink adds the eventsFileOperationsLink to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsLink(eventsFileOperationsLink *bool) {
	o.EventsFileOperationsLink = eventsFileOperationsLink
}

// WithEventsFileOperationsLookup adds the eventsFileOperationsLookup to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsLookup(eventsFileOperationsLookup *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsLookup(eventsFileOperationsLookup)
	return o
}

// SetEventsFileOperationsLookup adds the eventsFileOperationsLookup to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsLookup(eventsFileOperationsLookup *bool) {
	o.EventsFileOperationsLookup = eventsFileOperationsLookup
}

// WithEventsFileOperationsOpen adds the eventsFileOperationsOpen to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsOpen(eventsFileOperationsOpen *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsOpen(eventsFileOperationsOpen)
	return o
}

// SetEventsFileOperationsOpen adds the eventsFileOperationsOpen to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsOpen(eventsFileOperationsOpen *bool) {
	o.EventsFileOperationsOpen = eventsFileOperationsOpen
}

// WithEventsFileOperationsRead adds the eventsFileOperationsRead to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsRead(eventsFileOperationsRead *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsRead(eventsFileOperationsRead)
	return o
}

// SetEventsFileOperationsRead adds the eventsFileOperationsRead to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsRead(eventsFileOperationsRead *bool) {
	o.EventsFileOperationsRead = eventsFileOperationsRead
}

// WithEventsFileOperationsRename adds the eventsFileOperationsRename to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsRename(eventsFileOperationsRename *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsRename(eventsFileOperationsRename)
	return o
}

// SetEventsFileOperationsRename adds the eventsFileOperationsRename to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsRename(eventsFileOperationsRename *bool) {
	o.EventsFileOperationsRename = eventsFileOperationsRename
}

// WithEventsFileOperationsRenameDir adds the eventsFileOperationsRenameDir to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsRenameDir(eventsFileOperationsRenameDir *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsRenameDir(eventsFileOperationsRenameDir)
	return o
}

// SetEventsFileOperationsRenameDir adds the eventsFileOperationsRenameDir to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsRenameDir(eventsFileOperationsRenameDir *bool) {
	o.EventsFileOperationsRenameDir = eventsFileOperationsRenameDir
}

// WithEventsFileOperationsSetattr adds the eventsFileOperationsSetattr to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsSetattr(eventsFileOperationsSetattr *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsSetattr(eventsFileOperationsSetattr)
	return o
}

// SetEventsFileOperationsSetattr adds the eventsFileOperationsSetattr to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsSetattr(eventsFileOperationsSetattr *bool) {
	o.EventsFileOperationsSetattr = eventsFileOperationsSetattr
}

// WithEventsFileOperationsSymlink adds the eventsFileOperationsSymlink to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsSymlink(eventsFileOperationsSymlink *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsSymlink(eventsFileOperationsSymlink)
	return o
}

// SetEventsFileOperationsSymlink adds the eventsFileOperationsSymlink to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsSymlink(eventsFileOperationsSymlink *bool) {
	o.EventsFileOperationsSymlink = eventsFileOperationsSymlink
}

// WithEventsFileOperationsWrite adds the eventsFileOperationsWrite to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsWrite(eventsFileOperationsWrite *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsWrite(eventsFileOperationsWrite)
	return o
}

// SetEventsFileOperationsWrite adds the eventsFileOperationsWrite to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsWrite(eventsFileOperationsWrite *bool) {
	o.EventsFileOperationsWrite = eventsFileOperationsWrite
}

// WithEventsFiltersCloseWithModification adds the eventsFiltersCloseWithModification to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersCloseWithModification(eventsFiltersCloseWithModification *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersCloseWithModification(eventsFiltersCloseWithModification)
	return o
}

// SetEventsFiltersCloseWithModification adds the eventsFiltersCloseWithModification to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersCloseWithModification(eventsFiltersCloseWithModification *bool) {
	o.EventsFiltersCloseWithModification = eventsFiltersCloseWithModification
}

// WithEventsFiltersCloseWithRead adds the eventsFiltersCloseWithRead to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersCloseWithRead(eventsFiltersCloseWithRead *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersCloseWithRead(eventsFiltersCloseWithRead)
	return o
}

// SetEventsFiltersCloseWithRead adds the eventsFiltersCloseWithRead to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersCloseWithRead(eventsFiltersCloseWithRead *bool) {
	o.EventsFiltersCloseWithRead = eventsFiltersCloseWithRead
}

// WithEventsFiltersCloseWithoutModification adds the eventsFiltersCloseWithoutModification to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersCloseWithoutModification(eventsFiltersCloseWithoutModification *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersCloseWithoutModification(eventsFiltersCloseWithoutModification)
	return o
}

// SetEventsFiltersCloseWithoutModification adds the eventsFiltersCloseWithoutModification to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersCloseWithoutModification(eventsFiltersCloseWithoutModification *bool) {
	o.EventsFiltersCloseWithoutModification = eventsFiltersCloseWithoutModification
}

// WithEventsFiltersExcludeDirectory adds the eventsFiltersExcludeDirectory to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersExcludeDirectory(eventsFiltersExcludeDirectory *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersExcludeDirectory(eventsFiltersExcludeDirectory)
	return o
}

// SetEventsFiltersExcludeDirectory adds the eventsFiltersExcludeDirectory to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersExcludeDirectory(eventsFiltersExcludeDirectory *bool) {
	o.EventsFiltersExcludeDirectory = eventsFiltersExcludeDirectory
}

// WithEventsFiltersFirstRead adds the eventsFiltersFirstRead to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersFirstRead(eventsFiltersFirstRead *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersFirstRead(eventsFiltersFirstRead)
	return o
}

// SetEventsFiltersFirstRead adds the eventsFiltersFirstRead to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersFirstRead(eventsFiltersFirstRead *bool) {
	o.EventsFiltersFirstRead = eventsFiltersFirstRead
}

// WithEventsFiltersFirstWrite adds the eventsFiltersFirstWrite to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersFirstWrite(eventsFiltersFirstWrite *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersFirstWrite(eventsFiltersFirstWrite)
	return o
}

// SetEventsFiltersFirstWrite adds the eventsFiltersFirstWrite to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersFirstWrite(eventsFiltersFirstWrite *bool) {
	o.EventsFiltersFirstWrite = eventsFiltersFirstWrite
}

// WithEventsFiltersMonitorAds adds the eventsFiltersMonitorAds to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersMonitorAds(eventsFiltersMonitorAds *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersMonitorAds(eventsFiltersMonitorAds)
	return o
}

// SetEventsFiltersMonitorAds adds the eventsFiltersMonitorAds to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersMonitorAds(eventsFiltersMonitorAds *bool) {
	o.EventsFiltersMonitorAds = eventsFiltersMonitorAds
}

// WithEventsFiltersOfflineBit adds the eventsFiltersOfflineBit to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersOfflineBit(eventsFiltersOfflineBit *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersOfflineBit(eventsFiltersOfflineBit)
	return o
}

// SetEventsFiltersOfflineBit adds the eventsFiltersOfflineBit to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersOfflineBit(eventsFiltersOfflineBit *bool) {
	o.EventsFiltersOfflineBit = eventsFiltersOfflineBit
}

// WithEventsFiltersOpenWithDeleteIntent adds the eventsFiltersOpenWithDeleteIntent to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersOpenWithDeleteIntent(eventsFiltersOpenWithDeleteIntent *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersOpenWithDeleteIntent(eventsFiltersOpenWithDeleteIntent)
	return o
}

// SetEventsFiltersOpenWithDeleteIntent adds the eventsFiltersOpenWithDeleteIntent to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersOpenWithDeleteIntent(eventsFiltersOpenWithDeleteIntent *bool) {
	o.EventsFiltersOpenWithDeleteIntent = eventsFiltersOpenWithDeleteIntent
}

// WithEventsFiltersOpenWithWriteIntent adds the eventsFiltersOpenWithWriteIntent to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersOpenWithWriteIntent(eventsFiltersOpenWithWriteIntent *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersOpenWithWriteIntent(eventsFiltersOpenWithWriteIntent)
	return o
}

// SetEventsFiltersOpenWithWriteIntent adds the eventsFiltersOpenWithWriteIntent to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersOpenWithWriteIntent(eventsFiltersOpenWithWriteIntent *bool) {
	o.EventsFiltersOpenWithWriteIntent = eventsFiltersOpenWithWriteIntent
}

// WithEventsFiltersSetattrWithAccessTimeChange adds the eventsFiltersSetattrWithAccessTimeChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersSetattrWithAccessTimeChange(eventsFiltersSetattrWithAccessTimeChange *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersSetattrWithAccessTimeChange(eventsFiltersSetattrWithAccessTimeChange)
	return o
}

// SetEventsFiltersSetattrWithAccessTimeChange adds the eventsFiltersSetattrWithAccessTimeChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersSetattrWithAccessTimeChange(eventsFiltersSetattrWithAccessTimeChange *bool) {
	o.EventsFiltersSetattrWithAccessTimeChange = eventsFiltersSetattrWithAccessTimeChange
}

// WithEventsFiltersSetattrWithAllocationSizeChange adds the eventsFiltersSetattrWithAllocationSizeChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersSetattrWithAllocationSizeChange(eventsFiltersSetattrWithAllocationSizeChange *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersSetattrWithAllocationSizeChange(eventsFiltersSetattrWithAllocationSizeChange)
	return o
}

// SetEventsFiltersSetattrWithAllocationSizeChange adds the eventsFiltersSetattrWithAllocationSizeChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersSetattrWithAllocationSizeChange(eventsFiltersSetattrWithAllocationSizeChange *bool) {
	o.EventsFiltersSetattrWithAllocationSizeChange = eventsFiltersSetattrWithAllocationSizeChange
}

// WithEventsFiltersSetattrWithCreationTimeChange adds the eventsFiltersSetattrWithCreationTimeChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersSetattrWithCreationTimeChange(eventsFiltersSetattrWithCreationTimeChange *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersSetattrWithCreationTimeChange(eventsFiltersSetattrWithCreationTimeChange)
	return o
}

// SetEventsFiltersSetattrWithCreationTimeChange adds the eventsFiltersSetattrWithCreationTimeChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersSetattrWithCreationTimeChange(eventsFiltersSetattrWithCreationTimeChange *bool) {
	o.EventsFiltersSetattrWithCreationTimeChange = eventsFiltersSetattrWithCreationTimeChange
}

// WithEventsFiltersSetattrWithDaclChange adds the eventsFiltersSetattrWithDaclChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersSetattrWithDaclChange(eventsFiltersSetattrWithDaclChange *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersSetattrWithDaclChange(eventsFiltersSetattrWithDaclChange)
	return o
}

// SetEventsFiltersSetattrWithDaclChange adds the eventsFiltersSetattrWithDaclChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersSetattrWithDaclChange(eventsFiltersSetattrWithDaclChange *bool) {
	o.EventsFiltersSetattrWithDaclChange = eventsFiltersSetattrWithDaclChange
}

// WithEventsFiltersSetattrWithGroupChange adds the eventsFiltersSetattrWithGroupChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersSetattrWithGroupChange(eventsFiltersSetattrWithGroupChange *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersSetattrWithGroupChange(eventsFiltersSetattrWithGroupChange)
	return o
}

// SetEventsFiltersSetattrWithGroupChange adds the eventsFiltersSetattrWithGroupChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersSetattrWithGroupChange(eventsFiltersSetattrWithGroupChange *bool) {
	o.EventsFiltersSetattrWithGroupChange = eventsFiltersSetattrWithGroupChange
}

// WithEventsFiltersSetattrWithModeChange adds the eventsFiltersSetattrWithModeChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersSetattrWithModeChange(eventsFiltersSetattrWithModeChange *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersSetattrWithModeChange(eventsFiltersSetattrWithModeChange)
	return o
}

// SetEventsFiltersSetattrWithModeChange adds the eventsFiltersSetattrWithModeChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersSetattrWithModeChange(eventsFiltersSetattrWithModeChange *bool) {
	o.EventsFiltersSetattrWithModeChange = eventsFiltersSetattrWithModeChange
}

// WithEventsFiltersSetattrWithModifyTimeChange adds the eventsFiltersSetattrWithModifyTimeChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersSetattrWithModifyTimeChange(eventsFiltersSetattrWithModifyTimeChange *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersSetattrWithModifyTimeChange(eventsFiltersSetattrWithModifyTimeChange)
	return o
}

// SetEventsFiltersSetattrWithModifyTimeChange adds the eventsFiltersSetattrWithModifyTimeChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersSetattrWithModifyTimeChange(eventsFiltersSetattrWithModifyTimeChange *bool) {
	o.EventsFiltersSetattrWithModifyTimeChange = eventsFiltersSetattrWithModifyTimeChange
}

// WithEventsFiltersSetattrWithOwnerChange adds the eventsFiltersSetattrWithOwnerChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersSetattrWithOwnerChange(eventsFiltersSetattrWithOwnerChange *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersSetattrWithOwnerChange(eventsFiltersSetattrWithOwnerChange)
	return o
}

// SetEventsFiltersSetattrWithOwnerChange adds the eventsFiltersSetattrWithOwnerChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersSetattrWithOwnerChange(eventsFiltersSetattrWithOwnerChange *bool) {
	o.EventsFiltersSetattrWithOwnerChange = eventsFiltersSetattrWithOwnerChange
}

// WithEventsFiltersSetattrWithSaclChange adds the eventsFiltersSetattrWithSaclChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersSetattrWithSaclChange(eventsFiltersSetattrWithSaclChange *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersSetattrWithSaclChange(eventsFiltersSetattrWithSaclChange)
	return o
}

// SetEventsFiltersSetattrWithSaclChange adds the eventsFiltersSetattrWithSaclChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersSetattrWithSaclChange(eventsFiltersSetattrWithSaclChange *bool) {
	o.EventsFiltersSetattrWithSaclChange = eventsFiltersSetattrWithSaclChange
}

// WithEventsFiltersSetattrWithSizeChange adds the eventsFiltersSetattrWithSizeChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersSetattrWithSizeChange(eventsFiltersSetattrWithSizeChange *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersSetattrWithSizeChange(eventsFiltersSetattrWithSizeChange)
	return o
}

// SetEventsFiltersSetattrWithSizeChange adds the eventsFiltersSetattrWithSizeChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersSetattrWithSizeChange(eventsFiltersSetattrWithSizeChange *bool) {
	o.EventsFiltersSetattrWithSizeChange = eventsFiltersSetattrWithSizeChange
}

// WithEventsFiltersWriteWithSizeChange adds the eventsFiltersWriteWithSizeChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersWriteWithSizeChange(eventsFiltersWriteWithSizeChange *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersWriteWithSizeChange(eventsFiltersWriteWithSizeChange)
	return o
}

// SetEventsFiltersWriteWithSizeChange adds the eventsFiltersWriteWithSizeChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersWriteWithSizeChange(eventsFiltersWriteWithSizeChange *bool) {
	o.EventsFiltersWriteWithSizeChange = eventsFiltersWriteWithSizeChange
}

// WithEventsMonitorFileopFailure adds the eventsMonitorFileopFailure to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsMonitorFileopFailure(eventsMonitorFileopFailure *bool) *FpolicyCollectionGetParams {
	o.SetEventsMonitorFileopFailure(eventsMonitorFileopFailure)
	return o
}

// SetEventsMonitorFileopFailure adds the eventsMonitorFileopFailure to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsMonitorFileopFailure(eventsMonitorFileopFailure *bool) {
	o.EventsMonitorFileopFailure = eventsMonitorFileopFailure
}

// WithEventsName adds the eventsName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsName(eventsName *string) *FpolicyCollectionGetParams {
	o.SetEventsName(eventsName)
	return o
}

// SetEventsName adds the eventsName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsName(eventsName *string) {
	o.EventsName = eventsName
}

// WithEventsProtocol adds the eventsProtocol to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsProtocol(eventsProtocol *string) *FpolicyCollectionGetParams {
	o.SetEventsProtocol(eventsProtocol)
	return o
}

// SetEventsProtocol adds the eventsProtocol to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsProtocol(eventsProtocol *string) {
	o.EventsProtocol = eventsProtocol
}

// WithEventsVolumeMonitoring adds the eventsVolumeMonitoring to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsVolumeMonitoring(eventsVolumeMonitoring *bool) *FpolicyCollectionGetParams {
	o.SetEventsVolumeMonitoring(eventsVolumeMonitoring)
	return o
}

// SetEventsVolumeMonitoring adds the eventsVolumeMonitoring to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsVolumeMonitoring(eventsVolumeMonitoring *bool) {
	o.EventsVolumeMonitoring = eventsVolumeMonitoring
}

// WithFields adds the fields to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithFields(fields []string) *FpolicyCollectionGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithMaxRecords adds the maxRecords to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithMaxRecords(maxRecords *int64) *FpolicyCollectionGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithOrderBy adds the orderBy to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithOrderBy(orderBy []string) *FpolicyCollectionGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithPersistentStoresAutosizeMode adds the persistentStoresAutosizeMode to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPersistentStoresAutosizeMode(persistentStoresAutosizeMode *string) *FpolicyCollectionGetParams {
	o.SetPersistentStoresAutosizeMode(persistentStoresAutosizeMode)
	return o
}

// SetPersistentStoresAutosizeMode adds the persistentStoresAutosizeMode to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPersistentStoresAutosizeMode(persistentStoresAutosizeMode *string) {
	o.PersistentStoresAutosizeMode = persistentStoresAutosizeMode
}

// WithPersistentStoresName adds the persistentStoresName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPersistentStoresName(persistentStoresName *string) *FpolicyCollectionGetParams {
	o.SetPersistentStoresName(persistentStoresName)
	return o
}

// SetPersistentStoresName adds the persistentStoresName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPersistentStoresName(persistentStoresName *string) {
	o.PersistentStoresName = persistentStoresName
}

// WithPersistentStoresSize adds the persistentStoresSize to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPersistentStoresSize(persistentStoresSize *int64) *FpolicyCollectionGetParams {
	o.SetPersistentStoresSize(persistentStoresSize)
	return o
}

// SetPersistentStoresSize adds the persistentStoresSize to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPersistentStoresSize(persistentStoresSize *int64) {
	o.PersistentStoresSize = persistentStoresSize
}

// WithPersistentStoresVolume adds the persistentStoresVolume to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPersistentStoresVolume(persistentStoresVolume *string) *FpolicyCollectionGetParams {
	o.SetPersistentStoresVolume(persistentStoresVolume)
	return o
}

// SetPersistentStoresVolume adds the persistentStoresVolume to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPersistentStoresVolume(persistentStoresVolume *string) {
	o.PersistentStoresVolume = persistentStoresVolume
}

// WithPoliciesAllowPrivilegedAccess adds the policiesAllowPrivilegedAccess to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesAllowPrivilegedAccess(policiesAllowPrivilegedAccess *bool) *FpolicyCollectionGetParams {
	o.SetPoliciesAllowPrivilegedAccess(policiesAllowPrivilegedAccess)
	return o
}

// SetPoliciesAllowPrivilegedAccess adds the policiesAllowPrivilegedAccess to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesAllowPrivilegedAccess(policiesAllowPrivilegedAccess *bool) {
	o.PoliciesAllowPrivilegedAccess = policiesAllowPrivilegedAccess
}

// WithPoliciesEnabled adds the policiesEnabled to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesEnabled(policiesEnabled *bool) *FpolicyCollectionGetParams {
	o.SetPoliciesEnabled(policiesEnabled)
	return o
}

// SetPoliciesEnabled adds the policiesEnabled to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesEnabled(policiesEnabled *bool) {
	o.PoliciesEnabled = policiesEnabled
}

// WithPoliciesEngineName adds the policiesEngineName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesEngineName(policiesEngineName *string) *FpolicyCollectionGetParams {
	o.SetPoliciesEngineName(policiesEngineName)
	return o
}

// SetPoliciesEngineName adds the policiesEngineName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesEngineName(policiesEngineName *string) {
	o.PoliciesEngineName = policiesEngineName
}

// WithPoliciesEventsName adds the policiesEventsName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesEventsName(policiesEventsName *string) *FpolicyCollectionGetParams {
	o.SetPoliciesEventsName(policiesEventsName)
	return o
}

// SetPoliciesEventsName adds the policiesEventsName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesEventsName(policiesEventsName *string) {
	o.PoliciesEventsName = policiesEventsName
}

// WithPoliciesMandatory adds the policiesMandatory to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesMandatory(policiesMandatory *bool) *FpolicyCollectionGetParams {
	o.SetPoliciesMandatory(policiesMandatory)
	return o
}

// SetPoliciesMandatory adds the policiesMandatory to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesMandatory(policiesMandatory *bool) {
	o.PoliciesMandatory = policiesMandatory
}

// WithPoliciesName adds the policiesName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesName(policiesName *string) *FpolicyCollectionGetParams {
	o.SetPoliciesName(policiesName)
	return o
}

// SetPoliciesName adds the policiesName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesName(policiesName *string) {
	o.PoliciesName = policiesName
}

// WithPoliciesPassthroughRead adds the policiesPassthroughRead to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesPassthroughRead(policiesPassthroughRead *bool) *FpolicyCollectionGetParams {
	o.SetPoliciesPassthroughRead(policiesPassthroughRead)
	return o
}

// SetPoliciesPassthroughRead adds the policiesPassthroughRead to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesPassthroughRead(policiesPassthroughRead *bool) {
	o.PoliciesPassthroughRead = policiesPassthroughRead
}

// WithPoliciesPersistentStore adds the policiesPersistentStore to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesPersistentStore(policiesPersistentStore *string) *FpolicyCollectionGetParams {
	o.SetPoliciesPersistentStore(policiesPersistentStore)
	return o
}

// SetPoliciesPersistentStore adds the policiesPersistentStore to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesPersistentStore(policiesPersistentStore *string) {
	o.PoliciesPersistentStore = policiesPersistentStore
}

// WithPoliciesPriority adds the policiesPriority to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesPriority(policiesPriority *int64) *FpolicyCollectionGetParams {
	o.SetPoliciesPriority(policiesPriority)
	return o
}

// SetPoliciesPriority adds the policiesPriority to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesPriority(policiesPriority *int64) {
	o.PoliciesPriority = policiesPriority
}

// WithPoliciesPrivilegedUser adds the policiesPrivilegedUser to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesPrivilegedUser(policiesPrivilegedUser *string) *FpolicyCollectionGetParams {
	o.SetPoliciesPrivilegedUser(policiesPrivilegedUser)
	return o
}

// SetPoliciesPrivilegedUser adds the policiesPrivilegedUser to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesPrivilegedUser(policiesPrivilegedUser *string) {
	o.PoliciesPrivilegedUser = policiesPrivilegedUser
}

// WithPoliciesScopeCheckExtensionsOnDirectories adds the policiesScopeCheckExtensionsOnDirectories to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesScopeCheckExtensionsOnDirectories(policiesScopeCheckExtensionsOnDirectories *bool) *FpolicyCollectionGetParams {
	o.SetPoliciesScopeCheckExtensionsOnDirectories(policiesScopeCheckExtensionsOnDirectories)
	return o
}

// SetPoliciesScopeCheckExtensionsOnDirectories adds the policiesScopeCheckExtensionsOnDirectories to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesScopeCheckExtensionsOnDirectories(policiesScopeCheckExtensionsOnDirectories *bool) {
	o.PoliciesScopeCheckExtensionsOnDirectories = policiesScopeCheckExtensionsOnDirectories
}

// WithPoliciesScopeExcludeExportPolicies adds the policiesScopeExcludeExportPolicies to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesScopeExcludeExportPolicies(policiesScopeExcludeExportPolicies *string) *FpolicyCollectionGetParams {
	o.SetPoliciesScopeExcludeExportPolicies(policiesScopeExcludeExportPolicies)
	return o
}

// SetPoliciesScopeExcludeExportPolicies adds the policiesScopeExcludeExportPolicies to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesScopeExcludeExportPolicies(policiesScopeExcludeExportPolicies *string) {
	o.PoliciesScopeExcludeExportPolicies = policiesScopeExcludeExportPolicies
}

// WithPoliciesScopeExcludeExtension adds the policiesScopeExcludeExtension to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesScopeExcludeExtension(policiesScopeExcludeExtension *string) *FpolicyCollectionGetParams {
	o.SetPoliciesScopeExcludeExtension(policiesScopeExcludeExtension)
	return o
}

// SetPoliciesScopeExcludeExtension adds the policiesScopeExcludeExtension to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesScopeExcludeExtension(policiesScopeExcludeExtension *string) {
	o.PoliciesScopeExcludeExtension = policiesScopeExcludeExtension
}

// WithPoliciesScopeExcludeShares adds the policiesScopeExcludeShares to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesScopeExcludeShares(policiesScopeExcludeShares *string) *FpolicyCollectionGetParams {
	o.SetPoliciesScopeExcludeShares(policiesScopeExcludeShares)
	return o
}

// SetPoliciesScopeExcludeShares adds the policiesScopeExcludeShares to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesScopeExcludeShares(policiesScopeExcludeShares *string) {
	o.PoliciesScopeExcludeShares = policiesScopeExcludeShares
}

// WithPoliciesScopeExcludeVolumes adds the policiesScopeExcludeVolumes to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesScopeExcludeVolumes(policiesScopeExcludeVolumes *string) *FpolicyCollectionGetParams {
	o.SetPoliciesScopeExcludeVolumes(policiesScopeExcludeVolumes)
	return o
}

// SetPoliciesScopeExcludeVolumes adds the policiesScopeExcludeVolumes to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesScopeExcludeVolumes(policiesScopeExcludeVolumes *string) {
	o.PoliciesScopeExcludeVolumes = policiesScopeExcludeVolumes
}

// WithPoliciesScopeIncludeExportPolicies adds the policiesScopeIncludeExportPolicies to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesScopeIncludeExportPolicies(policiesScopeIncludeExportPolicies *string) *FpolicyCollectionGetParams {
	o.SetPoliciesScopeIncludeExportPolicies(policiesScopeIncludeExportPolicies)
	return o
}

// SetPoliciesScopeIncludeExportPolicies adds the policiesScopeIncludeExportPolicies to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesScopeIncludeExportPolicies(policiesScopeIncludeExportPolicies *string) {
	o.PoliciesScopeIncludeExportPolicies = policiesScopeIncludeExportPolicies
}

// WithPoliciesScopeIncludeExtension adds the policiesScopeIncludeExtension to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesScopeIncludeExtension(policiesScopeIncludeExtension *string) *FpolicyCollectionGetParams {
	o.SetPoliciesScopeIncludeExtension(policiesScopeIncludeExtension)
	return o
}

// SetPoliciesScopeIncludeExtension adds the policiesScopeIncludeExtension to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesScopeIncludeExtension(policiesScopeIncludeExtension *string) {
	o.PoliciesScopeIncludeExtension = policiesScopeIncludeExtension
}

// WithPoliciesScopeIncludeShares adds the policiesScopeIncludeShares to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesScopeIncludeShares(policiesScopeIncludeShares *string) *FpolicyCollectionGetParams {
	o.SetPoliciesScopeIncludeShares(policiesScopeIncludeShares)
	return o
}

// SetPoliciesScopeIncludeShares adds the policiesScopeIncludeShares to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesScopeIncludeShares(policiesScopeIncludeShares *string) {
	o.PoliciesScopeIncludeShares = policiesScopeIncludeShares
}

// WithPoliciesScopeIncludeVolumes adds the policiesScopeIncludeVolumes to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesScopeIncludeVolumes(policiesScopeIncludeVolumes *string) *FpolicyCollectionGetParams {
	o.SetPoliciesScopeIncludeVolumes(policiesScopeIncludeVolumes)
	return o
}

// SetPoliciesScopeIncludeVolumes adds the policiesScopeIncludeVolumes to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesScopeIncludeVolumes(policiesScopeIncludeVolumes *string) {
	o.PoliciesScopeIncludeVolumes = policiesScopeIncludeVolumes
}

// WithPoliciesScopeObjectMonitoringWithNoExtension adds the policiesScopeObjectMonitoringWithNoExtension to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesScopeObjectMonitoringWithNoExtension(policiesScopeObjectMonitoringWithNoExtension *bool) *FpolicyCollectionGetParams {
	o.SetPoliciesScopeObjectMonitoringWithNoExtension(policiesScopeObjectMonitoringWithNoExtension)
	return o
}

// SetPoliciesScopeObjectMonitoringWithNoExtension adds the policiesScopeObjectMonitoringWithNoExtension to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesScopeObjectMonitoringWithNoExtension(policiesScopeObjectMonitoringWithNoExtension *bool) {
	o.PoliciesScopeObjectMonitoringWithNoExtension = policiesScopeObjectMonitoringWithNoExtension
}

// WithReturnRecords adds the returnRecords to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithReturnRecords(returnRecords *bool) *FpolicyCollectionGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithReturnTimeout(returnTimeout *int64) *FpolicyCollectionGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithSvmName adds the svmName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithSvmName(svmName *string) *FpolicyCollectionGetParams {
	o.SetSvmName(svmName)
	return o
}

// SetSvmName adds the svmName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetSvmName(svmName *string) {
	o.SvmName = svmName
}

// WithSvmUUID adds the svmUUID to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithSvmUUID(svmUUID *string) *FpolicyCollectionGetParams {
	o.SetSvmUUID(svmUUID)
	return o
}

// SetSvmUUID adds the svmUuid to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetSvmUUID(svmUUID *string) {
	o.SvmUUID = svmUUID
}

// WriteToRequest writes these params to a swagger request
func (o *FpolicyCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EnginesBufferSizeRecvBuffer != nil {

		// query param engines.buffer_size.recv_buffer
		var qrEnginesBufferSizeRecvBuffer int64

		if o.EnginesBufferSizeRecvBuffer != nil {
			qrEnginesBufferSizeRecvBuffer = *o.EnginesBufferSizeRecvBuffer
		}
		qEnginesBufferSizeRecvBuffer := swag.FormatInt64(qrEnginesBufferSizeRecvBuffer)
		if qEnginesBufferSizeRecvBuffer != "" {

			if err := r.SetQueryParam("engines.buffer_size.recv_buffer", qEnginesBufferSizeRecvBuffer); err != nil {
				return err
			}
		}
	}

	if o.EnginesBufferSizeSendBuffer != nil {

		// query param engines.buffer_size.send_buffer
		var qrEnginesBufferSizeSendBuffer int64

		if o.EnginesBufferSizeSendBuffer != nil {
			qrEnginesBufferSizeSendBuffer = *o.EnginesBufferSizeSendBuffer
		}
		qEnginesBufferSizeSendBuffer := swag.FormatInt64(qrEnginesBufferSizeSendBuffer)
		if qEnginesBufferSizeSendBuffer != "" {

			if err := r.SetQueryParam("engines.buffer_size.send_buffer", qEnginesBufferSizeSendBuffer); err != nil {
				return err
			}
		}
	}

	if o.EnginesCertificateCa != nil {

		// query param engines.certificate.ca
		var qrEnginesCertificateCa string

		if o.EnginesCertificateCa != nil {
			qrEnginesCertificateCa = *o.EnginesCertificateCa
		}
		qEnginesCertificateCa := qrEnginesCertificateCa
		if qEnginesCertificateCa != "" {

			if err := r.SetQueryParam("engines.certificate.ca", qEnginesCertificateCa); err != nil {
				return err
			}
		}
	}

	if o.EnginesCertificateName != nil {

		// query param engines.certificate.name
		var qrEnginesCertificateName string

		if o.EnginesCertificateName != nil {
			qrEnginesCertificateName = *o.EnginesCertificateName
		}
		qEnginesCertificateName := qrEnginesCertificateName
		if qEnginesCertificateName != "" {

			if err := r.SetQueryParam("engines.certificate.name", qEnginesCertificateName); err != nil {
				return err
			}
		}
	}

	if o.EnginesCertificateSerialNumber != nil {

		// query param engines.certificate.serial_number
		var qrEnginesCertificateSerialNumber string

		if o.EnginesCertificateSerialNumber != nil {
			qrEnginesCertificateSerialNumber = *o.EnginesCertificateSerialNumber
		}
		qEnginesCertificateSerialNumber := qrEnginesCertificateSerialNumber
		if qEnginesCertificateSerialNumber != "" {

			if err := r.SetQueryParam("engines.certificate.serial_number", qEnginesCertificateSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.EnginesFormat != nil {

		// query param engines.format
		var qrEnginesFormat string

		if o.EnginesFormat != nil {
			qrEnginesFormat = *o.EnginesFormat
		}
		qEnginesFormat := qrEnginesFormat
		if qEnginesFormat != "" {

			if err := r.SetQueryParam("engines.format", qEnginesFormat); err != nil {
				return err
			}
		}
	}

	if o.EnginesKeepAliveInterval != nil {

		// query param engines.keep_alive_interval
		var qrEnginesKeepAliveInterval string

		if o.EnginesKeepAliveInterval != nil {
			qrEnginesKeepAliveInterval = *o.EnginesKeepAliveInterval
		}
		qEnginesKeepAliveInterval := qrEnginesKeepAliveInterval
		if qEnginesKeepAliveInterval != "" {

			if err := r.SetQueryParam("engines.keep_alive_interval", qEnginesKeepAliveInterval); err != nil {
				return err
			}
		}
	}

	if o.EnginesMaxConnectionRetries != nil {

		// query param engines.max_connection_retries
		var qrEnginesMaxConnectionRetries int64

		if o.EnginesMaxConnectionRetries != nil {
			qrEnginesMaxConnectionRetries = *o.EnginesMaxConnectionRetries
		}
		qEnginesMaxConnectionRetries := swag.FormatInt64(qrEnginesMaxConnectionRetries)
		if qEnginesMaxConnectionRetries != "" {

			if err := r.SetQueryParam("engines.max_connection_retries", qEnginesMaxConnectionRetries); err != nil {
				return err
			}
		}
	}

	if o.EnginesMaxServerRequests != nil {

		// query param engines.max_server_requests
		var qrEnginesMaxServerRequests int64

		if o.EnginesMaxServerRequests != nil {
			qrEnginesMaxServerRequests = *o.EnginesMaxServerRequests
		}
		qEnginesMaxServerRequests := swag.FormatInt64(qrEnginesMaxServerRequests)
		if qEnginesMaxServerRequests != "" {

			if err := r.SetQueryParam("engines.max_server_requests", qEnginesMaxServerRequests); err != nil {
				return err
			}
		}
	}

	if o.EnginesName != nil {

		// query param engines.name
		var qrEnginesName string

		if o.EnginesName != nil {
			qrEnginesName = *o.EnginesName
		}
		qEnginesName := qrEnginesName
		if qEnginesName != "" {

			if err := r.SetQueryParam("engines.name", qEnginesName); err != nil {
				return err
			}
		}
	}

	if o.EnginesPort != nil {

		// query param engines.port
		var qrEnginesPort int64

		if o.EnginesPort != nil {
			qrEnginesPort = *o.EnginesPort
		}
		qEnginesPort := swag.FormatInt64(qrEnginesPort)
		if qEnginesPort != "" {

			if err := r.SetQueryParam("engines.port", qEnginesPort); err != nil {
				return err
			}
		}
	}

	if o.EnginesPrimaryServers != nil {

		// query param engines.primary_servers
		var qrEnginesPrimaryServers string

		if o.EnginesPrimaryServers != nil {
			qrEnginesPrimaryServers = *o.EnginesPrimaryServers
		}
		qEnginesPrimaryServers := qrEnginesPrimaryServers
		if qEnginesPrimaryServers != "" {

			if err := r.SetQueryParam("engines.primary_servers", qEnginesPrimaryServers); err != nil {
				return err
			}
		}
	}

	if o.EnginesRequestAbortTimeout != nil {

		// query param engines.request_abort_timeout
		var qrEnginesRequestAbortTimeout string

		if o.EnginesRequestAbortTimeout != nil {
			qrEnginesRequestAbortTimeout = *o.EnginesRequestAbortTimeout
		}
		qEnginesRequestAbortTimeout := qrEnginesRequestAbortTimeout
		if qEnginesRequestAbortTimeout != "" {

			if err := r.SetQueryParam("engines.request_abort_timeout", qEnginesRequestAbortTimeout); err != nil {
				return err
			}
		}
	}

	if o.EnginesRequestCancelTimeout != nil {

		// query param engines.request_cancel_timeout
		var qrEnginesRequestCancelTimeout string

		if o.EnginesRequestCancelTimeout != nil {
			qrEnginesRequestCancelTimeout = *o.EnginesRequestCancelTimeout
		}
		qEnginesRequestCancelTimeout := qrEnginesRequestCancelTimeout
		if qEnginesRequestCancelTimeout != "" {

			if err := r.SetQueryParam("engines.request_cancel_timeout", qEnginesRequestCancelTimeout); err != nil {
				return err
			}
		}
	}

	if o.EnginesResiliencyDirectoryPath != nil {

		// query param engines.resiliency.directory_path
		var qrEnginesResiliencyDirectoryPath string

		if o.EnginesResiliencyDirectoryPath != nil {
			qrEnginesResiliencyDirectoryPath = *o.EnginesResiliencyDirectoryPath
		}
		qEnginesResiliencyDirectoryPath := qrEnginesResiliencyDirectoryPath
		if qEnginesResiliencyDirectoryPath != "" {

			if err := r.SetQueryParam("engines.resiliency.directory_path", qEnginesResiliencyDirectoryPath); err != nil {
				return err
			}
		}
	}

	if o.EnginesResiliencyEnabled != nil {

		// query param engines.resiliency.enabled
		var qrEnginesResiliencyEnabled bool

		if o.EnginesResiliencyEnabled != nil {
			qrEnginesResiliencyEnabled = *o.EnginesResiliencyEnabled
		}
		qEnginesResiliencyEnabled := swag.FormatBool(qrEnginesResiliencyEnabled)
		if qEnginesResiliencyEnabled != "" {

			if err := r.SetQueryParam("engines.resiliency.enabled", qEnginesResiliencyEnabled); err != nil {
				return err
			}
		}
	}

	if o.EnginesResiliencyRetentionDuration != nil {

		// query param engines.resiliency.retention_duration
		var qrEnginesResiliencyRetentionDuration string

		if o.EnginesResiliencyRetentionDuration != nil {
			qrEnginesResiliencyRetentionDuration = *o.EnginesResiliencyRetentionDuration
		}
		qEnginesResiliencyRetentionDuration := qrEnginesResiliencyRetentionDuration
		if qEnginesResiliencyRetentionDuration != "" {

			if err := r.SetQueryParam("engines.resiliency.retention_duration", qEnginesResiliencyRetentionDuration); err != nil {
				return err
			}
		}
	}

	if o.EnginesSecondaryServers != nil {

		// query param engines.secondary_servers
		var qrEnginesSecondaryServers string

		if o.EnginesSecondaryServers != nil {
			qrEnginesSecondaryServers = *o.EnginesSecondaryServers
		}
		qEnginesSecondaryServers := qrEnginesSecondaryServers
		if qEnginesSecondaryServers != "" {

			if err := r.SetQueryParam("engines.secondary_servers", qEnginesSecondaryServers); err != nil {
				return err
			}
		}
	}

	if o.EnginesServerProgressTimeout != nil {

		// query param engines.server_progress_timeout
		var qrEnginesServerProgressTimeout string

		if o.EnginesServerProgressTimeout != nil {
			qrEnginesServerProgressTimeout = *o.EnginesServerProgressTimeout
		}
		qEnginesServerProgressTimeout := qrEnginesServerProgressTimeout
		if qEnginesServerProgressTimeout != "" {

			if err := r.SetQueryParam("engines.server_progress_timeout", qEnginesServerProgressTimeout); err != nil {
				return err
			}
		}
	}

	if o.EnginesSessionTimeout != nil {

		// query param engines.session_timeout
		var qrEnginesSessionTimeout string

		if o.EnginesSessionTimeout != nil {
			qrEnginesSessionTimeout = *o.EnginesSessionTimeout
		}
		qEnginesSessionTimeout := qrEnginesSessionTimeout
		if qEnginesSessionTimeout != "" {

			if err := r.SetQueryParam("engines.session_timeout", qEnginesSessionTimeout); err != nil {
				return err
			}
		}
	}

	if o.EnginesSslOption != nil {

		// query param engines.ssl_option
		var qrEnginesSslOption string

		if o.EnginesSslOption != nil {
			qrEnginesSslOption = *o.EnginesSslOption
		}
		qEnginesSslOption := qrEnginesSslOption
		if qEnginesSslOption != "" {

			if err := r.SetQueryParam("engines.ssl_option", qEnginesSslOption); err != nil {
				return err
			}
		}
	}

	if o.EnginesStatusRequestInterval != nil {

		// query param engines.status_request_interval
		var qrEnginesStatusRequestInterval string

		if o.EnginesStatusRequestInterval != nil {
			qrEnginesStatusRequestInterval = *o.EnginesStatusRequestInterval
		}
		qEnginesStatusRequestInterval := qrEnginesStatusRequestInterval
		if qEnginesStatusRequestInterval != "" {

			if err := r.SetQueryParam("engines.status_request_interval", qEnginesStatusRequestInterval); err != nil {
				return err
			}
		}
	}

	if o.EnginesType != nil {

		// query param engines.type
		var qrEnginesType string

		if o.EnginesType != nil {
			qrEnginesType = *o.EnginesType
		}
		qEnginesType := qrEnginesType
		if qEnginesType != "" {

			if err := r.SetQueryParam("engines.type", qEnginesType); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsAccess != nil {

		// query param events.file_operations.access
		var qrEventsFileOperationsAccess bool

		if o.EventsFileOperationsAccess != nil {
			qrEventsFileOperationsAccess = *o.EventsFileOperationsAccess
		}
		qEventsFileOperationsAccess := swag.FormatBool(qrEventsFileOperationsAccess)
		if qEventsFileOperationsAccess != "" {

			if err := r.SetQueryParam("events.file_operations.access", qEventsFileOperationsAccess); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsClose != nil {

		// query param events.file_operations.close
		var qrEventsFileOperationsClose bool

		if o.EventsFileOperationsClose != nil {
			qrEventsFileOperationsClose = *o.EventsFileOperationsClose
		}
		qEventsFileOperationsClose := swag.FormatBool(qrEventsFileOperationsClose)
		if qEventsFileOperationsClose != "" {

			if err := r.SetQueryParam("events.file_operations.close", qEventsFileOperationsClose); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsCreate != nil {

		// query param events.file_operations.create
		var qrEventsFileOperationsCreate bool

		if o.EventsFileOperationsCreate != nil {
			qrEventsFileOperationsCreate = *o.EventsFileOperationsCreate
		}
		qEventsFileOperationsCreate := swag.FormatBool(qrEventsFileOperationsCreate)
		if qEventsFileOperationsCreate != "" {

			if err := r.SetQueryParam("events.file_operations.create", qEventsFileOperationsCreate); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsCreateDir != nil {

		// query param events.file_operations.create_dir
		var qrEventsFileOperationsCreateDir bool

		if o.EventsFileOperationsCreateDir != nil {
			qrEventsFileOperationsCreateDir = *o.EventsFileOperationsCreateDir
		}
		qEventsFileOperationsCreateDir := swag.FormatBool(qrEventsFileOperationsCreateDir)
		if qEventsFileOperationsCreateDir != "" {

			if err := r.SetQueryParam("events.file_operations.create_dir", qEventsFileOperationsCreateDir); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsDelete != nil {

		// query param events.file_operations.delete
		var qrEventsFileOperationsDelete bool

		if o.EventsFileOperationsDelete != nil {
			qrEventsFileOperationsDelete = *o.EventsFileOperationsDelete
		}
		qEventsFileOperationsDelete := swag.FormatBool(qrEventsFileOperationsDelete)
		if qEventsFileOperationsDelete != "" {

			if err := r.SetQueryParam("events.file_operations.delete", qEventsFileOperationsDelete); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsDeleteDir != nil {

		// query param events.file_operations.delete_dir
		var qrEventsFileOperationsDeleteDir bool

		if o.EventsFileOperationsDeleteDir != nil {
			qrEventsFileOperationsDeleteDir = *o.EventsFileOperationsDeleteDir
		}
		qEventsFileOperationsDeleteDir := swag.FormatBool(qrEventsFileOperationsDeleteDir)
		if qEventsFileOperationsDeleteDir != "" {

			if err := r.SetQueryParam("events.file_operations.delete_dir", qEventsFileOperationsDeleteDir); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsGetattr != nil {

		// query param events.file_operations.getattr
		var qrEventsFileOperationsGetattr bool

		if o.EventsFileOperationsGetattr != nil {
			qrEventsFileOperationsGetattr = *o.EventsFileOperationsGetattr
		}
		qEventsFileOperationsGetattr := swag.FormatBool(qrEventsFileOperationsGetattr)
		if qEventsFileOperationsGetattr != "" {

			if err := r.SetQueryParam("events.file_operations.getattr", qEventsFileOperationsGetattr); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsLink != nil {

		// query param events.file_operations.link
		var qrEventsFileOperationsLink bool

		if o.EventsFileOperationsLink != nil {
			qrEventsFileOperationsLink = *o.EventsFileOperationsLink
		}
		qEventsFileOperationsLink := swag.FormatBool(qrEventsFileOperationsLink)
		if qEventsFileOperationsLink != "" {

			if err := r.SetQueryParam("events.file_operations.link", qEventsFileOperationsLink); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsLookup != nil {

		// query param events.file_operations.lookup
		var qrEventsFileOperationsLookup bool

		if o.EventsFileOperationsLookup != nil {
			qrEventsFileOperationsLookup = *o.EventsFileOperationsLookup
		}
		qEventsFileOperationsLookup := swag.FormatBool(qrEventsFileOperationsLookup)
		if qEventsFileOperationsLookup != "" {

			if err := r.SetQueryParam("events.file_operations.lookup", qEventsFileOperationsLookup); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsOpen != nil {

		// query param events.file_operations.open
		var qrEventsFileOperationsOpen bool

		if o.EventsFileOperationsOpen != nil {
			qrEventsFileOperationsOpen = *o.EventsFileOperationsOpen
		}
		qEventsFileOperationsOpen := swag.FormatBool(qrEventsFileOperationsOpen)
		if qEventsFileOperationsOpen != "" {

			if err := r.SetQueryParam("events.file_operations.open", qEventsFileOperationsOpen); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsRead != nil {

		// query param events.file_operations.read
		var qrEventsFileOperationsRead bool

		if o.EventsFileOperationsRead != nil {
			qrEventsFileOperationsRead = *o.EventsFileOperationsRead
		}
		qEventsFileOperationsRead := swag.FormatBool(qrEventsFileOperationsRead)
		if qEventsFileOperationsRead != "" {

			if err := r.SetQueryParam("events.file_operations.read", qEventsFileOperationsRead); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsRename != nil {

		// query param events.file_operations.rename
		var qrEventsFileOperationsRename bool

		if o.EventsFileOperationsRename != nil {
			qrEventsFileOperationsRename = *o.EventsFileOperationsRename
		}
		qEventsFileOperationsRename := swag.FormatBool(qrEventsFileOperationsRename)
		if qEventsFileOperationsRename != "" {

			if err := r.SetQueryParam("events.file_operations.rename", qEventsFileOperationsRename); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsRenameDir != nil {

		// query param events.file_operations.rename_dir
		var qrEventsFileOperationsRenameDir bool

		if o.EventsFileOperationsRenameDir != nil {
			qrEventsFileOperationsRenameDir = *o.EventsFileOperationsRenameDir
		}
		qEventsFileOperationsRenameDir := swag.FormatBool(qrEventsFileOperationsRenameDir)
		if qEventsFileOperationsRenameDir != "" {

			if err := r.SetQueryParam("events.file_operations.rename_dir", qEventsFileOperationsRenameDir); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsSetattr != nil {

		// query param events.file_operations.setattr
		var qrEventsFileOperationsSetattr bool

		if o.EventsFileOperationsSetattr != nil {
			qrEventsFileOperationsSetattr = *o.EventsFileOperationsSetattr
		}
		qEventsFileOperationsSetattr := swag.FormatBool(qrEventsFileOperationsSetattr)
		if qEventsFileOperationsSetattr != "" {

			if err := r.SetQueryParam("events.file_operations.setattr", qEventsFileOperationsSetattr); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsSymlink != nil {

		// query param events.file_operations.symlink
		var qrEventsFileOperationsSymlink bool

		if o.EventsFileOperationsSymlink != nil {
			qrEventsFileOperationsSymlink = *o.EventsFileOperationsSymlink
		}
		qEventsFileOperationsSymlink := swag.FormatBool(qrEventsFileOperationsSymlink)
		if qEventsFileOperationsSymlink != "" {

			if err := r.SetQueryParam("events.file_operations.symlink", qEventsFileOperationsSymlink); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsWrite != nil {

		// query param events.file_operations.write
		var qrEventsFileOperationsWrite bool

		if o.EventsFileOperationsWrite != nil {
			qrEventsFileOperationsWrite = *o.EventsFileOperationsWrite
		}
		qEventsFileOperationsWrite := swag.FormatBool(qrEventsFileOperationsWrite)
		if qEventsFileOperationsWrite != "" {

			if err := r.SetQueryParam("events.file_operations.write", qEventsFileOperationsWrite); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersCloseWithModification != nil {

		// query param events.filters.close_with_modification
		var qrEventsFiltersCloseWithModification bool

		if o.EventsFiltersCloseWithModification != nil {
			qrEventsFiltersCloseWithModification = *o.EventsFiltersCloseWithModification
		}
		qEventsFiltersCloseWithModification := swag.FormatBool(qrEventsFiltersCloseWithModification)
		if qEventsFiltersCloseWithModification != "" {

			if err := r.SetQueryParam("events.filters.close_with_modification", qEventsFiltersCloseWithModification); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersCloseWithRead != nil {

		// query param events.filters.close_with_read
		var qrEventsFiltersCloseWithRead bool

		if o.EventsFiltersCloseWithRead != nil {
			qrEventsFiltersCloseWithRead = *o.EventsFiltersCloseWithRead
		}
		qEventsFiltersCloseWithRead := swag.FormatBool(qrEventsFiltersCloseWithRead)
		if qEventsFiltersCloseWithRead != "" {

			if err := r.SetQueryParam("events.filters.close_with_read", qEventsFiltersCloseWithRead); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersCloseWithoutModification != nil {

		// query param events.filters.close_without_modification
		var qrEventsFiltersCloseWithoutModification bool

		if o.EventsFiltersCloseWithoutModification != nil {
			qrEventsFiltersCloseWithoutModification = *o.EventsFiltersCloseWithoutModification
		}
		qEventsFiltersCloseWithoutModification := swag.FormatBool(qrEventsFiltersCloseWithoutModification)
		if qEventsFiltersCloseWithoutModification != "" {

			if err := r.SetQueryParam("events.filters.close_without_modification", qEventsFiltersCloseWithoutModification); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersExcludeDirectory != nil {

		// query param events.filters.exclude_directory
		var qrEventsFiltersExcludeDirectory bool

		if o.EventsFiltersExcludeDirectory != nil {
			qrEventsFiltersExcludeDirectory = *o.EventsFiltersExcludeDirectory
		}
		qEventsFiltersExcludeDirectory := swag.FormatBool(qrEventsFiltersExcludeDirectory)
		if qEventsFiltersExcludeDirectory != "" {

			if err := r.SetQueryParam("events.filters.exclude_directory", qEventsFiltersExcludeDirectory); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersFirstRead != nil {

		// query param events.filters.first_read
		var qrEventsFiltersFirstRead bool

		if o.EventsFiltersFirstRead != nil {
			qrEventsFiltersFirstRead = *o.EventsFiltersFirstRead
		}
		qEventsFiltersFirstRead := swag.FormatBool(qrEventsFiltersFirstRead)
		if qEventsFiltersFirstRead != "" {

			if err := r.SetQueryParam("events.filters.first_read", qEventsFiltersFirstRead); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersFirstWrite != nil {

		// query param events.filters.first_write
		var qrEventsFiltersFirstWrite bool

		if o.EventsFiltersFirstWrite != nil {
			qrEventsFiltersFirstWrite = *o.EventsFiltersFirstWrite
		}
		qEventsFiltersFirstWrite := swag.FormatBool(qrEventsFiltersFirstWrite)
		if qEventsFiltersFirstWrite != "" {

			if err := r.SetQueryParam("events.filters.first_write", qEventsFiltersFirstWrite); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersMonitorAds != nil {

		// query param events.filters.monitor_ads
		var qrEventsFiltersMonitorAds bool

		if o.EventsFiltersMonitorAds != nil {
			qrEventsFiltersMonitorAds = *o.EventsFiltersMonitorAds
		}
		qEventsFiltersMonitorAds := swag.FormatBool(qrEventsFiltersMonitorAds)
		if qEventsFiltersMonitorAds != "" {

			if err := r.SetQueryParam("events.filters.monitor_ads", qEventsFiltersMonitorAds); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersOfflineBit != nil {

		// query param events.filters.offline_bit
		var qrEventsFiltersOfflineBit bool

		if o.EventsFiltersOfflineBit != nil {
			qrEventsFiltersOfflineBit = *o.EventsFiltersOfflineBit
		}
		qEventsFiltersOfflineBit := swag.FormatBool(qrEventsFiltersOfflineBit)
		if qEventsFiltersOfflineBit != "" {

			if err := r.SetQueryParam("events.filters.offline_bit", qEventsFiltersOfflineBit); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersOpenWithDeleteIntent != nil {

		// query param events.filters.open_with_delete_intent
		var qrEventsFiltersOpenWithDeleteIntent bool

		if o.EventsFiltersOpenWithDeleteIntent != nil {
			qrEventsFiltersOpenWithDeleteIntent = *o.EventsFiltersOpenWithDeleteIntent
		}
		qEventsFiltersOpenWithDeleteIntent := swag.FormatBool(qrEventsFiltersOpenWithDeleteIntent)
		if qEventsFiltersOpenWithDeleteIntent != "" {

			if err := r.SetQueryParam("events.filters.open_with_delete_intent", qEventsFiltersOpenWithDeleteIntent); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersOpenWithWriteIntent != nil {

		// query param events.filters.open_with_write_intent
		var qrEventsFiltersOpenWithWriteIntent bool

		if o.EventsFiltersOpenWithWriteIntent != nil {
			qrEventsFiltersOpenWithWriteIntent = *o.EventsFiltersOpenWithWriteIntent
		}
		qEventsFiltersOpenWithWriteIntent := swag.FormatBool(qrEventsFiltersOpenWithWriteIntent)
		if qEventsFiltersOpenWithWriteIntent != "" {

			if err := r.SetQueryParam("events.filters.open_with_write_intent", qEventsFiltersOpenWithWriteIntent); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersSetattrWithAccessTimeChange != nil {

		// query param events.filters.setattr_with_access_time_change
		var qrEventsFiltersSetattrWithAccessTimeChange bool

		if o.EventsFiltersSetattrWithAccessTimeChange != nil {
			qrEventsFiltersSetattrWithAccessTimeChange = *o.EventsFiltersSetattrWithAccessTimeChange
		}
		qEventsFiltersSetattrWithAccessTimeChange := swag.FormatBool(qrEventsFiltersSetattrWithAccessTimeChange)
		if qEventsFiltersSetattrWithAccessTimeChange != "" {

			if err := r.SetQueryParam("events.filters.setattr_with_access_time_change", qEventsFiltersSetattrWithAccessTimeChange); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersSetattrWithAllocationSizeChange != nil {

		// query param events.filters.setattr_with_allocation_size_change
		var qrEventsFiltersSetattrWithAllocationSizeChange bool

		if o.EventsFiltersSetattrWithAllocationSizeChange != nil {
			qrEventsFiltersSetattrWithAllocationSizeChange = *o.EventsFiltersSetattrWithAllocationSizeChange
		}
		qEventsFiltersSetattrWithAllocationSizeChange := swag.FormatBool(qrEventsFiltersSetattrWithAllocationSizeChange)
		if qEventsFiltersSetattrWithAllocationSizeChange != "" {

			if err := r.SetQueryParam("events.filters.setattr_with_allocation_size_change", qEventsFiltersSetattrWithAllocationSizeChange); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersSetattrWithCreationTimeChange != nil {

		// query param events.filters.setattr_with_creation_time_change
		var qrEventsFiltersSetattrWithCreationTimeChange bool

		if o.EventsFiltersSetattrWithCreationTimeChange != nil {
			qrEventsFiltersSetattrWithCreationTimeChange = *o.EventsFiltersSetattrWithCreationTimeChange
		}
		qEventsFiltersSetattrWithCreationTimeChange := swag.FormatBool(qrEventsFiltersSetattrWithCreationTimeChange)
		if qEventsFiltersSetattrWithCreationTimeChange != "" {

			if err := r.SetQueryParam("events.filters.setattr_with_creation_time_change", qEventsFiltersSetattrWithCreationTimeChange); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersSetattrWithDaclChange != nil {

		// query param events.filters.setattr_with_dacl_change
		var qrEventsFiltersSetattrWithDaclChange bool

		if o.EventsFiltersSetattrWithDaclChange != nil {
			qrEventsFiltersSetattrWithDaclChange = *o.EventsFiltersSetattrWithDaclChange
		}
		qEventsFiltersSetattrWithDaclChange := swag.FormatBool(qrEventsFiltersSetattrWithDaclChange)
		if qEventsFiltersSetattrWithDaclChange != "" {

			if err := r.SetQueryParam("events.filters.setattr_with_dacl_change", qEventsFiltersSetattrWithDaclChange); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersSetattrWithGroupChange != nil {

		// query param events.filters.setattr_with_group_change
		var qrEventsFiltersSetattrWithGroupChange bool

		if o.EventsFiltersSetattrWithGroupChange != nil {
			qrEventsFiltersSetattrWithGroupChange = *o.EventsFiltersSetattrWithGroupChange
		}
		qEventsFiltersSetattrWithGroupChange := swag.FormatBool(qrEventsFiltersSetattrWithGroupChange)
		if qEventsFiltersSetattrWithGroupChange != "" {

			if err := r.SetQueryParam("events.filters.setattr_with_group_change", qEventsFiltersSetattrWithGroupChange); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersSetattrWithModeChange != nil {

		// query param events.filters.setattr_with_mode_change
		var qrEventsFiltersSetattrWithModeChange bool

		if o.EventsFiltersSetattrWithModeChange != nil {
			qrEventsFiltersSetattrWithModeChange = *o.EventsFiltersSetattrWithModeChange
		}
		qEventsFiltersSetattrWithModeChange := swag.FormatBool(qrEventsFiltersSetattrWithModeChange)
		if qEventsFiltersSetattrWithModeChange != "" {

			if err := r.SetQueryParam("events.filters.setattr_with_mode_change", qEventsFiltersSetattrWithModeChange); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersSetattrWithModifyTimeChange != nil {

		// query param events.filters.setattr_with_modify_time_change
		var qrEventsFiltersSetattrWithModifyTimeChange bool

		if o.EventsFiltersSetattrWithModifyTimeChange != nil {
			qrEventsFiltersSetattrWithModifyTimeChange = *o.EventsFiltersSetattrWithModifyTimeChange
		}
		qEventsFiltersSetattrWithModifyTimeChange := swag.FormatBool(qrEventsFiltersSetattrWithModifyTimeChange)
		if qEventsFiltersSetattrWithModifyTimeChange != "" {

			if err := r.SetQueryParam("events.filters.setattr_with_modify_time_change", qEventsFiltersSetattrWithModifyTimeChange); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersSetattrWithOwnerChange != nil {

		// query param events.filters.setattr_with_owner_change
		var qrEventsFiltersSetattrWithOwnerChange bool

		if o.EventsFiltersSetattrWithOwnerChange != nil {
			qrEventsFiltersSetattrWithOwnerChange = *o.EventsFiltersSetattrWithOwnerChange
		}
		qEventsFiltersSetattrWithOwnerChange := swag.FormatBool(qrEventsFiltersSetattrWithOwnerChange)
		if qEventsFiltersSetattrWithOwnerChange != "" {

			if err := r.SetQueryParam("events.filters.setattr_with_owner_change", qEventsFiltersSetattrWithOwnerChange); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersSetattrWithSaclChange != nil {

		// query param events.filters.setattr_with_sacl_change
		var qrEventsFiltersSetattrWithSaclChange bool

		if o.EventsFiltersSetattrWithSaclChange != nil {
			qrEventsFiltersSetattrWithSaclChange = *o.EventsFiltersSetattrWithSaclChange
		}
		qEventsFiltersSetattrWithSaclChange := swag.FormatBool(qrEventsFiltersSetattrWithSaclChange)
		if qEventsFiltersSetattrWithSaclChange != "" {

			if err := r.SetQueryParam("events.filters.setattr_with_sacl_change", qEventsFiltersSetattrWithSaclChange); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersSetattrWithSizeChange != nil {

		// query param events.filters.setattr_with_size_change
		var qrEventsFiltersSetattrWithSizeChange bool

		if o.EventsFiltersSetattrWithSizeChange != nil {
			qrEventsFiltersSetattrWithSizeChange = *o.EventsFiltersSetattrWithSizeChange
		}
		qEventsFiltersSetattrWithSizeChange := swag.FormatBool(qrEventsFiltersSetattrWithSizeChange)
		if qEventsFiltersSetattrWithSizeChange != "" {

			if err := r.SetQueryParam("events.filters.setattr_with_size_change", qEventsFiltersSetattrWithSizeChange); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersWriteWithSizeChange != nil {

		// query param events.filters.write_with_size_change
		var qrEventsFiltersWriteWithSizeChange bool

		if o.EventsFiltersWriteWithSizeChange != nil {
			qrEventsFiltersWriteWithSizeChange = *o.EventsFiltersWriteWithSizeChange
		}
		qEventsFiltersWriteWithSizeChange := swag.FormatBool(qrEventsFiltersWriteWithSizeChange)
		if qEventsFiltersWriteWithSizeChange != "" {

			if err := r.SetQueryParam("events.filters.write_with_size_change", qEventsFiltersWriteWithSizeChange); err != nil {
				return err
			}
		}
	}

	if o.EventsMonitorFileopFailure != nil {

		// query param events.monitor_fileop_failure
		var qrEventsMonitorFileopFailure bool

		if o.EventsMonitorFileopFailure != nil {
			qrEventsMonitorFileopFailure = *o.EventsMonitorFileopFailure
		}
		qEventsMonitorFileopFailure := swag.FormatBool(qrEventsMonitorFileopFailure)
		if qEventsMonitorFileopFailure != "" {

			if err := r.SetQueryParam("events.monitor_fileop_failure", qEventsMonitorFileopFailure); err != nil {
				return err
			}
		}
	}

	if o.EventsName != nil {

		// query param events.name
		var qrEventsName string

		if o.EventsName != nil {
			qrEventsName = *o.EventsName
		}
		qEventsName := qrEventsName
		if qEventsName != "" {

			if err := r.SetQueryParam("events.name", qEventsName); err != nil {
				return err
			}
		}
	}

	if o.EventsProtocol != nil {

		// query param events.protocol
		var qrEventsProtocol string

		if o.EventsProtocol != nil {
			qrEventsProtocol = *o.EventsProtocol
		}
		qEventsProtocol := qrEventsProtocol
		if qEventsProtocol != "" {

			if err := r.SetQueryParam("events.protocol", qEventsProtocol); err != nil {
				return err
			}
		}
	}

	if o.EventsVolumeMonitoring != nil {

		// query param events.volume_monitoring
		var qrEventsVolumeMonitoring bool

		if o.EventsVolumeMonitoring != nil {
			qrEventsVolumeMonitoring = *o.EventsVolumeMonitoring
		}
		qEventsVolumeMonitoring := swag.FormatBool(qrEventsVolumeMonitoring)
		if qEventsVolumeMonitoring != "" {

			if err := r.SetQueryParam("events.volume_monitoring", qEventsVolumeMonitoring); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.PersistentStoresAutosizeMode != nil {

		// query param persistent_stores.autosize_mode
		var qrPersistentStoresAutosizeMode string

		if o.PersistentStoresAutosizeMode != nil {
			qrPersistentStoresAutosizeMode = *o.PersistentStoresAutosizeMode
		}
		qPersistentStoresAutosizeMode := qrPersistentStoresAutosizeMode
		if qPersistentStoresAutosizeMode != "" {

			if err := r.SetQueryParam("persistent_stores.autosize_mode", qPersistentStoresAutosizeMode); err != nil {
				return err
			}
		}
	}

	if o.PersistentStoresName != nil {

		// query param persistent_stores.name
		var qrPersistentStoresName string

		if o.PersistentStoresName != nil {
			qrPersistentStoresName = *o.PersistentStoresName
		}
		qPersistentStoresName := qrPersistentStoresName
		if qPersistentStoresName != "" {

			if err := r.SetQueryParam("persistent_stores.name", qPersistentStoresName); err != nil {
				return err
			}
		}
	}

	if o.PersistentStoresSize != nil {

		// query param persistent_stores.size
		var qrPersistentStoresSize int64

		if o.PersistentStoresSize != nil {
			qrPersistentStoresSize = *o.PersistentStoresSize
		}
		qPersistentStoresSize := swag.FormatInt64(qrPersistentStoresSize)
		if qPersistentStoresSize != "" {

			if err := r.SetQueryParam("persistent_stores.size", qPersistentStoresSize); err != nil {
				return err
			}
		}
	}

	if o.PersistentStoresVolume != nil {

		// query param persistent_stores.volume
		var qrPersistentStoresVolume string

		if o.PersistentStoresVolume != nil {
			qrPersistentStoresVolume = *o.PersistentStoresVolume
		}
		qPersistentStoresVolume := qrPersistentStoresVolume
		if qPersistentStoresVolume != "" {

			if err := r.SetQueryParam("persistent_stores.volume", qPersistentStoresVolume); err != nil {
				return err
			}
		}
	}

	if o.PoliciesAllowPrivilegedAccess != nil {

		// query param policies.allow_privileged_access
		var qrPoliciesAllowPrivilegedAccess bool

		if o.PoliciesAllowPrivilegedAccess != nil {
			qrPoliciesAllowPrivilegedAccess = *o.PoliciesAllowPrivilegedAccess
		}
		qPoliciesAllowPrivilegedAccess := swag.FormatBool(qrPoliciesAllowPrivilegedAccess)
		if qPoliciesAllowPrivilegedAccess != "" {

			if err := r.SetQueryParam("policies.allow_privileged_access", qPoliciesAllowPrivilegedAccess); err != nil {
				return err
			}
		}
	}

	if o.PoliciesEnabled != nil {

		// query param policies.enabled
		var qrPoliciesEnabled bool

		if o.PoliciesEnabled != nil {
			qrPoliciesEnabled = *o.PoliciesEnabled
		}
		qPoliciesEnabled := swag.FormatBool(qrPoliciesEnabled)
		if qPoliciesEnabled != "" {

			if err := r.SetQueryParam("policies.enabled", qPoliciesEnabled); err != nil {
				return err
			}
		}
	}

	if o.PoliciesEngineName != nil {

		// query param policies.engine.name
		var qrPoliciesEngineName string

		if o.PoliciesEngineName != nil {
			qrPoliciesEngineName = *o.PoliciesEngineName
		}
		qPoliciesEngineName := qrPoliciesEngineName
		if qPoliciesEngineName != "" {

			if err := r.SetQueryParam("policies.engine.name", qPoliciesEngineName); err != nil {
				return err
			}
		}
	}

	if o.PoliciesEventsName != nil {

		// query param policies.events.name
		var qrPoliciesEventsName string

		if o.PoliciesEventsName != nil {
			qrPoliciesEventsName = *o.PoliciesEventsName
		}
		qPoliciesEventsName := qrPoliciesEventsName
		if qPoliciesEventsName != "" {

			if err := r.SetQueryParam("policies.events.name", qPoliciesEventsName); err != nil {
				return err
			}
		}
	}

	if o.PoliciesMandatory != nil {

		// query param policies.mandatory
		var qrPoliciesMandatory bool

		if o.PoliciesMandatory != nil {
			qrPoliciesMandatory = *o.PoliciesMandatory
		}
		qPoliciesMandatory := swag.FormatBool(qrPoliciesMandatory)
		if qPoliciesMandatory != "" {

			if err := r.SetQueryParam("policies.mandatory", qPoliciesMandatory); err != nil {
				return err
			}
		}
	}

	if o.PoliciesName != nil {

		// query param policies.name
		var qrPoliciesName string

		if o.PoliciesName != nil {
			qrPoliciesName = *o.PoliciesName
		}
		qPoliciesName := qrPoliciesName
		if qPoliciesName != "" {

			if err := r.SetQueryParam("policies.name", qPoliciesName); err != nil {
				return err
			}
		}
	}

	if o.PoliciesPassthroughRead != nil {

		// query param policies.passthrough_read
		var qrPoliciesPassthroughRead bool

		if o.PoliciesPassthroughRead != nil {
			qrPoliciesPassthroughRead = *o.PoliciesPassthroughRead
		}
		qPoliciesPassthroughRead := swag.FormatBool(qrPoliciesPassthroughRead)
		if qPoliciesPassthroughRead != "" {

			if err := r.SetQueryParam("policies.passthrough_read", qPoliciesPassthroughRead); err != nil {
				return err
			}
		}
	}

	if o.PoliciesPersistentStore != nil {

		// query param policies.persistent_store
		var qrPoliciesPersistentStore string

		if o.PoliciesPersistentStore != nil {
			qrPoliciesPersistentStore = *o.PoliciesPersistentStore
		}
		qPoliciesPersistentStore := qrPoliciesPersistentStore
		if qPoliciesPersistentStore != "" {

			if err := r.SetQueryParam("policies.persistent_store", qPoliciesPersistentStore); err != nil {
				return err
			}
		}
	}

	if o.PoliciesPriority != nil {

		// query param policies.priority
		var qrPoliciesPriority int64

		if o.PoliciesPriority != nil {
			qrPoliciesPriority = *o.PoliciesPriority
		}
		qPoliciesPriority := swag.FormatInt64(qrPoliciesPriority)
		if qPoliciesPriority != "" {

			if err := r.SetQueryParam("policies.priority", qPoliciesPriority); err != nil {
				return err
			}
		}
	}

	if o.PoliciesPrivilegedUser != nil {

		// query param policies.privileged_user
		var qrPoliciesPrivilegedUser string

		if o.PoliciesPrivilegedUser != nil {
			qrPoliciesPrivilegedUser = *o.PoliciesPrivilegedUser
		}
		qPoliciesPrivilegedUser := qrPoliciesPrivilegedUser
		if qPoliciesPrivilegedUser != "" {

			if err := r.SetQueryParam("policies.privileged_user", qPoliciesPrivilegedUser); err != nil {
				return err
			}
		}
	}

	if o.PoliciesScopeCheckExtensionsOnDirectories != nil {

		// query param policies.scope.check_extensions_on_directories
		var qrPoliciesScopeCheckExtensionsOnDirectories bool

		if o.PoliciesScopeCheckExtensionsOnDirectories != nil {
			qrPoliciesScopeCheckExtensionsOnDirectories = *o.PoliciesScopeCheckExtensionsOnDirectories
		}
		qPoliciesScopeCheckExtensionsOnDirectories := swag.FormatBool(qrPoliciesScopeCheckExtensionsOnDirectories)
		if qPoliciesScopeCheckExtensionsOnDirectories != "" {

			if err := r.SetQueryParam("policies.scope.check_extensions_on_directories", qPoliciesScopeCheckExtensionsOnDirectories); err != nil {
				return err
			}
		}
	}

	if o.PoliciesScopeExcludeExportPolicies != nil {

		// query param policies.scope.exclude_export_policies
		var qrPoliciesScopeExcludeExportPolicies string

		if o.PoliciesScopeExcludeExportPolicies != nil {
			qrPoliciesScopeExcludeExportPolicies = *o.PoliciesScopeExcludeExportPolicies
		}
		qPoliciesScopeExcludeExportPolicies := qrPoliciesScopeExcludeExportPolicies
		if qPoliciesScopeExcludeExportPolicies != "" {

			if err := r.SetQueryParam("policies.scope.exclude_export_policies", qPoliciesScopeExcludeExportPolicies); err != nil {
				return err
			}
		}
	}

	if o.PoliciesScopeExcludeExtension != nil {

		// query param policies.scope.exclude_extension
		var qrPoliciesScopeExcludeExtension string

		if o.PoliciesScopeExcludeExtension != nil {
			qrPoliciesScopeExcludeExtension = *o.PoliciesScopeExcludeExtension
		}
		qPoliciesScopeExcludeExtension := qrPoliciesScopeExcludeExtension
		if qPoliciesScopeExcludeExtension != "" {

			if err := r.SetQueryParam("policies.scope.exclude_extension", qPoliciesScopeExcludeExtension); err != nil {
				return err
			}
		}
	}

	if o.PoliciesScopeExcludeShares != nil {

		// query param policies.scope.exclude_shares
		var qrPoliciesScopeExcludeShares string

		if o.PoliciesScopeExcludeShares != nil {
			qrPoliciesScopeExcludeShares = *o.PoliciesScopeExcludeShares
		}
		qPoliciesScopeExcludeShares := qrPoliciesScopeExcludeShares
		if qPoliciesScopeExcludeShares != "" {

			if err := r.SetQueryParam("policies.scope.exclude_shares", qPoliciesScopeExcludeShares); err != nil {
				return err
			}
		}
	}

	if o.PoliciesScopeExcludeVolumes != nil {

		// query param policies.scope.exclude_volumes
		var qrPoliciesScopeExcludeVolumes string

		if o.PoliciesScopeExcludeVolumes != nil {
			qrPoliciesScopeExcludeVolumes = *o.PoliciesScopeExcludeVolumes
		}
		qPoliciesScopeExcludeVolumes := qrPoliciesScopeExcludeVolumes
		if qPoliciesScopeExcludeVolumes != "" {

			if err := r.SetQueryParam("policies.scope.exclude_volumes", qPoliciesScopeExcludeVolumes); err != nil {
				return err
			}
		}
	}

	if o.PoliciesScopeIncludeExportPolicies != nil {

		// query param policies.scope.include_export_policies
		var qrPoliciesScopeIncludeExportPolicies string

		if o.PoliciesScopeIncludeExportPolicies != nil {
			qrPoliciesScopeIncludeExportPolicies = *o.PoliciesScopeIncludeExportPolicies
		}
		qPoliciesScopeIncludeExportPolicies := qrPoliciesScopeIncludeExportPolicies
		if qPoliciesScopeIncludeExportPolicies != "" {

			if err := r.SetQueryParam("policies.scope.include_export_policies", qPoliciesScopeIncludeExportPolicies); err != nil {
				return err
			}
		}
	}

	if o.PoliciesScopeIncludeExtension != nil {

		// query param policies.scope.include_extension
		var qrPoliciesScopeIncludeExtension string

		if o.PoliciesScopeIncludeExtension != nil {
			qrPoliciesScopeIncludeExtension = *o.PoliciesScopeIncludeExtension
		}
		qPoliciesScopeIncludeExtension := qrPoliciesScopeIncludeExtension
		if qPoliciesScopeIncludeExtension != "" {

			if err := r.SetQueryParam("policies.scope.include_extension", qPoliciesScopeIncludeExtension); err != nil {
				return err
			}
		}
	}

	if o.PoliciesScopeIncludeShares != nil {

		// query param policies.scope.include_shares
		var qrPoliciesScopeIncludeShares string

		if o.PoliciesScopeIncludeShares != nil {
			qrPoliciesScopeIncludeShares = *o.PoliciesScopeIncludeShares
		}
		qPoliciesScopeIncludeShares := qrPoliciesScopeIncludeShares
		if qPoliciesScopeIncludeShares != "" {

			if err := r.SetQueryParam("policies.scope.include_shares", qPoliciesScopeIncludeShares); err != nil {
				return err
			}
		}
	}

	if o.PoliciesScopeIncludeVolumes != nil {

		// query param policies.scope.include_volumes
		var qrPoliciesScopeIncludeVolumes string

		if o.PoliciesScopeIncludeVolumes != nil {
			qrPoliciesScopeIncludeVolumes = *o.PoliciesScopeIncludeVolumes
		}
		qPoliciesScopeIncludeVolumes := qrPoliciesScopeIncludeVolumes
		if qPoliciesScopeIncludeVolumes != "" {

			if err := r.SetQueryParam("policies.scope.include_volumes", qPoliciesScopeIncludeVolumes); err != nil {
				return err
			}
		}
	}

	if o.PoliciesScopeObjectMonitoringWithNoExtension != nil {

		// query param policies.scope.object_monitoring_with_no_extension
		var qrPoliciesScopeObjectMonitoringWithNoExtension bool

		if o.PoliciesScopeObjectMonitoringWithNoExtension != nil {
			qrPoliciesScopeObjectMonitoringWithNoExtension = *o.PoliciesScopeObjectMonitoringWithNoExtension
		}
		qPoliciesScopeObjectMonitoringWithNoExtension := swag.FormatBool(qrPoliciesScopeObjectMonitoringWithNoExtension)
		if qPoliciesScopeObjectMonitoringWithNoExtension != "" {

			if err := r.SetQueryParam("policies.scope.object_monitoring_with_no_extension", qPoliciesScopeObjectMonitoringWithNoExtension); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SvmName != nil {

		// query param svm.name
		var qrSvmName string

		if o.SvmName != nil {
			qrSvmName = *o.SvmName
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SvmUUID != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SvmUUID != nil {
			qrSvmUUID = *o.SvmUUID
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamFpolicyCollectionGet binds the parameter fields
func (o *FpolicyCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamFpolicyCollectionGet binds the parameter order_by
func (o *FpolicyCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
