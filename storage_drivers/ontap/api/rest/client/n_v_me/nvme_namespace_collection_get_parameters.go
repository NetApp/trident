// Code generated by go-swagger; DO NOT EDIT.

package n_v_me

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewNvmeNamespaceCollectionGetParams creates a new NvmeNamespaceCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNvmeNamespaceCollectionGetParams() *NvmeNamespaceCollectionGetParams {
	return &NvmeNamespaceCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNvmeNamespaceCollectionGetParamsWithTimeout creates a new NvmeNamespaceCollectionGetParams object
// with the ability to set a timeout on a request.
func NewNvmeNamespaceCollectionGetParamsWithTimeout(timeout time.Duration) *NvmeNamespaceCollectionGetParams {
	return &NvmeNamespaceCollectionGetParams{
		timeout: timeout,
	}
}

// NewNvmeNamespaceCollectionGetParamsWithContext creates a new NvmeNamespaceCollectionGetParams object
// with the ability to set a context for a request.
func NewNvmeNamespaceCollectionGetParamsWithContext(ctx context.Context) *NvmeNamespaceCollectionGetParams {
	return &NvmeNamespaceCollectionGetParams{
		Context: ctx,
	}
}

// NewNvmeNamespaceCollectionGetParamsWithHTTPClient creates a new NvmeNamespaceCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewNvmeNamespaceCollectionGetParamsWithHTTPClient(client *http.Client) *NvmeNamespaceCollectionGetParams {
	return &NvmeNamespaceCollectionGetParams{
		HTTPClient: client,
	}
}

/*
NvmeNamespaceCollectionGetParams contains all the parameters to send to the API endpoint

	for the nvme namespace collection get operation.

	Typically these are written to a http.Request.
*/
type NvmeNamespaceCollectionGetParams struct {

	/* AutoDelete.

	   Filter by auto_delete
	*/
	AutoDelete *bool

	/* Comment.

	   Filter by comment
	*/
	Comment *string

	/* ConsistencyGroupName.

	   Filter by consistency_group.name
	*/
	ConsistencyGroupName *string

	/* ConsistencyGroupUUID.

	   Filter by consistency_group.uuid
	*/
	ConsistencyGroupUUID *string

	/* CreateTime.

	   Filter by create_time
	*/
	CreateTime *string

	/* Enabled.

	   Filter by enabled
	*/
	Enabled *bool

	/* EncryptionState.

	   Filter by encryption.state
	*/
	EncryptionState *string

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* LocationNamespace.

	   Filter by location.namespace
	*/
	LocationNamespace *string

	/* LocationNodeName.

	   Filter by location.node.name
	*/
	LocationNodeName *string

	/* LocationNodeUUID.

	   Filter by location.node.uuid
	*/
	LocationNodeUUID *string

	/* LocationQtreeID.

	   Filter by location.qtree.id
	*/
	LocationQtreeID *int64

	/* LocationQtreeName.

	   Filter by location.qtree.name
	*/
	LocationQtreeName *string

	/* LocationStorageAvailabilityZoneName.

	   Filter by location.storage_availability_zone.name
	*/
	LocationStorageAvailabilityZoneName *string

	/* LocationStorageAvailabilityZoneUUID.

	   Filter by location.storage_availability_zone.uuid
	*/
	LocationStorageAvailabilityZoneUUID *string

	/* LocationVolumeName.

	   Filter by location.volume.name
	*/
	LocationVolumeName *string

	/* LocationVolumeUUID.

	   Filter by location.volume.uuid
	*/
	LocationVolumeUUID *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* MetricDuration.

	   Filter by metric.duration
	*/
	MetricDuration *string

	/* MetricIopsOther.

	   Filter by metric.iops.other
	*/
	MetricIopsOther *int64

	/* MetricIopsRead.

	   Filter by metric.iops.read
	*/
	MetricIopsRead *int64

	/* MetricIopsTotal.

	   Filter by metric.iops.total
	*/
	MetricIopsTotal *int64

	/* MetricIopsWrite.

	   Filter by metric.iops.write
	*/
	MetricIopsWrite *int64

	/* MetricLatencyOther.

	   Filter by metric.latency.other
	*/
	MetricLatencyOther *int64

	/* MetricLatencyRead.

	   Filter by metric.latency.read
	*/
	MetricLatencyRead *int64

	/* MetricLatencyTotal.

	   Filter by metric.latency.total
	*/
	MetricLatencyTotal *int64

	/* MetricLatencyWrite.

	   Filter by metric.latency.write
	*/
	MetricLatencyWrite *int64

	/* MetricStatus.

	   Filter by metric.status
	*/
	MetricStatus *string

	/* MetricThroughputRead.

	   Filter by metric.throughput.read
	*/
	MetricThroughputRead *int64

	/* MetricThroughputTotal.

	   Filter by metric.throughput.total
	*/
	MetricThroughputTotal *int64

	/* MetricThroughputWrite.

	   Filter by metric.throughput.write
	*/
	MetricThroughputWrite *int64

	/* MetricTimestamp.

	   Filter by metric.timestamp
	*/
	MetricTimestamp *string

	/* Name.

	   Filter by name
	*/
	Name *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* OsType.

	   Filter by os_type
	*/
	OsType *string

	/* QosPolicyName.

	   Filter by qos_policy.name
	*/
	QosPolicyName *string

	/* QosPolicyUUID.

	   Filter by qos_policy.uuid
	*/
	QosPolicyUUID *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* SpaceBlockSize.

	   Filter by space.block_size
	*/
	SpaceBlockSize *int64

	/* SpaceEfficiencyRatio.

	   Filter by space.efficiency_ratio
	*/
	SpaceEfficiencyRatio *float64

	/* SpaceGuaranteeRequested.

	   Filter by space.guarantee.requested
	*/
	SpaceGuaranteeRequested *bool

	/* SpaceGuaranteeReserved.

	   Filter by space.guarantee.reserved
	*/
	SpaceGuaranteeReserved *bool

	/* SpacePhysicalUsed.

	   Filter by space.physical_used
	*/
	SpacePhysicalUsed *int64

	/* SpacePhysicalUsedBySnapshots.

	   Filter by space.physical_used_by_snapshots
	*/
	SpacePhysicalUsedBySnapshots *int64

	/* SpaceSize.

	   Filter by space.size
	*/
	SpaceSize *int64

	/* SpaceSnapshotAutodeleteEnabled.

	   Filter by space.snapshot.autodelete.enabled
	*/
	SpaceSnapshotAutodeleteEnabled *bool

	/* SpaceSnapshotReserveAvailable.

	   Filter by space.snapshot.reserve_available
	*/
	SpaceSnapshotReserveAvailable *int64

	/* SpaceSnapshotReservePercent.

	   Filter by space.snapshot.reserve_percent
	*/
	SpaceSnapshotReservePercent *int64

	/* SpaceSnapshotReserveSize.

	   Filter by space.snapshot.reserve_size
	*/
	SpaceSnapshotReserveSize *int64

	/* SpaceSnapshotSpaceUsedPercent.

	   Filter by space.snapshot.space_used_percent
	*/
	SpaceSnapshotSpaceUsedPercent *int64

	/* SpaceSnapshotUsed.

	   Filter by space.snapshot.used
	*/
	SpaceSnapshotUsed *int64

	/* SpaceUsed.

	   Filter by space.used
	*/
	SpaceUsed *int64

	/* StatisticsIopsRawOther.

	   Filter by statistics.iops_raw.other
	*/
	StatisticsIopsRawOther *int64

	/* StatisticsIopsRawRead.

	   Filter by statistics.iops_raw.read
	*/
	StatisticsIopsRawRead *int64

	/* StatisticsIopsRawTotal.

	   Filter by statistics.iops_raw.total
	*/
	StatisticsIopsRawTotal *int64

	/* StatisticsIopsRawWrite.

	   Filter by statistics.iops_raw.write
	*/
	StatisticsIopsRawWrite *int64

	/* StatisticsLatencyRawOther.

	   Filter by statistics.latency_raw.other
	*/
	StatisticsLatencyRawOther *int64

	/* StatisticsLatencyRawRead.

	   Filter by statistics.latency_raw.read
	*/
	StatisticsLatencyRawRead *int64

	/* StatisticsLatencyRawTotal.

	   Filter by statistics.latency_raw.total
	*/
	StatisticsLatencyRawTotal *int64

	/* StatisticsLatencyRawWrite.

	   Filter by statistics.latency_raw.write
	*/
	StatisticsLatencyRawWrite *int64

	/* StatisticsStatus.

	   Filter by statistics.status
	*/
	StatisticsStatus *string

	/* StatisticsThroughputRawRead.

	   Filter by statistics.throughput_raw.read
	*/
	StatisticsThroughputRawRead *int64

	/* StatisticsThroughputRawTotal.

	   Filter by statistics.throughput_raw.total
	*/
	StatisticsThroughputRawTotal *int64

	/* StatisticsThroughputRawWrite.

	   Filter by statistics.throughput_raw.write
	*/
	StatisticsThroughputRawWrite *int64

	/* StatisticsTimestamp.

	   Filter by statistics.timestamp
	*/
	StatisticsTimestamp *string

	/* StatusContainerState.

	   Filter by status.container_state
	*/
	StatusContainerState *string

	/* StatusMapped.

	   Filter by status.mapped
	*/
	StatusMapped *bool

	/* StatusReadOnly.

	   Filter by status.read_only
	*/
	StatusReadOnly *bool

	/* StatusState.

	   Filter by status.state
	*/
	StatusState *string

	/* SubsystemMapAnagrpid.

	   Filter by subsystem_map.anagrpid
	*/
	SubsystemMapAnagrpid *string

	/* SubsystemMapNsid.

	   Filter by subsystem_map.nsid
	*/
	SubsystemMapNsid *string

	/* SubsystemMapSubsystemComment.

	   Filter by subsystem_map.subsystem.comment
	*/
	SubsystemMapSubsystemComment *string

	/* SubsystemMapSubsystemHostsDhHmacChapGroupSize.

	   Filter by subsystem_map.subsystem.hosts.dh_hmac_chap.group_size
	*/
	SubsystemMapSubsystemHostsDhHmacChapGroupSize *string

	/* SubsystemMapSubsystemHostsDhHmacChapHashFunction.

	   Filter by subsystem_map.subsystem.hosts.dh_hmac_chap.hash_function
	*/
	SubsystemMapSubsystemHostsDhHmacChapHashFunction *string

	/* SubsystemMapSubsystemHostsDhHmacChapMode.

	   Filter by subsystem_map.subsystem.hosts.dh_hmac_chap.mode
	*/
	SubsystemMapSubsystemHostsDhHmacChapMode *string

	/* SubsystemMapSubsystemHostsNqn.

	   Filter by subsystem_map.subsystem.hosts.nqn
	*/
	SubsystemMapSubsystemHostsNqn *string

	/* SubsystemMapSubsystemHostsPriority.

	   Filter by subsystem_map.subsystem.hosts.priority
	*/
	SubsystemMapSubsystemHostsPriority *string

	/* SubsystemMapSubsystemHostsProximityLocalSvm.

	   Filter by subsystem_map.subsystem.hosts.proximity.local_svm
	*/
	SubsystemMapSubsystemHostsProximityLocalSvm *bool

	/* SubsystemMapSubsystemHostsProximityPeerSvmsName.

	   Filter by subsystem_map.subsystem.hosts.proximity.peer_svms.name
	*/
	SubsystemMapSubsystemHostsProximityPeerSvmsName *string

	/* SubsystemMapSubsystemHostsProximityPeerSvmsUUID.

	   Filter by subsystem_map.subsystem.hosts.proximity.peer_svms.uuid
	*/
	SubsystemMapSubsystemHostsProximityPeerSvmsUUID *string

	/* SubsystemMapSubsystemHostsTLSKeyType.

	   Filter by subsystem_map.subsystem.hosts.tls.key_type
	*/
	SubsystemMapSubsystemHostsTLSKeyType *string

	/* SubsystemMapSubsystemName.

	   Filter by subsystem_map.subsystem.name
	*/
	SubsystemMapSubsystemName *string

	/* SubsystemMapSubsystemOsType.

	   Filter by subsystem_map.subsystem.os_type
	*/
	SubsystemMapSubsystemOsType *string

	/* SubsystemMapSubsystemUUID.

	   Filter by subsystem_map.subsystem.uuid
	*/
	SubsystemMapSubsystemUUID *string

	/* SvmName.

	   Filter by svm.name
	*/
	SvmName *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SvmUUID *string

	/* UUID.

	   Filter by uuid
	*/
	UUID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the nvme namespace collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NvmeNamespaceCollectionGetParams) WithDefaults() *NvmeNamespaceCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the nvme namespace collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NvmeNamespaceCollectionGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := NvmeNamespaceCollectionGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithTimeout(timeout time.Duration) *NvmeNamespaceCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithContext(ctx context.Context) *NvmeNamespaceCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithHTTPClient(client *http.Client) *NvmeNamespaceCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAutoDelete adds the autoDelete to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithAutoDelete(autoDelete *bool) *NvmeNamespaceCollectionGetParams {
	o.SetAutoDelete(autoDelete)
	return o
}

// SetAutoDelete adds the autoDelete to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetAutoDelete(autoDelete *bool) {
	o.AutoDelete = autoDelete
}

// WithComment adds the comment to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithComment(comment *string) *NvmeNamespaceCollectionGetParams {
	o.SetComment(comment)
	return o
}

// SetComment adds the comment to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetComment(comment *string) {
	o.Comment = comment
}

// WithConsistencyGroupName adds the consistencyGroupName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithConsistencyGroupName(consistencyGroupName *string) *NvmeNamespaceCollectionGetParams {
	o.SetConsistencyGroupName(consistencyGroupName)
	return o
}

// SetConsistencyGroupName adds the consistencyGroupName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetConsistencyGroupName(consistencyGroupName *string) {
	o.ConsistencyGroupName = consistencyGroupName
}

// WithConsistencyGroupUUID adds the consistencyGroupUUID to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithConsistencyGroupUUID(consistencyGroupUUID *string) *NvmeNamespaceCollectionGetParams {
	o.SetConsistencyGroupUUID(consistencyGroupUUID)
	return o
}

// SetConsistencyGroupUUID adds the consistencyGroupUuid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetConsistencyGroupUUID(consistencyGroupUUID *string) {
	o.ConsistencyGroupUUID = consistencyGroupUUID
}

// WithCreateTime adds the createTime to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithCreateTime(createTime *string) *NvmeNamespaceCollectionGetParams {
	o.SetCreateTime(createTime)
	return o
}

// SetCreateTime adds the createTime to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetCreateTime(createTime *string) {
	o.CreateTime = createTime
}

// WithEnabled adds the enabled to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithEnabled(enabled *bool) *NvmeNamespaceCollectionGetParams {
	o.SetEnabled(enabled)
	return o
}

// SetEnabled adds the enabled to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetEnabled(enabled *bool) {
	o.Enabled = enabled
}

// WithEncryptionState adds the encryptionState to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithEncryptionState(encryptionState *string) *NvmeNamespaceCollectionGetParams {
	o.SetEncryptionState(encryptionState)
	return o
}

// SetEncryptionState adds the encryptionState to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetEncryptionState(encryptionState *string) {
	o.EncryptionState = encryptionState
}

// WithFields adds the fields to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithFields(fields []string) *NvmeNamespaceCollectionGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithLocationNamespace adds the locationNamespace to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithLocationNamespace(locationNamespace *string) *NvmeNamespaceCollectionGetParams {
	o.SetLocationNamespace(locationNamespace)
	return o
}

// SetLocationNamespace adds the locationNamespace to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetLocationNamespace(locationNamespace *string) {
	o.LocationNamespace = locationNamespace
}

// WithLocationNodeName adds the locationNodeName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithLocationNodeName(locationNodeName *string) *NvmeNamespaceCollectionGetParams {
	o.SetLocationNodeName(locationNodeName)
	return o
}

// SetLocationNodeName adds the locationNodeName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetLocationNodeName(locationNodeName *string) {
	o.LocationNodeName = locationNodeName
}

// WithLocationNodeUUID adds the locationNodeUUID to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithLocationNodeUUID(locationNodeUUID *string) *NvmeNamespaceCollectionGetParams {
	o.SetLocationNodeUUID(locationNodeUUID)
	return o
}

// SetLocationNodeUUID adds the locationNodeUuid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetLocationNodeUUID(locationNodeUUID *string) {
	o.LocationNodeUUID = locationNodeUUID
}

// WithLocationQtreeID adds the locationQtreeID to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithLocationQtreeID(locationQtreeID *int64) *NvmeNamespaceCollectionGetParams {
	o.SetLocationQtreeID(locationQtreeID)
	return o
}

// SetLocationQtreeID adds the locationQtreeId to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetLocationQtreeID(locationQtreeID *int64) {
	o.LocationQtreeID = locationQtreeID
}

// WithLocationQtreeName adds the locationQtreeName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithLocationQtreeName(locationQtreeName *string) *NvmeNamespaceCollectionGetParams {
	o.SetLocationQtreeName(locationQtreeName)
	return o
}

// SetLocationQtreeName adds the locationQtreeName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetLocationQtreeName(locationQtreeName *string) {
	o.LocationQtreeName = locationQtreeName
}

// WithLocationStorageAvailabilityZoneName adds the locationStorageAvailabilityZoneName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithLocationStorageAvailabilityZoneName(locationStorageAvailabilityZoneName *string) *NvmeNamespaceCollectionGetParams {
	o.SetLocationStorageAvailabilityZoneName(locationStorageAvailabilityZoneName)
	return o
}

// SetLocationStorageAvailabilityZoneName adds the locationStorageAvailabilityZoneName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetLocationStorageAvailabilityZoneName(locationStorageAvailabilityZoneName *string) {
	o.LocationStorageAvailabilityZoneName = locationStorageAvailabilityZoneName
}

// WithLocationStorageAvailabilityZoneUUID adds the locationStorageAvailabilityZoneUUID to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithLocationStorageAvailabilityZoneUUID(locationStorageAvailabilityZoneUUID *string) *NvmeNamespaceCollectionGetParams {
	o.SetLocationStorageAvailabilityZoneUUID(locationStorageAvailabilityZoneUUID)
	return o
}

// SetLocationStorageAvailabilityZoneUUID adds the locationStorageAvailabilityZoneUuid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetLocationStorageAvailabilityZoneUUID(locationStorageAvailabilityZoneUUID *string) {
	o.LocationStorageAvailabilityZoneUUID = locationStorageAvailabilityZoneUUID
}

// WithLocationVolumeName adds the locationVolumeName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithLocationVolumeName(locationVolumeName *string) *NvmeNamespaceCollectionGetParams {
	o.SetLocationVolumeName(locationVolumeName)
	return o
}

// SetLocationVolumeName adds the locationVolumeName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetLocationVolumeName(locationVolumeName *string) {
	o.LocationVolumeName = locationVolumeName
}

// WithLocationVolumeUUID adds the locationVolumeUUID to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithLocationVolumeUUID(locationVolumeUUID *string) *NvmeNamespaceCollectionGetParams {
	o.SetLocationVolumeUUID(locationVolumeUUID)
	return o
}

// SetLocationVolumeUUID adds the locationVolumeUuid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetLocationVolumeUUID(locationVolumeUUID *string) {
	o.LocationVolumeUUID = locationVolumeUUID
}

// WithMaxRecords adds the maxRecords to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMaxRecords(maxRecords *int64) *NvmeNamespaceCollectionGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithMetricDuration adds the metricDuration to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMetricDuration(metricDuration *string) *NvmeNamespaceCollectionGetParams {
	o.SetMetricDuration(metricDuration)
	return o
}

// SetMetricDuration adds the metricDuration to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMetricDuration(metricDuration *string) {
	o.MetricDuration = metricDuration
}

// WithMetricIopsOther adds the metricIopsOther to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMetricIopsOther(metricIopsOther *int64) *NvmeNamespaceCollectionGetParams {
	o.SetMetricIopsOther(metricIopsOther)
	return o
}

// SetMetricIopsOther adds the metricIopsOther to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMetricIopsOther(metricIopsOther *int64) {
	o.MetricIopsOther = metricIopsOther
}

// WithMetricIopsRead adds the metricIopsRead to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMetricIopsRead(metricIopsRead *int64) *NvmeNamespaceCollectionGetParams {
	o.SetMetricIopsRead(metricIopsRead)
	return o
}

// SetMetricIopsRead adds the metricIopsRead to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMetricIopsRead(metricIopsRead *int64) {
	o.MetricIopsRead = metricIopsRead
}

// WithMetricIopsTotal adds the metricIopsTotal to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMetricIopsTotal(metricIopsTotal *int64) *NvmeNamespaceCollectionGetParams {
	o.SetMetricIopsTotal(metricIopsTotal)
	return o
}

// SetMetricIopsTotal adds the metricIopsTotal to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMetricIopsTotal(metricIopsTotal *int64) {
	o.MetricIopsTotal = metricIopsTotal
}

// WithMetricIopsWrite adds the metricIopsWrite to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMetricIopsWrite(metricIopsWrite *int64) *NvmeNamespaceCollectionGetParams {
	o.SetMetricIopsWrite(metricIopsWrite)
	return o
}

// SetMetricIopsWrite adds the metricIopsWrite to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMetricIopsWrite(metricIopsWrite *int64) {
	o.MetricIopsWrite = metricIopsWrite
}

// WithMetricLatencyOther adds the metricLatencyOther to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMetricLatencyOther(metricLatencyOther *int64) *NvmeNamespaceCollectionGetParams {
	o.SetMetricLatencyOther(metricLatencyOther)
	return o
}

// SetMetricLatencyOther adds the metricLatencyOther to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMetricLatencyOther(metricLatencyOther *int64) {
	o.MetricLatencyOther = metricLatencyOther
}

// WithMetricLatencyRead adds the metricLatencyRead to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMetricLatencyRead(metricLatencyRead *int64) *NvmeNamespaceCollectionGetParams {
	o.SetMetricLatencyRead(metricLatencyRead)
	return o
}

// SetMetricLatencyRead adds the metricLatencyRead to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMetricLatencyRead(metricLatencyRead *int64) {
	o.MetricLatencyRead = metricLatencyRead
}

// WithMetricLatencyTotal adds the metricLatencyTotal to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMetricLatencyTotal(metricLatencyTotal *int64) *NvmeNamespaceCollectionGetParams {
	o.SetMetricLatencyTotal(metricLatencyTotal)
	return o
}

// SetMetricLatencyTotal adds the metricLatencyTotal to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMetricLatencyTotal(metricLatencyTotal *int64) {
	o.MetricLatencyTotal = metricLatencyTotal
}

// WithMetricLatencyWrite adds the metricLatencyWrite to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMetricLatencyWrite(metricLatencyWrite *int64) *NvmeNamespaceCollectionGetParams {
	o.SetMetricLatencyWrite(metricLatencyWrite)
	return o
}

// SetMetricLatencyWrite adds the metricLatencyWrite to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMetricLatencyWrite(metricLatencyWrite *int64) {
	o.MetricLatencyWrite = metricLatencyWrite
}

// WithMetricStatus adds the metricStatus to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMetricStatus(metricStatus *string) *NvmeNamespaceCollectionGetParams {
	o.SetMetricStatus(metricStatus)
	return o
}

// SetMetricStatus adds the metricStatus to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMetricStatus(metricStatus *string) {
	o.MetricStatus = metricStatus
}

// WithMetricThroughputRead adds the metricThroughputRead to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMetricThroughputRead(metricThroughputRead *int64) *NvmeNamespaceCollectionGetParams {
	o.SetMetricThroughputRead(metricThroughputRead)
	return o
}

// SetMetricThroughputRead adds the metricThroughputRead to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMetricThroughputRead(metricThroughputRead *int64) {
	o.MetricThroughputRead = metricThroughputRead
}

// WithMetricThroughputTotal adds the metricThroughputTotal to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMetricThroughputTotal(metricThroughputTotal *int64) *NvmeNamespaceCollectionGetParams {
	o.SetMetricThroughputTotal(metricThroughputTotal)
	return o
}

// SetMetricThroughputTotal adds the metricThroughputTotal to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMetricThroughputTotal(metricThroughputTotal *int64) {
	o.MetricThroughputTotal = metricThroughputTotal
}

// WithMetricThroughputWrite adds the metricThroughputWrite to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMetricThroughputWrite(metricThroughputWrite *int64) *NvmeNamespaceCollectionGetParams {
	o.SetMetricThroughputWrite(metricThroughputWrite)
	return o
}

// SetMetricThroughputWrite adds the metricThroughputWrite to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMetricThroughputWrite(metricThroughputWrite *int64) {
	o.MetricThroughputWrite = metricThroughputWrite
}

// WithMetricTimestamp adds the metricTimestamp to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMetricTimestamp(metricTimestamp *string) *NvmeNamespaceCollectionGetParams {
	o.SetMetricTimestamp(metricTimestamp)
	return o
}

// SetMetricTimestamp adds the metricTimestamp to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMetricTimestamp(metricTimestamp *string) {
	o.MetricTimestamp = metricTimestamp
}

// WithName adds the name to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithName(name *string) *NvmeNamespaceCollectionGetParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetName(name *string) {
	o.Name = name
}

// WithOrderBy adds the orderBy to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithOrderBy(orderBy []string) *NvmeNamespaceCollectionGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithOsType adds the osType to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithOsType(osType *string) *NvmeNamespaceCollectionGetParams {
	o.SetOsType(osType)
	return o
}

// SetOsType adds the osType to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetOsType(osType *string) {
	o.OsType = osType
}

// WithQosPolicyName adds the qosPolicyName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithQosPolicyName(qosPolicyName *string) *NvmeNamespaceCollectionGetParams {
	o.SetQosPolicyName(qosPolicyName)
	return o
}

// SetQosPolicyName adds the qosPolicyName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetQosPolicyName(qosPolicyName *string) {
	o.QosPolicyName = qosPolicyName
}

// WithQosPolicyUUID adds the qosPolicyUUID to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithQosPolicyUUID(qosPolicyUUID *string) *NvmeNamespaceCollectionGetParams {
	o.SetQosPolicyUUID(qosPolicyUUID)
	return o
}

// SetQosPolicyUUID adds the qosPolicyUuid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetQosPolicyUUID(qosPolicyUUID *string) {
	o.QosPolicyUUID = qosPolicyUUID
}

// WithReturnRecords adds the returnRecords to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithReturnRecords(returnRecords *bool) *NvmeNamespaceCollectionGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithReturnTimeout(returnTimeout *int64) *NvmeNamespaceCollectionGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithSpaceBlockSize adds the spaceBlockSize to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSpaceBlockSize(spaceBlockSize *int64) *NvmeNamespaceCollectionGetParams {
	o.SetSpaceBlockSize(spaceBlockSize)
	return o
}

// SetSpaceBlockSize adds the spaceBlockSize to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSpaceBlockSize(spaceBlockSize *int64) {
	o.SpaceBlockSize = spaceBlockSize
}

// WithSpaceEfficiencyRatio adds the spaceEfficiencyRatio to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSpaceEfficiencyRatio(spaceEfficiencyRatio *float64) *NvmeNamespaceCollectionGetParams {
	o.SetSpaceEfficiencyRatio(spaceEfficiencyRatio)
	return o
}

// SetSpaceEfficiencyRatio adds the spaceEfficiencyRatio to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSpaceEfficiencyRatio(spaceEfficiencyRatio *float64) {
	o.SpaceEfficiencyRatio = spaceEfficiencyRatio
}

// WithSpaceGuaranteeRequested adds the spaceGuaranteeRequested to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSpaceGuaranteeRequested(spaceGuaranteeRequested *bool) *NvmeNamespaceCollectionGetParams {
	o.SetSpaceGuaranteeRequested(spaceGuaranteeRequested)
	return o
}

// SetSpaceGuaranteeRequested adds the spaceGuaranteeRequested to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSpaceGuaranteeRequested(spaceGuaranteeRequested *bool) {
	o.SpaceGuaranteeRequested = spaceGuaranteeRequested
}

// WithSpaceGuaranteeReserved adds the spaceGuaranteeReserved to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSpaceGuaranteeReserved(spaceGuaranteeReserved *bool) *NvmeNamespaceCollectionGetParams {
	o.SetSpaceGuaranteeReserved(spaceGuaranteeReserved)
	return o
}

// SetSpaceGuaranteeReserved adds the spaceGuaranteeReserved to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSpaceGuaranteeReserved(spaceGuaranteeReserved *bool) {
	o.SpaceGuaranteeReserved = spaceGuaranteeReserved
}

// WithSpacePhysicalUsed adds the spacePhysicalUsed to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSpacePhysicalUsed(spacePhysicalUsed *int64) *NvmeNamespaceCollectionGetParams {
	o.SetSpacePhysicalUsed(spacePhysicalUsed)
	return o
}

// SetSpacePhysicalUsed adds the spacePhysicalUsed to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSpacePhysicalUsed(spacePhysicalUsed *int64) {
	o.SpacePhysicalUsed = spacePhysicalUsed
}

// WithSpacePhysicalUsedBySnapshots adds the spacePhysicalUsedBySnapshots to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSpacePhysicalUsedBySnapshots(spacePhysicalUsedBySnapshots *int64) *NvmeNamespaceCollectionGetParams {
	o.SetSpacePhysicalUsedBySnapshots(spacePhysicalUsedBySnapshots)
	return o
}

// SetSpacePhysicalUsedBySnapshots adds the spacePhysicalUsedBySnapshots to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSpacePhysicalUsedBySnapshots(spacePhysicalUsedBySnapshots *int64) {
	o.SpacePhysicalUsedBySnapshots = spacePhysicalUsedBySnapshots
}

// WithSpaceSize adds the spaceSize to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSpaceSize(spaceSize *int64) *NvmeNamespaceCollectionGetParams {
	o.SetSpaceSize(spaceSize)
	return o
}

// SetSpaceSize adds the spaceSize to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSpaceSize(spaceSize *int64) {
	o.SpaceSize = spaceSize
}

// WithSpaceSnapshotAutodeleteEnabled adds the spaceSnapshotAutodeleteEnabled to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSpaceSnapshotAutodeleteEnabled(spaceSnapshotAutodeleteEnabled *bool) *NvmeNamespaceCollectionGetParams {
	o.SetSpaceSnapshotAutodeleteEnabled(spaceSnapshotAutodeleteEnabled)
	return o
}

// SetSpaceSnapshotAutodeleteEnabled adds the spaceSnapshotAutodeleteEnabled to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSpaceSnapshotAutodeleteEnabled(spaceSnapshotAutodeleteEnabled *bool) {
	o.SpaceSnapshotAutodeleteEnabled = spaceSnapshotAutodeleteEnabled
}

// WithSpaceSnapshotReserveAvailable adds the spaceSnapshotReserveAvailable to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSpaceSnapshotReserveAvailable(spaceSnapshotReserveAvailable *int64) *NvmeNamespaceCollectionGetParams {
	o.SetSpaceSnapshotReserveAvailable(spaceSnapshotReserveAvailable)
	return o
}

// SetSpaceSnapshotReserveAvailable adds the spaceSnapshotReserveAvailable to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSpaceSnapshotReserveAvailable(spaceSnapshotReserveAvailable *int64) {
	o.SpaceSnapshotReserveAvailable = spaceSnapshotReserveAvailable
}

// WithSpaceSnapshotReservePercent adds the spaceSnapshotReservePercent to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSpaceSnapshotReservePercent(spaceSnapshotReservePercent *int64) *NvmeNamespaceCollectionGetParams {
	o.SetSpaceSnapshotReservePercent(spaceSnapshotReservePercent)
	return o
}

// SetSpaceSnapshotReservePercent adds the spaceSnapshotReservePercent to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSpaceSnapshotReservePercent(spaceSnapshotReservePercent *int64) {
	o.SpaceSnapshotReservePercent = spaceSnapshotReservePercent
}

// WithSpaceSnapshotReserveSize adds the spaceSnapshotReserveSize to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSpaceSnapshotReserveSize(spaceSnapshotReserveSize *int64) *NvmeNamespaceCollectionGetParams {
	o.SetSpaceSnapshotReserveSize(spaceSnapshotReserveSize)
	return o
}

// SetSpaceSnapshotReserveSize adds the spaceSnapshotReserveSize to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSpaceSnapshotReserveSize(spaceSnapshotReserveSize *int64) {
	o.SpaceSnapshotReserveSize = spaceSnapshotReserveSize
}

// WithSpaceSnapshotSpaceUsedPercent adds the spaceSnapshotSpaceUsedPercent to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSpaceSnapshotSpaceUsedPercent(spaceSnapshotSpaceUsedPercent *int64) *NvmeNamespaceCollectionGetParams {
	o.SetSpaceSnapshotSpaceUsedPercent(spaceSnapshotSpaceUsedPercent)
	return o
}

// SetSpaceSnapshotSpaceUsedPercent adds the spaceSnapshotSpaceUsedPercent to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSpaceSnapshotSpaceUsedPercent(spaceSnapshotSpaceUsedPercent *int64) {
	o.SpaceSnapshotSpaceUsedPercent = spaceSnapshotSpaceUsedPercent
}

// WithSpaceSnapshotUsed adds the spaceSnapshotUsed to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSpaceSnapshotUsed(spaceSnapshotUsed *int64) *NvmeNamespaceCollectionGetParams {
	o.SetSpaceSnapshotUsed(spaceSnapshotUsed)
	return o
}

// SetSpaceSnapshotUsed adds the spaceSnapshotUsed to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSpaceSnapshotUsed(spaceSnapshotUsed *int64) {
	o.SpaceSnapshotUsed = spaceSnapshotUsed
}

// WithSpaceUsed adds the spaceUsed to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSpaceUsed(spaceUsed *int64) *NvmeNamespaceCollectionGetParams {
	o.SetSpaceUsed(spaceUsed)
	return o
}

// SetSpaceUsed adds the spaceUsed to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSpaceUsed(spaceUsed *int64) {
	o.SpaceUsed = spaceUsed
}

// WithStatisticsIopsRawOther adds the statisticsIopsRawOther to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatisticsIopsRawOther(statisticsIopsRawOther *int64) *NvmeNamespaceCollectionGetParams {
	o.SetStatisticsIopsRawOther(statisticsIopsRawOther)
	return o
}

// SetStatisticsIopsRawOther adds the statisticsIopsRawOther to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatisticsIopsRawOther(statisticsIopsRawOther *int64) {
	o.StatisticsIopsRawOther = statisticsIopsRawOther
}

// WithStatisticsIopsRawRead adds the statisticsIopsRawRead to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatisticsIopsRawRead(statisticsIopsRawRead *int64) *NvmeNamespaceCollectionGetParams {
	o.SetStatisticsIopsRawRead(statisticsIopsRawRead)
	return o
}

// SetStatisticsIopsRawRead adds the statisticsIopsRawRead to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatisticsIopsRawRead(statisticsIopsRawRead *int64) {
	o.StatisticsIopsRawRead = statisticsIopsRawRead
}

// WithStatisticsIopsRawTotal adds the statisticsIopsRawTotal to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatisticsIopsRawTotal(statisticsIopsRawTotal *int64) *NvmeNamespaceCollectionGetParams {
	o.SetStatisticsIopsRawTotal(statisticsIopsRawTotal)
	return o
}

// SetStatisticsIopsRawTotal adds the statisticsIopsRawTotal to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatisticsIopsRawTotal(statisticsIopsRawTotal *int64) {
	o.StatisticsIopsRawTotal = statisticsIopsRawTotal
}

// WithStatisticsIopsRawWrite adds the statisticsIopsRawWrite to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatisticsIopsRawWrite(statisticsIopsRawWrite *int64) *NvmeNamespaceCollectionGetParams {
	o.SetStatisticsIopsRawWrite(statisticsIopsRawWrite)
	return o
}

// SetStatisticsIopsRawWrite adds the statisticsIopsRawWrite to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatisticsIopsRawWrite(statisticsIopsRawWrite *int64) {
	o.StatisticsIopsRawWrite = statisticsIopsRawWrite
}

// WithStatisticsLatencyRawOther adds the statisticsLatencyRawOther to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatisticsLatencyRawOther(statisticsLatencyRawOther *int64) *NvmeNamespaceCollectionGetParams {
	o.SetStatisticsLatencyRawOther(statisticsLatencyRawOther)
	return o
}

// SetStatisticsLatencyRawOther adds the statisticsLatencyRawOther to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatisticsLatencyRawOther(statisticsLatencyRawOther *int64) {
	o.StatisticsLatencyRawOther = statisticsLatencyRawOther
}

// WithStatisticsLatencyRawRead adds the statisticsLatencyRawRead to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatisticsLatencyRawRead(statisticsLatencyRawRead *int64) *NvmeNamespaceCollectionGetParams {
	o.SetStatisticsLatencyRawRead(statisticsLatencyRawRead)
	return o
}

// SetStatisticsLatencyRawRead adds the statisticsLatencyRawRead to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatisticsLatencyRawRead(statisticsLatencyRawRead *int64) {
	o.StatisticsLatencyRawRead = statisticsLatencyRawRead
}

// WithStatisticsLatencyRawTotal adds the statisticsLatencyRawTotal to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatisticsLatencyRawTotal(statisticsLatencyRawTotal *int64) *NvmeNamespaceCollectionGetParams {
	o.SetStatisticsLatencyRawTotal(statisticsLatencyRawTotal)
	return o
}

// SetStatisticsLatencyRawTotal adds the statisticsLatencyRawTotal to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatisticsLatencyRawTotal(statisticsLatencyRawTotal *int64) {
	o.StatisticsLatencyRawTotal = statisticsLatencyRawTotal
}

// WithStatisticsLatencyRawWrite adds the statisticsLatencyRawWrite to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatisticsLatencyRawWrite(statisticsLatencyRawWrite *int64) *NvmeNamespaceCollectionGetParams {
	o.SetStatisticsLatencyRawWrite(statisticsLatencyRawWrite)
	return o
}

// SetStatisticsLatencyRawWrite adds the statisticsLatencyRawWrite to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatisticsLatencyRawWrite(statisticsLatencyRawWrite *int64) {
	o.StatisticsLatencyRawWrite = statisticsLatencyRawWrite
}

// WithStatisticsStatus adds the statisticsStatus to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatisticsStatus(statisticsStatus *string) *NvmeNamespaceCollectionGetParams {
	o.SetStatisticsStatus(statisticsStatus)
	return o
}

// SetStatisticsStatus adds the statisticsStatus to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatisticsStatus(statisticsStatus *string) {
	o.StatisticsStatus = statisticsStatus
}

// WithStatisticsThroughputRawRead adds the statisticsThroughputRawRead to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatisticsThroughputRawRead(statisticsThroughputRawRead *int64) *NvmeNamespaceCollectionGetParams {
	o.SetStatisticsThroughputRawRead(statisticsThroughputRawRead)
	return o
}

// SetStatisticsThroughputRawRead adds the statisticsThroughputRawRead to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatisticsThroughputRawRead(statisticsThroughputRawRead *int64) {
	o.StatisticsThroughputRawRead = statisticsThroughputRawRead
}

// WithStatisticsThroughputRawTotal adds the statisticsThroughputRawTotal to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatisticsThroughputRawTotal(statisticsThroughputRawTotal *int64) *NvmeNamespaceCollectionGetParams {
	o.SetStatisticsThroughputRawTotal(statisticsThroughputRawTotal)
	return o
}

// SetStatisticsThroughputRawTotal adds the statisticsThroughputRawTotal to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatisticsThroughputRawTotal(statisticsThroughputRawTotal *int64) {
	o.StatisticsThroughputRawTotal = statisticsThroughputRawTotal
}

// WithStatisticsThroughputRawWrite adds the statisticsThroughputRawWrite to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatisticsThroughputRawWrite(statisticsThroughputRawWrite *int64) *NvmeNamespaceCollectionGetParams {
	o.SetStatisticsThroughputRawWrite(statisticsThroughputRawWrite)
	return o
}

// SetStatisticsThroughputRawWrite adds the statisticsThroughputRawWrite to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatisticsThroughputRawWrite(statisticsThroughputRawWrite *int64) {
	o.StatisticsThroughputRawWrite = statisticsThroughputRawWrite
}

// WithStatisticsTimestamp adds the statisticsTimestamp to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatisticsTimestamp(statisticsTimestamp *string) *NvmeNamespaceCollectionGetParams {
	o.SetStatisticsTimestamp(statisticsTimestamp)
	return o
}

// SetStatisticsTimestamp adds the statisticsTimestamp to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatisticsTimestamp(statisticsTimestamp *string) {
	o.StatisticsTimestamp = statisticsTimestamp
}

// WithStatusContainerState adds the statusContainerState to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatusContainerState(statusContainerState *string) *NvmeNamespaceCollectionGetParams {
	o.SetStatusContainerState(statusContainerState)
	return o
}

// SetStatusContainerState adds the statusContainerState to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatusContainerState(statusContainerState *string) {
	o.StatusContainerState = statusContainerState
}

// WithStatusMapped adds the statusMapped to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatusMapped(statusMapped *bool) *NvmeNamespaceCollectionGetParams {
	o.SetStatusMapped(statusMapped)
	return o
}

// SetStatusMapped adds the statusMapped to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatusMapped(statusMapped *bool) {
	o.StatusMapped = statusMapped
}

// WithStatusReadOnly adds the statusReadOnly to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatusReadOnly(statusReadOnly *bool) *NvmeNamespaceCollectionGetParams {
	o.SetStatusReadOnly(statusReadOnly)
	return o
}

// SetStatusReadOnly adds the statusReadOnly to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatusReadOnly(statusReadOnly *bool) {
	o.StatusReadOnly = statusReadOnly
}

// WithStatusState adds the statusState to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatusState(statusState *string) *NvmeNamespaceCollectionGetParams {
	o.SetStatusState(statusState)
	return o
}

// SetStatusState adds the statusState to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatusState(statusState *string) {
	o.StatusState = statusState
}

// WithSubsystemMapAnagrpid adds the subsystemMapAnagrpid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSubsystemMapAnagrpid(subsystemMapAnagrpid *string) *NvmeNamespaceCollectionGetParams {
	o.SetSubsystemMapAnagrpid(subsystemMapAnagrpid)
	return o
}

// SetSubsystemMapAnagrpid adds the subsystemMapAnagrpid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSubsystemMapAnagrpid(subsystemMapAnagrpid *string) {
	o.SubsystemMapAnagrpid = subsystemMapAnagrpid
}

// WithSubsystemMapNsid adds the subsystemMapNsid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSubsystemMapNsid(subsystemMapNsid *string) *NvmeNamespaceCollectionGetParams {
	o.SetSubsystemMapNsid(subsystemMapNsid)
	return o
}

// SetSubsystemMapNsid adds the subsystemMapNsid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSubsystemMapNsid(subsystemMapNsid *string) {
	o.SubsystemMapNsid = subsystemMapNsid
}

// WithSubsystemMapSubsystemComment adds the subsystemMapSubsystemComment to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSubsystemMapSubsystemComment(subsystemMapSubsystemComment *string) *NvmeNamespaceCollectionGetParams {
	o.SetSubsystemMapSubsystemComment(subsystemMapSubsystemComment)
	return o
}

// SetSubsystemMapSubsystemComment adds the subsystemMapSubsystemComment to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSubsystemMapSubsystemComment(subsystemMapSubsystemComment *string) {
	o.SubsystemMapSubsystemComment = subsystemMapSubsystemComment
}

// WithSubsystemMapSubsystemHostsDhHmacChapGroupSize adds the subsystemMapSubsystemHostsDhHmacChapGroupSize to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSubsystemMapSubsystemHostsDhHmacChapGroupSize(subsystemMapSubsystemHostsDhHmacChapGroupSize *string) *NvmeNamespaceCollectionGetParams {
	o.SetSubsystemMapSubsystemHostsDhHmacChapGroupSize(subsystemMapSubsystemHostsDhHmacChapGroupSize)
	return o
}

// SetSubsystemMapSubsystemHostsDhHmacChapGroupSize adds the subsystemMapSubsystemHostsDhHmacChapGroupSize to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSubsystemMapSubsystemHostsDhHmacChapGroupSize(subsystemMapSubsystemHostsDhHmacChapGroupSize *string) {
	o.SubsystemMapSubsystemHostsDhHmacChapGroupSize = subsystemMapSubsystemHostsDhHmacChapGroupSize
}

// WithSubsystemMapSubsystemHostsDhHmacChapHashFunction adds the subsystemMapSubsystemHostsDhHmacChapHashFunction to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSubsystemMapSubsystemHostsDhHmacChapHashFunction(subsystemMapSubsystemHostsDhHmacChapHashFunction *string) *NvmeNamespaceCollectionGetParams {
	o.SetSubsystemMapSubsystemHostsDhHmacChapHashFunction(subsystemMapSubsystemHostsDhHmacChapHashFunction)
	return o
}

// SetSubsystemMapSubsystemHostsDhHmacChapHashFunction adds the subsystemMapSubsystemHostsDhHmacChapHashFunction to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSubsystemMapSubsystemHostsDhHmacChapHashFunction(subsystemMapSubsystemHostsDhHmacChapHashFunction *string) {
	o.SubsystemMapSubsystemHostsDhHmacChapHashFunction = subsystemMapSubsystemHostsDhHmacChapHashFunction
}

// WithSubsystemMapSubsystemHostsDhHmacChapMode adds the subsystemMapSubsystemHostsDhHmacChapMode to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSubsystemMapSubsystemHostsDhHmacChapMode(subsystemMapSubsystemHostsDhHmacChapMode *string) *NvmeNamespaceCollectionGetParams {
	o.SetSubsystemMapSubsystemHostsDhHmacChapMode(subsystemMapSubsystemHostsDhHmacChapMode)
	return o
}

// SetSubsystemMapSubsystemHostsDhHmacChapMode adds the subsystemMapSubsystemHostsDhHmacChapMode to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSubsystemMapSubsystemHostsDhHmacChapMode(subsystemMapSubsystemHostsDhHmacChapMode *string) {
	o.SubsystemMapSubsystemHostsDhHmacChapMode = subsystemMapSubsystemHostsDhHmacChapMode
}

// WithSubsystemMapSubsystemHostsNqn adds the subsystemMapSubsystemHostsNqn to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSubsystemMapSubsystemHostsNqn(subsystemMapSubsystemHostsNqn *string) *NvmeNamespaceCollectionGetParams {
	o.SetSubsystemMapSubsystemHostsNqn(subsystemMapSubsystemHostsNqn)
	return o
}

// SetSubsystemMapSubsystemHostsNqn adds the subsystemMapSubsystemHostsNqn to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSubsystemMapSubsystemHostsNqn(subsystemMapSubsystemHostsNqn *string) {
	o.SubsystemMapSubsystemHostsNqn = subsystemMapSubsystemHostsNqn
}

// WithSubsystemMapSubsystemHostsPriority adds the subsystemMapSubsystemHostsPriority to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSubsystemMapSubsystemHostsPriority(subsystemMapSubsystemHostsPriority *string) *NvmeNamespaceCollectionGetParams {
	o.SetSubsystemMapSubsystemHostsPriority(subsystemMapSubsystemHostsPriority)
	return o
}

// SetSubsystemMapSubsystemHostsPriority adds the subsystemMapSubsystemHostsPriority to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSubsystemMapSubsystemHostsPriority(subsystemMapSubsystemHostsPriority *string) {
	o.SubsystemMapSubsystemHostsPriority = subsystemMapSubsystemHostsPriority
}

// WithSubsystemMapSubsystemHostsProximityLocalSvm adds the subsystemMapSubsystemHostsProximityLocalSvm to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSubsystemMapSubsystemHostsProximityLocalSvm(subsystemMapSubsystemHostsProximityLocalSvm *bool) *NvmeNamespaceCollectionGetParams {
	o.SetSubsystemMapSubsystemHostsProximityLocalSvm(subsystemMapSubsystemHostsProximityLocalSvm)
	return o
}

// SetSubsystemMapSubsystemHostsProximityLocalSvm adds the subsystemMapSubsystemHostsProximityLocalSvm to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSubsystemMapSubsystemHostsProximityLocalSvm(subsystemMapSubsystemHostsProximityLocalSvm *bool) {
	o.SubsystemMapSubsystemHostsProximityLocalSvm = subsystemMapSubsystemHostsProximityLocalSvm
}

// WithSubsystemMapSubsystemHostsProximityPeerSvmsName adds the subsystemMapSubsystemHostsProximityPeerSvmsName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSubsystemMapSubsystemHostsProximityPeerSvmsName(subsystemMapSubsystemHostsProximityPeerSvmsName *string) *NvmeNamespaceCollectionGetParams {
	o.SetSubsystemMapSubsystemHostsProximityPeerSvmsName(subsystemMapSubsystemHostsProximityPeerSvmsName)
	return o
}

// SetSubsystemMapSubsystemHostsProximityPeerSvmsName adds the subsystemMapSubsystemHostsProximityPeerSvmsName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSubsystemMapSubsystemHostsProximityPeerSvmsName(subsystemMapSubsystemHostsProximityPeerSvmsName *string) {
	o.SubsystemMapSubsystemHostsProximityPeerSvmsName = subsystemMapSubsystemHostsProximityPeerSvmsName
}

// WithSubsystemMapSubsystemHostsProximityPeerSvmsUUID adds the subsystemMapSubsystemHostsProximityPeerSvmsUUID to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSubsystemMapSubsystemHostsProximityPeerSvmsUUID(subsystemMapSubsystemHostsProximityPeerSvmsUUID *string) *NvmeNamespaceCollectionGetParams {
	o.SetSubsystemMapSubsystemHostsProximityPeerSvmsUUID(subsystemMapSubsystemHostsProximityPeerSvmsUUID)
	return o
}

// SetSubsystemMapSubsystemHostsProximityPeerSvmsUUID adds the subsystemMapSubsystemHostsProximityPeerSvmsUuid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSubsystemMapSubsystemHostsProximityPeerSvmsUUID(subsystemMapSubsystemHostsProximityPeerSvmsUUID *string) {
	o.SubsystemMapSubsystemHostsProximityPeerSvmsUUID = subsystemMapSubsystemHostsProximityPeerSvmsUUID
}

// WithSubsystemMapSubsystemHostsTLSKeyType adds the subsystemMapSubsystemHostsTLSKeyType to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSubsystemMapSubsystemHostsTLSKeyType(subsystemMapSubsystemHostsTLSKeyType *string) *NvmeNamespaceCollectionGetParams {
	o.SetSubsystemMapSubsystemHostsTLSKeyType(subsystemMapSubsystemHostsTLSKeyType)
	return o
}

// SetSubsystemMapSubsystemHostsTLSKeyType adds the subsystemMapSubsystemHostsTlsKeyType to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSubsystemMapSubsystemHostsTLSKeyType(subsystemMapSubsystemHostsTLSKeyType *string) {
	o.SubsystemMapSubsystemHostsTLSKeyType = subsystemMapSubsystemHostsTLSKeyType
}

// WithSubsystemMapSubsystemName adds the subsystemMapSubsystemName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSubsystemMapSubsystemName(subsystemMapSubsystemName *string) *NvmeNamespaceCollectionGetParams {
	o.SetSubsystemMapSubsystemName(subsystemMapSubsystemName)
	return o
}

// SetSubsystemMapSubsystemName adds the subsystemMapSubsystemName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSubsystemMapSubsystemName(subsystemMapSubsystemName *string) {
	o.SubsystemMapSubsystemName = subsystemMapSubsystemName
}

// WithSubsystemMapSubsystemOsType adds the subsystemMapSubsystemOsType to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSubsystemMapSubsystemOsType(subsystemMapSubsystemOsType *string) *NvmeNamespaceCollectionGetParams {
	o.SetSubsystemMapSubsystemOsType(subsystemMapSubsystemOsType)
	return o
}

// SetSubsystemMapSubsystemOsType adds the subsystemMapSubsystemOsType to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSubsystemMapSubsystemOsType(subsystemMapSubsystemOsType *string) {
	o.SubsystemMapSubsystemOsType = subsystemMapSubsystemOsType
}

// WithSubsystemMapSubsystemUUID adds the subsystemMapSubsystemUUID to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSubsystemMapSubsystemUUID(subsystemMapSubsystemUUID *string) *NvmeNamespaceCollectionGetParams {
	o.SetSubsystemMapSubsystemUUID(subsystemMapSubsystemUUID)
	return o
}

// SetSubsystemMapSubsystemUUID adds the subsystemMapSubsystemUuid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSubsystemMapSubsystemUUID(subsystemMapSubsystemUUID *string) {
	o.SubsystemMapSubsystemUUID = subsystemMapSubsystemUUID
}

// WithSvmName adds the svmName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSvmName(svmName *string) *NvmeNamespaceCollectionGetParams {
	o.SetSvmName(svmName)
	return o
}

// SetSvmName adds the svmName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSvmName(svmName *string) {
	o.SvmName = svmName
}

// WithSvmUUID adds the svmUUID to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSvmUUID(svmUUID *string) *NvmeNamespaceCollectionGetParams {
	o.SetSvmUUID(svmUUID)
	return o
}

// SetSvmUUID adds the svmUuid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSvmUUID(svmUUID *string) {
	o.SvmUUID = svmUUID
}

// WithUUID adds the uuid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithUUID(uuid *string) *NvmeNamespaceCollectionGetParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetUUID(uuid *string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *NvmeNamespaceCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AutoDelete != nil {

		// query param auto_delete
		var qrAutoDelete bool

		if o.AutoDelete != nil {
			qrAutoDelete = *o.AutoDelete
		}
		qAutoDelete := swag.FormatBool(qrAutoDelete)
		if qAutoDelete != "" {

			if err := r.SetQueryParam("auto_delete", qAutoDelete); err != nil {
				return err
			}
		}
	}

	if o.Comment != nil {

		// query param comment
		var qrComment string

		if o.Comment != nil {
			qrComment = *o.Comment
		}
		qComment := qrComment
		if qComment != "" {

			if err := r.SetQueryParam("comment", qComment); err != nil {
				return err
			}
		}
	}

	if o.ConsistencyGroupName != nil {

		// query param consistency_group.name
		var qrConsistencyGroupName string

		if o.ConsistencyGroupName != nil {
			qrConsistencyGroupName = *o.ConsistencyGroupName
		}
		qConsistencyGroupName := qrConsistencyGroupName
		if qConsistencyGroupName != "" {

			if err := r.SetQueryParam("consistency_group.name", qConsistencyGroupName); err != nil {
				return err
			}
		}
	}

	if o.ConsistencyGroupUUID != nil {

		// query param consistency_group.uuid
		var qrConsistencyGroupUUID string

		if o.ConsistencyGroupUUID != nil {
			qrConsistencyGroupUUID = *o.ConsistencyGroupUUID
		}
		qConsistencyGroupUUID := qrConsistencyGroupUUID
		if qConsistencyGroupUUID != "" {

			if err := r.SetQueryParam("consistency_group.uuid", qConsistencyGroupUUID); err != nil {
				return err
			}
		}
	}

	if o.CreateTime != nil {

		// query param create_time
		var qrCreateTime string

		if o.CreateTime != nil {
			qrCreateTime = *o.CreateTime
		}
		qCreateTime := qrCreateTime
		if qCreateTime != "" {

			if err := r.SetQueryParam("create_time", qCreateTime); err != nil {
				return err
			}
		}
	}

	if o.Enabled != nil {

		// query param enabled
		var qrEnabled bool

		if o.Enabled != nil {
			qrEnabled = *o.Enabled
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {

			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}
	}

	if o.EncryptionState != nil {

		// query param encryption.state
		var qrEncryptionState string

		if o.EncryptionState != nil {
			qrEncryptionState = *o.EncryptionState
		}
		qEncryptionState := qrEncryptionState
		if qEncryptionState != "" {

			if err := r.SetQueryParam("encryption.state", qEncryptionState); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.LocationNamespace != nil {

		// query param location.namespace
		var qrLocationNamespace string

		if o.LocationNamespace != nil {
			qrLocationNamespace = *o.LocationNamespace
		}
		qLocationNamespace := qrLocationNamespace
		if qLocationNamespace != "" {

			if err := r.SetQueryParam("location.namespace", qLocationNamespace); err != nil {
				return err
			}
		}
	}

	if o.LocationNodeName != nil {

		// query param location.node.name
		var qrLocationNodeName string

		if o.LocationNodeName != nil {
			qrLocationNodeName = *o.LocationNodeName
		}
		qLocationNodeName := qrLocationNodeName
		if qLocationNodeName != "" {

			if err := r.SetQueryParam("location.node.name", qLocationNodeName); err != nil {
				return err
			}
		}
	}

	if o.LocationNodeUUID != nil {

		// query param location.node.uuid
		var qrLocationNodeUUID string

		if o.LocationNodeUUID != nil {
			qrLocationNodeUUID = *o.LocationNodeUUID
		}
		qLocationNodeUUID := qrLocationNodeUUID
		if qLocationNodeUUID != "" {

			if err := r.SetQueryParam("location.node.uuid", qLocationNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.LocationQtreeID != nil {

		// query param location.qtree.id
		var qrLocationQtreeID int64

		if o.LocationQtreeID != nil {
			qrLocationQtreeID = *o.LocationQtreeID
		}
		qLocationQtreeID := swag.FormatInt64(qrLocationQtreeID)
		if qLocationQtreeID != "" {

			if err := r.SetQueryParam("location.qtree.id", qLocationQtreeID); err != nil {
				return err
			}
		}
	}

	if o.LocationQtreeName != nil {

		// query param location.qtree.name
		var qrLocationQtreeName string

		if o.LocationQtreeName != nil {
			qrLocationQtreeName = *o.LocationQtreeName
		}
		qLocationQtreeName := qrLocationQtreeName
		if qLocationQtreeName != "" {

			if err := r.SetQueryParam("location.qtree.name", qLocationQtreeName); err != nil {
				return err
			}
		}
	}

	if o.LocationStorageAvailabilityZoneName != nil {

		// query param location.storage_availability_zone.name
		var qrLocationStorageAvailabilityZoneName string

		if o.LocationStorageAvailabilityZoneName != nil {
			qrLocationStorageAvailabilityZoneName = *o.LocationStorageAvailabilityZoneName
		}
		qLocationStorageAvailabilityZoneName := qrLocationStorageAvailabilityZoneName
		if qLocationStorageAvailabilityZoneName != "" {

			if err := r.SetQueryParam("location.storage_availability_zone.name", qLocationStorageAvailabilityZoneName); err != nil {
				return err
			}
		}
	}

	if o.LocationStorageAvailabilityZoneUUID != nil {

		// query param location.storage_availability_zone.uuid
		var qrLocationStorageAvailabilityZoneUUID string

		if o.LocationStorageAvailabilityZoneUUID != nil {
			qrLocationStorageAvailabilityZoneUUID = *o.LocationStorageAvailabilityZoneUUID
		}
		qLocationStorageAvailabilityZoneUUID := qrLocationStorageAvailabilityZoneUUID
		if qLocationStorageAvailabilityZoneUUID != "" {

			if err := r.SetQueryParam("location.storage_availability_zone.uuid", qLocationStorageAvailabilityZoneUUID); err != nil {
				return err
			}
		}
	}

	if o.LocationVolumeName != nil {

		// query param location.volume.name
		var qrLocationVolumeName string

		if o.LocationVolumeName != nil {
			qrLocationVolumeName = *o.LocationVolumeName
		}
		qLocationVolumeName := qrLocationVolumeName
		if qLocationVolumeName != "" {

			if err := r.SetQueryParam("location.volume.name", qLocationVolumeName); err != nil {
				return err
			}
		}
	}

	if o.LocationVolumeUUID != nil {

		// query param location.volume.uuid
		var qrLocationVolumeUUID string

		if o.LocationVolumeUUID != nil {
			qrLocationVolumeUUID = *o.LocationVolumeUUID
		}
		qLocationVolumeUUID := qrLocationVolumeUUID
		if qLocationVolumeUUID != "" {

			if err := r.SetQueryParam("location.volume.uuid", qLocationVolumeUUID); err != nil {
				return err
			}
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.MetricDuration != nil {

		// query param metric.duration
		var qrMetricDuration string

		if o.MetricDuration != nil {
			qrMetricDuration = *o.MetricDuration
		}
		qMetricDuration := qrMetricDuration
		if qMetricDuration != "" {

			if err := r.SetQueryParam("metric.duration", qMetricDuration); err != nil {
				return err
			}
		}
	}

	if o.MetricIopsOther != nil {

		// query param metric.iops.other
		var qrMetricIopsOther int64

		if o.MetricIopsOther != nil {
			qrMetricIopsOther = *o.MetricIopsOther
		}
		qMetricIopsOther := swag.FormatInt64(qrMetricIopsOther)
		if qMetricIopsOther != "" {

			if err := r.SetQueryParam("metric.iops.other", qMetricIopsOther); err != nil {
				return err
			}
		}
	}

	if o.MetricIopsRead != nil {

		// query param metric.iops.read
		var qrMetricIopsRead int64

		if o.MetricIopsRead != nil {
			qrMetricIopsRead = *o.MetricIopsRead
		}
		qMetricIopsRead := swag.FormatInt64(qrMetricIopsRead)
		if qMetricIopsRead != "" {

			if err := r.SetQueryParam("metric.iops.read", qMetricIopsRead); err != nil {
				return err
			}
		}
	}

	if o.MetricIopsTotal != nil {

		// query param metric.iops.total
		var qrMetricIopsTotal int64

		if o.MetricIopsTotal != nil {
			qrMetricIopsTotal = *o.MetricIopsTotal
		}
		qMetricIopsTotal := swag.FormatInt64(qrMetricIopsTotal)
		if qMetricIopsTotal != "" {

			if err := r.SetQueryParam("metric.iops.total", qMetricIopsTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricIopsWrite != nil {

		// query param metric.iops.write
		var qrMetricIopsWrite int64

		if o.MetricIopsWrite != nil {
			qrMetricIopsWrite = *o.MetricIopsWrite
		}
		qMetricIopsWrite := swag.FormatInt64(qrMetricIopsWrite)
		if qMetricIopsWrite != "" {

			if err := r.SetQueryParam("metric.iops.write", qMetricIopsWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricLatencyOther != nil {

		// query param metric.latency.other
		var qrMetricLatencyOther int64

		if o.MetricLatencyOther != nil {
			qrMetricLatencyOther = *o.MetricLatencyOther
		}
		qMetricLatencyOther := swag.FormatInt64(qrMetricLatencyOther)
		if qMetricLatencyOther != "" {

			if err := r.SetQueryParam("metric.latency.other", qMetricLatencyOther); err != nil {
				return err
			}
		}
	}

	if o.MetricLatencyRead != nil {

		// query param metric.latency.read
		var qrMetricLatencyRead int64

		if o.MetricLatencyRead != nil {
			qrMetricLatencyRead = *o.MetricLatencyRead
		}
		qMetricLatencyRead := swag.FormatInt64(qrMetricLatencyRead)
		if qMetricLatencyRead != "" {

			if err := r.SetQueryParam("metric.latency.read", qMetricLatencyRead); err != nil {
				return err
			}
		}
	}

	if o.MetricLatencyTotal != nil {

		// query param metric.latency.total
		var qrMetricLatencyTotal int64

		if o.MetricLatencyTotal != nil {
			qrMetricLatencyTotal = *o.MetricLatencyTotal
		}
		qMetricLatencyTotal := swag.FormatInt64(qrMetricLatencyTotal)
		if qMetricLatencyTotal != "" {

			if err := r.SetQueryParam("metric.latency.total", qMetricLatencyTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricLatencyWrite != nil {

		// query param metric.latency.write
		var qrMetricLatencyWrite int64

		if o.MetricLatencyWrite != nil {
			qrMetricLatencyWrite = *o.MetricLatencyWrite
		}
		qMetricLatencyWrite := swag.FormatInt64(qrMetricLatencyWrite)
		if qMetricLatencyWrite != "" {

			if err := r.SetQueryParam("metric.latency.write", qMetricLatencyWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricStatus != nil {

		// query param metric.status
		var qrMetricStatus string

		if o.MetricStatus != nil {
			qrMetricStatus = *o.MetricStatus
		}
		qMetricStatus := qrMetricStatus
		if qMetricStatus != "" {

			if err := r.SetQueryParam("metric.status", qMetricStatus); err != nil {
				return err
			}
		}
	}

	if o.MetricThroughputRead != nil {

		// query param metric.throughput.read
		var qrMetricThroughputRead int64

		if o.MetricThroughputRead != nil {
			qrMetricThroughputRead = *o.MetricThroughputRead
		}
		qMetricThroughputRead := swag.FormatInt64(qrMetricThroughputRead)
		if qMetricThroughputRead != "" {

			if err := r.SetQueryParam("metric.throughput.read", qMetricThroughputRead); err != nil {
				return err
			}
		}
	}

	if o.MetricThroughputTotal != nil {

		// query param metric.throughput.total
		var qrMetricThroughputTotal int64

		if o.MetricThroughputTotal != nil {
			qrMetricThroughputTotal = *o.MetricThroughputTotal
		}
		qMetricThroughputTotal := swag.FormatInt64(qrMetricThroughputTotal)
		if qMetricThroughputTotal != "" {

			if err := r.SetQueryParam("metric.throughput.total", qMetricThroughputTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricThroughputWrite != nil {

		// query param metric.throughput.write
		var qrMetricThroughputWrite int64

		if o.MetricThroughputWrite != nil {
			qrMetricThroughputWrite = *o.MetricThroughputWrite
		}
		qMetricThroughputWrite := swag.FormatInt64(qrMetricThroughputWrite)
		if qMetricThroughputWrite != "" {

			if err := r.SetQueryParam("metric.throughput.write", qMetricThroughputWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricTimestamp != nil {

		// query param metric.timestamp
		var qrMetricTimestamp string

		if o.MetricTimestamp != nil {
			qrMetricTimestamp = *o.MetricTimestamp
		}
		qMetricTimestamp := qrMetricTimestamp
		if qMetricTimestamp != "" {

			if err := r.SetQueryParam("metric.timestamp", qMetricTimestamp); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.OsType != nil {

		// query param os_type
		var qrOsType string

		if o.OsType != nil {
			qrOsType = *o.OsType
		}
		qOsType := qrOsType
		if qOsType != "" {

			if err := r.SetQueryParam("os_type", qOsType); err != nil {
				return err
			}
		}
	}

	if o.QosPolicyName != nil {

		// query param qos_policy.name
		var qrQosPolicyName string

		if o.QosPolicyName != nil {
			qrQosPolicyName = *o.QosPolicyName
		}
		qQosPolicyName := qrQosPolicyName
		if qQosPolicyName != "" {

			if err := r.SetQueryParam("qos_policy.name", qQosPolicyName); err != nil {
				return err
			}
		}
	}

	if o.QosPolicyUUID != nil {

		// query param qos_policy.uuid
		var qrQosPolicyUUID string

		if o.QosPolicyUUID != nil {
			qrQosPolicyUUID = *o.QosPolicyUUID
		}
		qQosPolicyUUID := qrQosPolicyUUID
		if qQosPolicyUUID != "" {

			if err := r.SetQueryParam("qos_policy.uuid", qQosPolicyUUID); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SpaceBlockSize != nil {

		// query param space.block_size
		var qrSpaceBlockSize int64

		if o.SpaceBlockSize != nil {
			qrSpaceBlockSize = *o.SpaceBlockSize
		}
		qSpaceBlockSize := swag.FormatInt64(qrSpaceBlockSize)
		if qSpaceBlockSize != "" {

			if err := r.SetQueryParam("space.block_size", qSpaceBlockSize); err != nil {
				return err
			}
		}
	}

	if o.SpaceEfficiencyRatio != nil {

		// query param space.efficiency_ratio
		var qrSpaceEfficiencyRatio float64

		if o.SpaceEfficiencyRatio != nil {
			qrSpaceEfficiencyRatio = *o.SpaceEfficiencyRatio
		}
		qSpaceEfficiencyRatio := swag.FormatFloat64(qrSpaceEfficiencyRatio)
		if qSpaceEfficiencyRatio != "" {

			if err := r.SetQueryParam("space.efficiency_ratio", qSpaceEfficiencyRatio); err != nil {
				return err
			}
		}
	}

	if o.SpaceGuaranteeRequested != nil {

		// query param space.guarantee.requested
		var qrSpaceGuaranteeRequested bool

		if o.SpaceGuaranteeRequested != nil {
			qrSpaceGuaranteeRequested = *o.SpaceGuaranteeRequested
		}
		qSpaceGuaranteeRequested := swag.FormatBool(qrSpaceGuaranteeRequested)
		if qSpaceGuaranteeRequested != "" {

			if err := r.SetQueryParam("space.guarantee.requested", qSpaceGuaranteeRequested); err != nil {
				return err
			}
		}
	}

	if o.SpaceGuaranteeReserved != nil {

		// query param space.guarantee.reserved
		var qrSpaceGuaranteeReserved bool

		if o.SpaceGuaranteeReserved != nil {
			qrSpaceGuaranteeReserved = *o.SpaceGuaranteeReserved
		}
		qSpaceGuaranteeReserved := swag.FormatBool(qrSpaceGuaranteeReserved)
		if qSpaceGuaranteeReserved != "" {

			if err := r.SetQueryParam("space.guarantee.reserved", qSpaceGuaranteeReserved); err != nil {
				return err
			}
		}
	}

	if o.SpacePhysicalUsed != nil {

		// query param space.physical_used
		var qrSpacePhysicalUsed int64

		if o.SpacePhysicalUsed != nil {
			qrSpacePhysicalUsed = *o.SpacePhysicalUsed
		}
		qSpacePhysicalUsed := swag.FormatInt64(qrSpacePhysicalUsed)
		if qSpacePhysicalUsed != "" {

			if err := r.SetQueryParam("space.physical_used", qSpacePhysicalUsed); err != nil {
				return err
			}
		}
	}

	if o.SpacePhysicalUsedBySnapshots != nil {

		// query param space.physical_used_by_snapshots
		var qrSpacePhysicalUsedBySnapshots int64

		if o.SpacePhysicalUsedBySnapshots != nil {
			qrSpacePhysicalUsedBySnapshots = *o.SpacePhysicalUsedBySnapshots
		}
		qSpacePhysicalUsedBySnapshots := swag.FormatInt64(qrSpacePhysicalUsedBySnapshots)
		if qSpacePhysicalUsedBySnapshots != "" {

			if err := r.SetQueryParam("space.physical_used_by_snapshots", qSpacePhysicalUsedBySnapshots); err != nil {
				return err
			}
		}
	}

	if o.SpaceSize != nil {

		// query param space.size
		var qrSpaceSize int64

		if o.SpaceSize != nil {
			qrSpaceSize = *o.SpaceSize
		}
		qSpaceSize := swag.FormatInt64(qrSpaceSize)
		if qSpaceSize != "" {

			if err := r.SetQueryParam("space.size", qSpaceSize); err != nil {
				return err
			}
		}
	}

	if o.SpaceSnapshotAutodeleteEnabled != nil {

		// query param space.snapshot.autodelete.enabled
		var qrSpaceSnapshotAutodeleteEnabled bool

		if o.SpaceSnapshotAutodeleteEnabled != nil {
			qrSpaceSnapshotAutodeleteEnabled = *o.SpaceSnapshotAutodeleteEnabled
		}
		qSpaceSnapshotAutodeleteEnabled := swag.FormatBool(qrSpaceSnapshotAutodeleteEnabled)
		if qSpaceSnapshotAutodeleteEnabled != "" {

			if err := r.SetQueryParam("space.snapshot.autodelete.enabled", qSpaceSnapshotAutodeleteEnabled); err != nil {
				return err
			}
		}
	}

	if o.SpaceSnapshotReserveAvailable != nil {

		// query param space.snapshot.reserve_available
		var qrSpaceSnapshotReserveAvailable int64

		if o.SpaceSnapshotReserveAvailable != nil {
			qrSpaceSnapshotReserveAvailable = *o.SpaceSnapshotReserveAvailable
		}
		qSpaceSnapshotReserveAvailable := swag.FormatInt64(qrSpaceSnapshotReserveAvailable)
		if qSpaceSnapshotReserveAvailable != "" {

			if err := r.SetQueryParam("space.snapshot.reserve_available", qSpaceSnapshotReserveAvailable); err != nil {
				return err
			}
		}
	}

	if o.SpaceSnapshotReservePercent != nil {

		// query param space.snapshot.reserve_percent
		var qrSpaceSnapshotReservePercent int64

		if o.SpaceSnapshotReservePercent != nil {
			qrSpaceSnapshotReservePercent = *o.SpaceSnapshotReservePercent
		}
		qSpaceSnapshotReservePercent := swag.FormatInt64(qrSpaceSnapshotReservePercent)
		if qSpaceSnapshotReservePercent != "" {

			if err := r.SetQueryParam("space.snapshot.reserve_percent", qSpaceSnapshotReservePercent); err != nil {
				return err
			}
		}
	}

	if o.SpaceSnapshotReserveSize != nil {

		// query param space.snapshot.reserve_size
		var qrSpaceSnapshotReserveSize int64

		if o.SpaceSnapshotReserveSize != nil {
			qrSpaceSnapshotReserveSize = *o.SpaceSnapshotReserveSize
		}
		qSpaceSnapshotReserveSize := swag.FormatInt64(qrSpaceSnapshotReserveSize)
		if qSpaceSnapshotReserveSize != "" {

			if err := r.SetQueryParam("space.snapshot.reserve_size", qSpaceSnapshotReserveSize); err != nil {
				return err
			}
		}
	}

	if o.SpaceSnapshotSpaceUsedPercent != nil {

		// query param space.snapshot.space_used_percent
		var qrSpaceSnapshotSpaceUsedPercent int64

		if o.SpaceSnapshotSpaceUsedPercent != nil {
			qrSpaceSnapshotSpaceUsedPercent = *o.SpaceSnapshotSpaceUsedPercent
		}
		qSpaceSnapshotSpaceUsedPercent := swag.FormatInt64(qrSpaceSnapshotSpaceUsedPercent)
		if qSpaceSnapshotSpaceUsedPercent != "" {

			if err := r.SetQueryParam("space.snapshot.space_used_percent", qSpaceSnapshotSpaceUsedPercent); err != nil {
				return err
			}
		}
	}

	if o.SpaceSnapshotUsed != nil {

		// query param space.snapshot.used
		var qrSpaceSnapshotUsed int64

		if o.SpaceSnapshotUsed != nil {
			qrSpaceSnapshotUsed = *o.SpaceSnapshotUsed
		}
		qSpaceSnapshotUsed := swag.FormatInt64(qrSpaceSnapshotUsed)
		if qSpaceSnapshotUsed != "" {

			if err := r.SetQueryParam("space.snapshot.used", qSpaceSnapshotUsed); err != nil {
				return err
			}
		}
	}

	if o.SpaceUsed != nil {

		// query param space.used
		var qrSpaceUsed int64

		if o.SpaceUsed != nil {
			qrSpaceUsed = *o.SpaceUsed
		}
		qSpaceUsed := swag.FormatInt64(qrSpaceUsed)
		if qSpaceUsed != "" {

			if err := r.SetQueryParam("space.used", qSpaceUsed); err != nil {
				return err
			}
		}
	}

	if o.StatisticsIopsRawOther != nil {

		// query param statistics.iops_raw.other
		var qrStatisticsIopsRawOther int64

		if o.StatisticsIopsRawOther != nil {
			qrStatisticsIopsRawOther = *o.StatisticsIopsRawOther
		}
		qStatisticsIopsRawOther := swag.FormatInt64(qrStatisticsIopsRawOther)
		if qStatisticsIopsRawOther != "" {

			if err := r.SetQueryParam("statistics.iops_raw.other", qStatisticsIopsRawOther); err != nil {
				return err
			}
		}
	}

	if o.StatisticsIopsRawRead != nil {

		// query param statistics.iops_raw.read
		var qrStatisticsIopsRawRead int64

		if o.StatisticsIopsRawRead != nil {
			qrStatisticsIopsRawRead = *o.StatisticsIopsRawRead
		}
		qStatisticsIopsRawRead := swag.FormatInt64(qrStatisticsIopsRawRead)
		if qStatisticsIopsRawRead != "" {

			if err := r.SetQueryParam("statistics.iops_raw.read", qStatisticsIopsRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsIopsRawTotal != nil {

		// query param statistics.iops_raw.total
		var qrStatisticsIopsRawTotal int64

		if o.StatisticsIopsRawTotal != nil {
			qrStatisticsIopsRawTotal = *o.StatisticsIopsRawTotal
		}
		qStatisticsIopsRawTotal := swag.FormatInt64(qrStatisticsIopsRawTotal)
		if qStatisticsIopsRawTotal != "" {

			if err := r.SetQueryParam("statistics.iops_raw.total", qStatisticsIopsRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsIopsRawWrite != nil {

		// query param statistics.iops_raw.write
		var qrStatisticsIopsRawWrite int64

		if o.StatisticsIopsRawWrite != nil {
			qrStatisticsIopsRawWrite = *o.StatisticsIopsRawWrite
		}
		qStatisticsIopsRawWrite := swag.FormatInt64(qrStatisticsIopsRawWrite)
		if qStatisticsIopsRawWrite != "" {

			if err := r.SetQueryParam("statistics.iops_raw.write", qStatisticsIopsRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsLatencyRawOther != nil {

		// query param statistics.latency_raw.other
		var qrStatisticsLatencyRawOther int64

		if o.StatisticsLatencyRawOther != nil {
			qrStatisticsLatencyRawOther = *o.StatisticsLatencyRawOther
		}
		qStatisticsLatencyRawOther := swag.FormatInt64(qrStatisticsLatencyRawOther)
		if qStatisticsLatencyRawOther != "" {

			if err := r.SetQueryParam("statistics.latency_raw.other", qStatisticsLatencyRawOther); err != nil {
				return err
			}
		}
	}

	if o.StatisticsLatencyRawRead != nil {

		// query param statistics.latency_raw.read
		var qrStatisticsLatencyRawRead int64

		if o.StatisticsLatencyRawRead != nil {
			qrStatisticsLatencyRawRead = *o.StatisticsLatencyRawRead
		}
		qStatisticsLatencyRawRead := swag.FormatInt64(qrStatisticsLatencyRawRead)
		if qStatisticsLatencyRawRead != "" {

			if err := r.SetQueryParam("statistics.latency_raw.read", qStatisticsLatencyRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsLatencyRawTotal != nil {

		// query param statistics.latency_raw.total
		var qrStatisticsLatencyRawTotal int64

		if o.StatisticsLatencyRawTotal != nil {
			qrStatisticsLatencyRawTotal = *o.StatisticsLatencyRawTotal
		}
		qStatisticsLatencyRawTotal := swag.FormatInt64(qrStatisticsLatencyRawTotal)
		if qStatisticsLatencyRawTotal != "" {

			if err := r.SetQueryParam("statistics.latency_raw.total", qStatisticsLatencyRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsLatencyRawWrite != nil {

		// query param statistics.latency_raw.write
		var qrStatisticsLatencyRawWrite int64

		if o.StatisticsLatencyRawWrite != nil {
			qrStatisticsLatencyRawWrite = *o.StatisticsLatencyRawWrite
		}
		qStatisticsLatencyRawWrite := swag.FormatInt64(qrStatisticsLatencyRawWrite)
		if qStatisticsLatencyRawWrite != "" {

			if err := r.SetQueryParam("statistics.latency_raw.write", qStatisticsLatencyRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsStatus != nil {

		// query param statistics.status
		var qrStatisticsStatus string

		if o.StatisticsStatus != nil {
			qrStatisticsStatus = *o.StatisticsStatus
		}
		qStatisticsStatus := qrStatisticsStatus
		if qStatisticsStatus != "" {

			if err := r.SetQueryParam("statistics.status", qStatisticsStatus); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawRead != nil {

		// query param statistics.throughput_raw.read
		var qrStatisticsThroughputRawRead int64

		if o.StatisticsThroughputRawRead != nil {
			qrStatisticsThroughputRawRead = *o.StatisticsThroughputRawRead
		}
		qStatisticsThroughputRawRead := swag.FormatInt64(qrStatisticsThroughputRawRead)
		if qStatisticsThroughputRawRead != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.read", qStatisticsThroughputRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawTotal != nil {

		// query param statistics.throughput_raw.total
		var qrStatisticsThroughputRawTotal int64

		if o.StatisticsThroughputRawTotal != nil {
			qrStatisticsThroughputRawTotal = *o.StatisticsThroughputRawTotal
		}
		qStatisticsThroughputRawTotal := swag.FormatInt64(qrStatisticsThroughputRawTotal)
		if qStatisticsThroughputRawTotal != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.total", qStatisticsThroughputRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawWrite != nil {

		// query param statistics.throughput_raw.write
		var qrStatisticsThroughputRawWrite int64

		if o.StatisticsThroughputRawWrite != nil {
			qrStatisticsThroughputRawWrite = *o.StatisticsThroughputRawWrite
		}
		qStatisticsThroughputRawWrite := swag.FormatInt64(qrStatisticsThroughputRawWrite)
		if qStatisticsThroughputRawWrite != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.write", qStatisticsThroughputRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTimestamp != nil {

		// query param statistics.timestamp
		var qrStatisticsTimestamp string

		if o.StatisticsTimestamp != nil {
			qrStatisticsTimestamp = *o.StatisticsTimestamp
		}
		qStatisticsTimestamp := qrStatisticsTimestamp
		if qStatisticsTimestamp != "" {

			if err := r.SetQueryParam("statistics.timestamp", qStatisticsTimestamp); err != nil {
				return err
			}
		}
	}

	if o.StatusContainerState != nil {

		// query param status.container_state
		var qrStatusContainerState string

		if o.StatusContainerState != nil {
			qrStatusContainerState = *o.StatusContainerState
		}
		qStatusContainerState := qrStatusContainerState
		if qStatusContainerState != "" {

			if err := r.SetQueryParam("status.container_state", qStatusContainerState); err != nil {
				return err
			}
		}
	}

	if o.StatusMapped != nil {

		// query param status.mapped
		var qrStatusMapped bool

		if o.StatusMapped != nil {
			qrStatusMapped = *o.StatusMapped
		}
		qStatusMapped := swag.FormatBool(qrStatusMapped)
		if qStatusMapped != "" {

			if err := r.SetQueryParam("status.mapped", qStatusMapped); err != nil {
				return err
			}
		}
	}

	if o.StatusReadOnly != nil {

		// query param status.read_only
		var qrStatusReadOnly bool

		if o.StatusReadOnly != nil {
			qrStatusReadOnly = *o.StatusReadOnly
		}
		qStatusReadOnly := swag.FormatBool(qrStatusReadOnly)
		if qStatusReadOnly != "" {

			if err := r.SetQueryParam("status.read_only", qStatusReadOnly); err != nil {
				return err
			}
		}
	}

	if o.StatusState != nil {

		// query param status.state
		var qrStatusState string

		if o.StatusState != nil {
			qrStatusState = *o.StatusState
		}
		qStatusState := qrStatusState
		if qStatusState != "" {

			if err := r.SetQueryParam("status.state", qStatusState); err != nil {
				return err
			}
		}
	}

	if o.SubsystemMapAnagrpid != nil {

		// query param subsystem_map.anagrpid
		var qrSubsystemMapAnagrpid string

		if o.SubsystemMapAnagrpid != nil {
			qrSubsystemMapAnagrpid = *o.SubsystemMapAnagrpid
		}
		qSubsystemMapAnagrpid := qrSubsystemMapAnagrpid
		if qSubsystemMapAnagrpid != "" {

			if err := r.SetQueryParam("subsystem_map.anagrpid", qSubsystemMapAnagrpid); err != nil {
				return err
			}
		}
	}

	if o.SubsystemMapNsid != nil {

		// query param subsystem_map.nsid
		var qrSubsystemMapNsid string

		if o.SubsystemMapNsid != nil {
			qrSubsystemMapNsid = *o.SubsystemMapNsid
		}
		qSubsystemMapNsid := qrSubsystemMapNsid
		if qSubsystemMapNsid != "" {

			if err := r.SetQueryParam("subsystem_map.nsid", qSubsystemMapNsid); err != nil {
				return err
			}
		}
	}

	if o.SubsystemMapSubsystemComment != nil {

		// query param subsystem_map.subsystem.comment
		var qrSubsystemMapSubsystemComment string

		if o.SubsystemMapSubsystemComment != nil {
			qrSubsystemMapSubsystemComment = *o.SubsystemMapSubsystemComment
		}
		qSubsystemMapSubsystemComment := qrSubsystemMapSubsystemComment
		if qSubsystemMapSubsystemComment != "" {

			if err := r.SetQueryParam("subsystem_map.subsystem.comment", qSubsystemMapSubsystemComment); err != nil {
				return err
			}
		}
	}

	if o.SubsystemMapSubsystemHostsDhHmacChapGroupSize != nil {

		// query param subsystem_map.subsystem.hosts.dh_hmac_chap.group_size
		var qrSubsystemMapSubsystemHostsDhHmacChapGroupSize string

		if o.SubsystemMapSubsystemHostsDhHmacChapGroupSize != nil {
			qrSubsystemMapSubsystemHostsDhHmacChapGroupSize = *o.SubsystemMapSubsystemHostsDhHmacChapGroupSize
		}
		qSubsystemMapSubsystemHostsDhHmacChapGroupSize := qrSubsystemMapSubsystemHostsDhHmacChapGroupSize
		if qSubsystemMapSubsystemHostsDhHmacChapGroupSize != "" {

			if err := r.SetQueryParam("subsystem_map.subsystem.hosts.dh_hmac_chap.group_size", qSubsystemMapSubsystemHostsDhHmacChapGroupSize); err != nil {
				return err
			}
		}
	}

	if o.SubsystemMapSubsystemHostsDhHmacChapHashFunction != nil {

		// query param subsystem_map.subsystem.hosts.dh_hmac_chap.hash_function
		var qrSubsystemMapSubsystemHostsDhHmacChapHashFunction string

		if o.SubsystemMapSubsystemHostsDhHmacChapHashFunction != nil {
			qrSubsystemMapSubsystemHostsDhHmacChapHashFunction = *o.SubsystemMapSubsystemHostsDhHmacChapHashFunction
		}
		qSubsystemMapSubsystemHostsDhHmacChapHashFunction := qrSubsystemMapSubsystemHostsDhHmacChapHashFunction
		if qSubsystemMapSubsystemHostsDhHmacChapHashFunction != "" {

			if err := r.SetQueryParam("subsystem_map.subsystem.hosts.dh_hmac_chap.hash_function", qSubsystemMapSubsystemHostsDhHmacChapHashFunction); err != nil {
				return err
			}
		}
	}

	if o.SubsystemMapSubsystemHostsDhHmacChapMode != nil {

		// query param subsystem_map.subsystem.hosts.dh_hmac_chap.mode
		var qrSubsystemMapSubsystemHostsDhHmacChapMode string

		if o.SubsystemMapSubsystemHostsDhHmacChapMode != nil {
			qrSubsystemMapSubsystemHostsDhHmacChapMode = *o.SubsystemMapSubsystemHostsDhHmacChapMode
		}
		qSubsystemMapSubsystemHostsDhHmacChapMode := qrSubsystemMapSubsystemHostsDhHmacChapMode
		if qSubsystemMapSubsystemHostsDhHmacChapMode != "" {

			if err := r.SetQueryParam("subsystem_map.subsystem.hosts.dh_hmac_chap.mode", qSubsystemMapSubsystemHostsDhHmacChapMode); err != nil {
				return err
			}
		}
	}

	if o.SubsystemMapSubsystemHostsNqn != nil {

		// query param subsystem_map.subsystem.hosts.nqn
		var qrSubsystemMapSubsystemHostsNqn string

		if o.SubsystemMapSubsystemHostsNqn != nil {
			qrSubsystemMapSubsystemHostsNqn = *o.SubsystemMapSubsystemHostsNqn
		}
		qSubsystemMapSubsystemHostsNqn := qrSubsystemMapSubsystemHostsNqn
		if qSubsystemMapSubsystemHostsNqn != "" {

			if err := r.SetQueryParam("subsystem_map.subsystem.hosts.nqn", qSubsystemMapSubsystemHostsNqn); err != nil {
				return err
			}
		}
	}

	if o.SubsystemMapSubsystemHostsPriority != nil {

		// query param subsystem_map.subsystem.hosts.priority
		var qrSubsystemMapSubsystemHostsPriority string

		if o.SubsystemMapSubsystemHostsPriority != nil {
			qrSubsystemMapSubsystemHostsPriority = *o.SubsystemMapSubsystemHostsPriority
		}
		qSubsystemMapSubsystemHostsPriority := qrSubsystemMapSubsystemHostsPriority
		if qSubsystemMapSubsystemHostsPriority != "" {

			if err := r.SetQueryParam("subsystem_map.subsystem.hosts.priority", qSubsystemMapSubsystemHostsPriority); err != nil {
				return err
			}
		}
	}

	if o.SubsystemMapSubsystemHostsProximityLocalSvm != nil {

		// query param subsystem_map.subsystem.hosts.proximity.local_svm
		var qrSubsystemMapSubsystemHostsProximityLocalSvm bool

		if o.SubsystemMapSubsystemHostsProximityLocalSvm != nil {
			qrSubsystemMapSubsystemHostsProximityLocalSvm = *o.SubsystemMapSubsystemHostsProximityLocalSvm
		}
		qSubsystemMapSubsystemHostsProximityLocalSvm := swag.FormatBool(qrSubsystemMapSubsystemHostsProximityLocalSvm)
		if qSubsystemMapSubsystemHostsProximityLocalSvm != "" {

			if err := r.SetQueryParam("subsystem_map.subsystem.hosts.proximity.local_svm", qSubsystemMapSubsystemHostsProximityLocalSvm); err != nil {
				return err
			}
		}
	}

	if o.SubsystemMapSubsystemHostsProximityPeerSvmsName != nil {

		// query param subsystem_map.subsystem.hosts.proximity.peer_svms.name
		var qrSubsystemMapSubsystemHostsProximityPeerSvmsName string

		if o.SubsystemMapSubsystemHostsProximityPeerSvmsName != nil {
			qrSubsystemMapSubsystemHostsProximityPeerSvmsName = *o.SubsystemMapSubsystemHostsProximityPeerSvmsName
		}
		qSubsystemMapSubsystemHostsProximityPeerSvmsName := qrSubsystemMapSubsystemHostsProximityPeerSvmsName
		if qSubsystemMapSubsystemHostsProximityPeerSvmsName != "" {

			if err := r.SetQueryParam("subsystem_map.subsystem.hosts.proximity.peer_svms.name", qSubsystemMapSubsystemHostsProximityPeerSvmsName); err != nil {
				return err
			}
		}
	}

	if o.SubsystemMapSubsystemHostsProximityPeerSvmsUUID != nil {

		// query param subsystem_map.subsystem.hosts.proximity.peer_svms.uuid
		var qrSubsystemMapSubsystemHostsProximityPeerSvmsUUID string

		if o.SubsystemMapSubsystemHostsProximityPeerSvmsUUID != nil {
			qrSubsystemMapSubsystemHostsProximityPeerSvmsUUID = *o.SubsystemMapSubsystemHostsProximityPeerSvmsUUID
		}
		qSubsystemMapSubsystemHostsProximityPeerSvmsUUID := qrSubsystemMapSubsystemHostsProximityPeerSvmsUUID
		if qSubsystemMapSubsystemHostsProximityPeerSvmsUUID != "" {

			if err := r.SetQueryParam("subsystem_map.subsystem.hosts.proximity.peer_svms.uuid", qSubsystemMapSubsystemHostsProximityPeerSvmsUUID); err != nil {
				return err
			}
		}
	}

	if o.SubsystemMapSubsystemHostsTLSKeyType != nil {

		// query param subsystem_map.subsystem.hosts.tls.key_type
		var qrSubsystemMapSubsystemHostsTLSKeyType string

		if o.SubsystemMapSubsystemHostsTLSKeyType != nil {
			qrSubsystemMapSubsystemHostsTLSKeyType = *o.SubsystemMapSubsystemHostsTLSKeyType
		}
		qSubsystemMapSubsystemHostsTLSKeyType := qrSubsystemMapSubsystemHostsTLSKeyType
		if qSubsystemMapSubsystemHostsTLSKeyType != "" {

			if err := r.SetQueryParam("subsystem_map.subsystem.hosts.tls.key_type", qSubsystemMapSubsystemHostsTLSKeyType); err != nil {
				return err
			}
		}
	}

	if o.SubsystemMapSubsystemName != nil {

		// query param subsystem_map.subsystem.name
		var qrSubsystemMapSubsystemName string

		if o.SubsystemMapSubsystemName != nil {
			qrSubsystemMapSubsystemName = *o.SubsystemMapSubsystemName
		}
		qSubsystemMapSubsystemName := qrSubsystemMapSubsystemName
		if qSubsystemMapSubsystemName != "" {

			if err := r.SetQueryParam("subsystem_map.subsystem.name", qSubsystemMapSubsystemName); err != nil {
				return err
			}
		}
	}

	if o.SubsystemMapSubsystemOsType != nil {

		// query param subsystem_map.subsystem.os_type
		var qrSubsystemMapSubsystemOsType string

		if o.SubsystemMapSubsystemOsType != nil {
			qrSubsystemMapSubsystemOsType = *o.SubsystemMapSubsystemOsType
		}
		qSubsystemMapSubsystemOsType := qrSubsystemMapSubsystemOsType
		if qSubsystemMapSubsystemOsType != "" {

			if err := r.SetQueryParam("subsystem_map.subsystem.os_type", qSubsystemMapSubsystemOsType); err != nil {
				return err
			}
		}
	}

	if o.SubsystemMapSubsystemUUID != nil {

		// query param subsystem_map.subsystem.uuid
		var qrSubsystemMapSubsystemUUID string

		if o.SubsystemMapSubsystemUUID != nil {
			qrSubsystemMapSubsystemUUID = *o.SubsystemMapSubsystemUUID
		}
		qSubsystemMapSubsystemUUID := qrSubsystemMapSubsystemUUID
		if qSubsystemMapSubsystemUUID != "" {

			if err := r.SetQueryParam("subsystem_map.subsystem.uuid", qSubsystemMapSubsystemUUID); err != nil {
				return err
			}
		}
	}

	if o.SvmName != nil {

		// query param svm.name
		var qrSvmName string

		if o.SvmName != nil {
			qrSvmName = *o.SvmName
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SvmUUID != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SvmUUID != nil {
			qrSvmUUID = *o.SvmUUID
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.UUID != nil {

		// query param uuid
		var qrUUID string

		if o.UUID != nil {
			qrUUID = *o.UUID
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamNvmeNamespaceCollectionGet binds the parameter fields
func (o *NvmeNamespaceCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamNvmeNamespaceCollectionGet binds the parameter order_by
func (o *NvmeNamespaceCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
