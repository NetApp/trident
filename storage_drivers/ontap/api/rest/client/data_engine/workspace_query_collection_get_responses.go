// Code generated by go-swagger; DO NOT EDIT.

package data_engine

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/netapp/trident/storage_drivers/ontap/api/rest/models"
)

// WorkspaceQueryCollectionGetReader is a Reader for the WorkspaceQueryCollectionGet structure.
type WorkspaceQueryCollectionGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *WorkspaceQueryCollectionGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewWorkspaceQueryCollectionGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewWorkspaceQueryCollectionGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewWorkspaceQueryCollectionGetOK creates a WorkspaceQueryCollectionGetOK with default headers values
func NewWorkspaceQueryCollectionGetOK() *WorkspaceQueryCollectionGetOK {
	return &WorkspaceQueryCollectionGetOK{}
}

/*
WorkspaceQueryCollectionGetOK describes a response with status code 200, with default header values.

OK
*/
type WorkspaceQueryCollectionGetOK struct {
	Payload *models.WorkspaceQueryResponse
}

// IsSuccess returns true when this workspace query collection get o k response has a 2xx status code
func (o *WorkspaceQueryCollectionGetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this workspace query collection get o k response has a 3xx status code
func (o *WorkspaceQueryCollectionGetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workspace query collection get o k response has a 4xx status code
func (o *WorkspaceQueryCollectionGetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this workspace query collection get o k response has a 5xx status code
func (o *WorkspaceQueryCollectionGetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this workspace query collection get o k response a status code equal to that given
func (o *WorkspaceQueryCollectionGetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the workspace query collection get o k response
func (o *WorkspaceQueryCollectionGetOK) Code() int {
	return 200
}

func (o *WorkspaceQueryCollectionGetOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /data-engine/workspaces/{workspace.uuid}/queries][%d] workspaceQueryCollectionGetOK %s", 200, payload)
}

func (o *WorkspaceQueryCollectionGetOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /data-engine/workspaces/{workspace.uuid}/queries][%d] workspaceQueryCollectionGetOK %s", 200, payload)
}

func (o *WorkspaceQueryCollectionGetOK) GetPayload() *models.WorkspaceQueryResponse {
	return o.Payload
}

func (o *WorkspaceQueryCollectionGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WorkspaceQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkspaceQueryCollectionGetDefault creates a WorkspaceQueryCollectionGetDefault with default headers values
func NewWorkspaceQueryCollectionGetDefault(code int) *WorkspaceQueryCollectionGetDefault {
	return &WorkspaceQueryCollectionGetDefault{
		_statusCode: code,
	}
}

/*
WorkspaceQueryCollectionGetDefault describes a response with status code -1, with default header values.

Error
*/
type WorkspaceQueryCollectionGetDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// IsSuccess returns true when this workspace query collection get default response has a 2xx status code
func (o *WorkspaceQueryCollectionGetDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this workspace query collection get default response has a 3xx status code
func (o *WorkspaceQueryCollectionGetDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this workspace query collection get default response has a 4xx status code
func (o *WorkspaceQueryCollectionGetDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this workspace query collection get default response has a 5xx status code
func (o *WorkspaceQueryCollectionGetDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this workspace query collection get default response a status code equal to that given
func (o *WorkspaceQueryCollectionGetDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the workspace query collection get default response
func (o *WorkspaceQueryCollectionGetDefault) Code() int {
	return o._statusCode
}

func (o *WorkspaceQueryCollectionGetDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /data-engine/workspaces/{workspace.uuid}/queries][%d] workspace_query_collection_get default %s", o._statusCode, payload)
}

func (o *WorkspaceQueryCollectionGetDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /data-engine/workspaces/{workspace.uuid}/queries][%d] workspace_query_collection_get default %s", o._statusCode, payload)
}

func (o *WorkspaceQueryCollectionGetDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *WorkspaceQueryCollectionGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
