// Code generated by go-swagger; DO NOT EDIT.

package data_engine

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDataEngineGovernancePoliciesGuardrailDeleteCollectionParams creates a new DataEngineGovernancePoliciesGuardrailDeleteCollectionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDataEngineGovernancePoliciesGuardrailDeleteCollectionParams() *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	return &DataEngineGovernancePoliciesGuardrailDeleteCollectionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDataEngineGovernancePoliciesGuardrailDeleteCollectionParamsWithTimeout creates a new DataEngineGovernancePoliciesGuardrailDeleteCollectionParams object
// with the ability to set a timeout on a request.
func NewDataEngineGovernancePoliciesGuardrailDeleteCollectionParamsWithTimeout(timeout time.Duration) *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	return &DataEngineGovernancePoliciesGuardrailDeleteCollectionParams{
		timeout: timeout,
	}
}

// NewDataEngineGovernancePoliciesGuardrailDeleteCollectionParamsWithContext creates a new DataEngineGovernancePoliciesGuardrailDeleteCollectionParams object
// with the ability to set a context for a request.
func NewDataEngineGovernancePoliciesGuardrailDeleteCollectionParamsWithContext(ctx context.Context) *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	return &DataEngineGovernancePoliciesGuardrailDeleteCollectionParams{
		Context: ctx,
	}
}

// NewDataEngineGovernancePoliciesGuardrailDeleteCollectionParamsWithHTTPClient creates a new DataEngineGovernancePoliciesGuardrailDeleteCollectionParams object
// with the ability to set a custom HTTPClient for a request.
func NewDataEngineGovernancePoliciesGuardrailDeleteCollectionParamsWithHTTPClient(client *http.Client) *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	return &DataEngineGovernancePoliciesGuardrailDeleteCollectionParams{
		HTTPClient: client,
	}
}

/*
DataEngineGovernancePoliciesGuardrailDeleteCollectionParams contains all the parameters to send to the API endpoint

	for the data engine governance policies guardrail delete collection operation.

	Typically these are written to a http.Request.
*/
type DataEngineGovernancePoliciesGuardrailDeleteCollectionParams struct {

	/* ActionsActionType.

	   Filter by actions.action_type
	*/
	ActionsActionType *string

	/* ConditionsItems.

	   Filter by conditions.items
	*/
	ConditionsItems *string

	/* ConditionsOperator.

	   Filter by conditions.operator
	*/
	ConditionsOperator *string

	/* ConditionsType.

	   Filter by conditions.type
	*/
	ConditionsType *string

	/* ContinueOnFailure.

	   Continue even when the operation fails on one of the records.
	*/
	ContinueOnFailure *bool

	/* CreateTime.

	   Filter by create_time
	*/
	CreateTime *string

	/* Description.

	   Filter by description
	*/
	Description *string

	/* HasIssue.

	   Filter by has_issue
	*/
	HasIssue *bool

	/* ImpactedFilesCount.

	   Filter by impacted_files_count
	*/
	ImpactedFilesCount *int64

	/* Info.

	   Info specification
	*/
	Info DataEngineGovernancePoliciesGuardrailDeleteCollectionBody

	/* IssueTagsClassificationType.

	   Filter by issue_tags.classification_type
	*/
	IssueTagsClassificationType *string

	/* IssueTagsTag.

	   Filter by issue_tags.tag
	*/
	IssueTagsTag *string

	/* Name.

	   Filter by name
	*/
	Name *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* SerialRecords.

	   Perform the operation on the records synchronously.
	*/
	SerialRecords *bool

	/* State.

	   Filter by state
	*/
	State *string

	/* UpdateTime.

	   Filter by update_time
	*/
	UpdateTime *string

	/* UUID.

	   Filter by uuid
	*/
	UUID *string

	/* WorkspacesName.

	   Filter by workspaces.name
	*/
	WorkspacesName *string

	/* WorkspacesUUID.

	   Filter by workspaces.uuid
	*/
	WorkspacesUUID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the data engine governance policies guardrail delete collection params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) WithDefaults() *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the data engine governance policies guardrail delete collection params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) SetDefaults() {
	var (
		continueOnFailureDefault = bool(false)

		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)

		serialRecordsDefault = bool(false)
	)

	val := DataEngineGovernancePoliciesGuardrailDeleteCollectionParams{
		ContinueOnFailure: &continueOnFailureDefault,
		ReturnRecords:     &returnRecordsDefault,
		ReturnTimeout:     &returnTimeoutDefault,
		SerialRecords:     &serialRecordsDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) WithTimeout(timeout time.Duration) *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) WithContext(ctx context.Context) *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) WithHTTPClient(client *http.Client) *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActionsActionType adds the actionsActionType to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) WithActionsActionType(actionsActionType *string) *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	o.SetActionsActionType(actionsActionType)
	return o
}

// SetActionsActionType adds the actionsActionType to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) SetActionsActionType(actionsActionType *string) {
	o.ActionsActionType = actionsActionType
}

// WithConditionsItems adds the conditionsItems to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) WithConditionsItems(conditionsItems *string) *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	o.SetConditionsItems(conditionsItems)
	return o
}

// SetConditionsItems adds the conditionsItems to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) SetConditionsItems(conditionsItems *string) {
	o.ConditionsItems = conditionsItems
}

// WithConditionsOperator adds the conditionsOperator to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) WithConditionsOperator(conditionsOperator *string) *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	o.SetConditionsOperator(conditionsOperator)
	return o
}

// SetConditionsOperator adds the conditionsOperator to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) SetConditionsOperator(conditionsOperator *string) {
	o.ConditionsOperator = conditionsOperator
}

// WithConditionsType adds the conditionsType to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) WithConditionsType(conditionsType *string) *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	o.SetConditionsType(conditionsType)
	return o
}

// SetConditionsType adds the conditionsType to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) SetConditionsType(conditionsType *string) {
	o.ConditionsType = conditionsType
}

// WithContinueOnFailure adds the continueOnFailure to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) WithContinueOnFailure(continueOnFailure *bool) *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	o.SetContinueOnFailure(continueOnFailure)
	return o
}

// SetContinueOnFailure adds the continueOnFailure to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) SetContinueOnFailure(continueOnFailure *bool) {
	o.ContinueOnFailure = continueOnFailure
}

// WithCreateTime adds the createTime to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) WithCreateTime(createTime *string) *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	o.SetCreateTime(createTime)
	return o
}

// SetCreateTime adds the createTime to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) SetCreateTime(createTime *string) {
	o.CreateTime = createTime
}

// WithDescription adds the description to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) WithDescription(description *string) *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) SetDescription(description *string) {
	o.Description = description
}

// WithHasIssue adds the hasIssue to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) WithHasIssue(hasIssue *bool) *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	o.SetHasIssue(hasIssue)
	return o
}

// SetHasIssue adds the hasIssue to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) SetHasIssue(hasIssue *bool) {
	o.HasIssue = hasIssue
}

// WithImpactedFilesCount adds the impactedFilesCount to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) WithImpactedFilesCount(impactedFilesCount *int64) *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	o.SetImpactedFilesCount(impactedFilesCount)
	return o
}

// SetImpactedFilesCount adds the impactedFilesCount to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) SetImpactedFilesCount(impactedFilesCount *int64) {
	o.ImpactedFilesCount = impactedFilesCount
}

// WithInfo adds the info to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) WithInfo(info DataEngineGovernancePoliciesGuardrailDeleteCollectionBody) *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	o.SetInfo(info)
	return o
}

// SetInfo adds the info to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) SetInfo(info DataEngineGovernancePoliciesGuardrailDeleteCollectionBody) {
	o.Info = info
}

// WithIssueTagsClassificationType adds the issueTagsClassificationType to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) WithIssueTagsClassificationType(issueTagsClassificationType *string) *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	o.SetIssueTagsClassificationType(issueTagsClassificationType)
	return o
}

// SetIssueTagsClassificationType adds the issueTagsClassificationType to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) SetIssueTagsClassificationType(issueTagsClassificationType *string) {
	o.IssueTagsClassificationType = issueTagsClassificationType
}

// WithIssueTagsTag adds the issueTagsTag to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) WithIssueTagsTag(issueTagsTag *string) *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	o.SetIssueTagsTag(issueTagsTag)
	return o
}

// SetIssueTagsTag adds the issueTagsTag to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) SetIssueTagsTag(issueTagsTag *string) {
	o.IssueTagsTag = issueTagsTag
}

// WithName adds the name to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) WithName(name *string) *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) SetName(name *string) {
	o.Name = name
}

// WithReturnRecords adds the returnRecords to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) WithReturnRecords(returnRecords *bool) *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) WithReturnTimeout(returnTimeout *int64) *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithSerialRecords adds the serialRecords to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) WithSerialRecords(serialRecords *bool) *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	o.SetSerialRecords(serialRecords)
	return o
}

// SetSerialRecords adds the serialRecords to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) SetSerialRecords(serialRecords *bool) {
	o.SerialRecords = serialRecords
}

// WithState adds the state to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) WithState(state *string) *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) SetState(state *string) {
	o.State = state
}

// WithUpdateTime adds the updateTime to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) WithUpdateTime(updateTime *string) *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	o.SetUpdateTime(updateTime)
	return o
}

// SetUpdateTime adds the updateTime to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) SetUpdateTime(updateTime *string) {
	o.UpdateTime = updateTime
}

// WithUUID adds the uuid to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) WithUUID(uuid *string) *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) SetUUID(uuid *string) {
	o.UUID = uuid
}

// WithWorkspacesName adds the workspacesName to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) WithWorkspacesName(workspacesName *string) *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	o.SetWorkspacesName(workspacesName)
	return o
}

// SetWorkspacesName adds the workspacesName to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) SetWorkspacesName(workspacesName *string) {
	o.WorkspacesName = workspacesName
}

// WithWorkspacesUUID adds the workspacesUUID to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) WithWorkspacesUUID(workspacesUUID *string) *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams {
	o.SetWorkspacesUUID(workspacesUUID)
	return o
}

// SetWorkspacesUUID adds the workspacesUuid to the data engine governance policies guardrail delete collection params
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) SetWorkspacesUUID(workspacesUUID *string) {
	o.WorkspacesUUID = workspacesUUID
}

// WriteToRequest writes these params to a swagger request
func (o *DataEngineGovernancePoliciesGuardrailDeleteCollectionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ActionsActionType != nil {

		// query param actions.action_type
		var qrActionsActionType string

		if o.ActionsActionType != nil {
			qrActionsActionType = *o.ActionsActionType
		}
		qActionsActionType := qrActionsActionType
		if qActionsActionType != "" {

			if err := r.SetQueryParam("actions.action_type", qActionsActionType); err != nil {
				return err
			}
		}
	}

	if o.ConditionsItems != nil {

		// query param conditions.items
		var qrConditionsItems string

		if o.ConditionsItems != nil {
			qrConditionsItems = *o.ConditionsItems
		}
		qConditionsItems := qrConditionsItems
		if qConditionsItems != "" {

			if err := r.SetQueryParam("conditions.items", qConditionsItems); err != nil {
				return err
			}
		}
	}

	if o.ConditionsOperator != nil {

		// query param conditions.operator
		var qrConditionsOperator string

		if o.ConditionsOperator != nil {
			qrConditionsOperator = *o.ConditionsOperator
		}
		qConditionsOperator := qrConditionsOperator
		if qConditionsOperator != "" {

			if err := r.SetQueryParam("conditions.operator", qConditionsOperator); err != nil {
				return err
			}
		}
	}

	if o.ConditionsType != nil {

		// query param conditions.type
		var qrConditionsType string

		if o.ConditionsType != nil {
			qrConditionsType = *o.ConditionsType
		}
		qConditionsType := qrConditionsType
		if qConditionsType != "" {

			if err := r.SetQueryParam("conditions.type", qConditionsType); err != nil {
				return err
			}
		}
	}

	if o.ContinueOnFailure != nil {

		// query param continue_on_failure
		var qrContinueOnFailure bool

		if o.ContinueOnFailure != nil {
			qrContinueOnFailure = *o.ContinueOnFailure
		}
		qContinueOnFailure := swag.FormatBool(qrContinueOnFailure)
		if qContinueOnFailure != "" {

			if err := r.SetQueryParam("continue_on_failure", qContinueOnFailure); err != nil {
				return err
			}
		}
	}

	if o.CreateTime != nil {

		// query param create_time
		var qrCreateTime string

		if o.CreateTime != nil {
			qrCreateTime = *o.CreateTime
		}
		qCreateTime := qrCreateTime
		if qCreateTime != "" {

			if err := r.SetQueryParam("create_time", qCreateTime); err != nil {
				return err
			}
		}
	}

	if o.Description != nil {

		// query param description
		var qrDescription string

		if o.Description != nil {
			qrDescription = *o.Description
		}
		qDescription := qrDescription
		if qDescription != "" {

			if err := r.SetQueryParam("description", qDescription); err != nil {
				return err
			}
		}
	}

	if o.HasIssue != nil {

		// query param has_issue
		var qrHasIssue bool

		if o.HasIssue != nil {
			qrHasIssue = *o.HasIssue
		}
		qHasIssue := swag.FormatBool(qrHasIssue)
		if qHasIssue != "" {

			if err := r.SetQueryParam("has_issue", qHasIssue); err != nil {
				return err
			}
		}
	}

	if o.ImpactedFilesCount != nil {

		// query param impacted_files_count
		var qrImpactedFilesCount int64

		if o.ImpactedFilesCount != nil {
			qrImpactedFilesCount = *o.ImpactedFilesCount
		}
		qImpactedFilesCount := swag.FormatInt64(qrImpactedFilesCount)
		if qImpactedFilesCount != "" {

			if err := r.SetQueryParam("impacted_files_count", qImpactedFilesCount); err != nil {
				return err
			}
		}
	}
	if err := r.SetBodyParam(o.Info); err != nil {
		return err
	}

	if o.IssueTagsClassificationType != nil {

		// query param issue_tags.classification_type
		var qrIssueTagsClassificationType string

		if o.IssueTagsClassificationType != nil {
			qrIssueTagsClassificationType = *o.IssueTagsClassificationType
		}
		qIssueTagsClassificationType := qrIssueTagsClassificationType
		if qIssueTagsClassificationType != "" {

			if err := r.SetQueryParam("issue_tags.classification_type", qIssueTagsClassificationType); err != nil {
				return err
			}
		}
	}

	if o.IssueTagsTag != nil {

		// query param issue_tags.tag
		var qrIssueTagsTag string

		if o.IssueTagsTag != nil {
			qrIssueTagsTag = *o.IssueTagsTag
		}
		qIssueTagsTag := qrIssueTagsTag
		if qIssueTagsTag != "" {

			if err := r.SetQueryParam("issue_tags.tag", qIssueTagsTag); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SerialRecords != nil {

		// query param serial_records
		var qrSerialRecords bool

		if o.SerialRecords != nil {
			qrSerialRecords = *o.SerialRecords
		}
		qSerialRecords := swag.FormatBool(qrSerialRecords)
		if qSerialRecords != "" {

			if err := r.SetQueryParam("serial_records", qSerialRecords); err != nil {
				return err
			}
		}
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.UpdateTime != nil {

		// query param update_time
		var qrUpdateTime string

		if o.UpdateTime != nil {
			qrUpdateTime = *o.UpdateTime
		}
		qUpdateTime := qrUpdateTime
		if qUpdateTime != "" {

			if err := r.SetQueryParam("update_time", qUpdateTime); err != nil {
				return err
			}
		}
	}

	if o.UUID != nil {

		// query param uuid
		var qrUUID string

		if o.UUID != nil {
			qrUUID = *o.UUID
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if o.WorkspacesName != nil {

		// query param workspaces.name
		var qrWorkspacesName string

		if o.WorkspacesName != nil {
			qrWorkspacesName = *o.WorkspacesName
		}
		qWorkspacesName := qrWorkspacesName
		if qWorkspacesName != "" {

			if err := r.SetQueryParam("workspaces.name", qWorkspacesName); err != nil {
				return err
			}
		}
	}

	if o.WorkspacesUUID != nil {

		// query param workspaces.uuid
		var qrWorkspacesUUID string

		if o.WorkspacesUUID != nil {
			qrWorkspacesUUID = *o.WorkspacesUUID
		}
		qWorkspacesUUID := qrWorkspacesUUID
		if qWorkspacesUUID != "" {

			if err := r.SetQueryParam("workspaces.uuid", qWorkspacesUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
