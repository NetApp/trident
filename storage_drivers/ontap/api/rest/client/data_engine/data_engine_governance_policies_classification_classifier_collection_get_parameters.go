// Code generated by go-swagger; DO NOT EDIT.

package data_engine

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDataEngineGovernancePoliciesClassificationClassifierCollectionGetParams creates a new DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDataEngineGovernancePoliciesClassificationClassifierCollectionGetParams() *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams {
	return &DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDataEngineGovernancePoliciesClassificationClassifierCollectionGetParamsWithTimeout creates a new DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams object
// with the ability to set a timeout on a request.
func NewDataEngineGovernancePoliciesClassificationClassifierCollectionGetParamsWithTimeout(timeout time.Duration) *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams {
	return &DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams{
		timeout: timeout,
	}
}

// NewDataEngineGovernancePoliciesClassificationClassifierCollectionGetParamsWithContext creates a new DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams object
// with the ability to set a context for a request.
func NewDataEngineGovernancePoliciesClassificationClassifierCollectionGetParamsWithContext(ctx context.Context) *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams {
	return &DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams{
		Context: ctx,
	}
}

// NewDataEngineGovernancePoliciesClassificationClassifierCollectionGetParamsWithHTTPClient creates a new DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewDataEngineGovernancePoliciesClassificationClassifierCollectionGetParamsWithHTTPClient(client *http.Client) *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams {
	return &DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams{
		HTTPClient: client,
	}
}

/*
DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams contains all the parameters to send to the API endpoint

	for the data engine governance policies classification classifier collection get operation.

	Typically these are written to a http.Request.
*/
type DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams struct {

	/* CreateTime.

	   Filter by create_time
	*/
	CreateTime *string

	/* Custom.

	   Filter by custom
	*/
	Custom *bool

	/* Description.

	   Filter by description
	*/
	Description *string

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* Name.

	   Filter by name
	*/
	Name *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* State.

	   Filter by state
	*/
	State *string

	/* Tag.

	   Filter by tag
	*/
	Tag *string

	/* Type.

	   Filter by type
	*/
	Type *string

	/* UpdateTime.

	   Filter by update_time
	*/
	UpdateTime *string

	/* UUID.

	   Filter by uuid
	*/
	UUID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the data engine governance policies classification classifier collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) WithDefaults() *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the data engine governance policies classification classifier collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) WithTimeout(timeout time.Duration) *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) WithContext(ctx context.Context) *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) WithHTTPClient(client *http.Client) *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCreateTime adds the createTime to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) WithCreateTime(createTime *string) *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams {
	o.SetCreateTime(createTime)
	return o
}

// SetCreateTime adds the createTime to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) SetCreateTime(createTime *string) {
	o.CreateTime = createTime
}

// WithCustom adds the custom to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) WithCustom(custom *bool) *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams {
	o.SetCustom(custom)
	return o
}

// SetCustom adds the custom to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) SetCustom(custom *bool) {
	o.Custom = custom
}

// WithDescription adds the description to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) WithDescription(description *string) *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) SetDescription(description *string) {
	o.Description = description
}

// WithFields adds the fields to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) WithFields(fields []string) *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithMaxRecords adds the maxRecords to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) WithMaxRecords(maxRecords *int64) *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithName adds the name to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) WithName(name *string) *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) SetName(name *string) {
	o.Name = name
}

// WithOrderBy adds the orderBy to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) WithOrderBy(orderBy []string) *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithReturnRecords adds the returnRecords to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) WithReturnRecords(returnRecords *bool) *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) WithReturnTimeout(returnTimeout *int64) *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithState adds the state to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) WithState(state *string) *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) SetState(state *string) {
	o.State = state
}

// WithTag adds the tag to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) WithTag(tag *string) *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) SetTag(tag *string) {
	o.Tag = tag
}

// WithType adds the typeVar to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) WithType(typeVar *string) *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithUpdateTime adds the updateTime to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) WithUpdateTime(updateTime *string) *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams {
	o.SetUpdateTime(updateTime)
	return o
}

// SetUpdateTime adds the updateTime to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) SetUpdateTime(updateTime *string) {
	o.UpdateTime = updateTime
}

// WithUUID adds the uuid to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) WithUUID(uuid *string) *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the data engine governance policies classification classifier collection get params
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) SetUUID(uuid *string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CreateTime != nil {

		// query param create_time
		var qrCreateTime string

		if o.CreateTime != nil {
			qrCreateTime = *o.CreateTime
		}
		qCreateTime := qrCreateTime
		if qCreateTime != "" {

			if err := r.SetQueryParam("create_time", qCreateTime); err != nil {
				return err
			}
		}
	}

	if o.Custom != nil {

		// query param custom
		var qrCustom bool

		if o.Custom != nil {
			qrCustom = *o.Custom
		}
		qCustom := swag.FormatBool(qrCustom)
		if qCustom != "" {

			if err := r.SetQueryParam("custom", qCustom); err != nil {
				return err
			}
		}
	}

	if o.Description != nil {

		// query param description
		var qrDescription string

		if o.Description != nil {
			qrDescription = *o.Description
		}
		qDescription := qrDescription
		if qDescription != "" {

			if err := r.SetQueryParam("description", qDescription); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.Tag != nil {

		// query param tag
		var qrTag string

		if o.Tag != nil {
			qrTag = *o.Tag
		}
		qTag := qrTag
		if qTag != "" {

			if err := r.SetQueryParam("tag", qTag); err != nil {
				return err
			}
		}
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if o.UpdateTime != nil {

		// query param update_time
		var qrUpdateTime string

		if o.UpdateTime != nil {
			qrUpdateTime = *o.UpdateTime
		}
		qUpdateTime := qrUpdateTime
		if qUpdateTime != "" {

			if err := r.SetQueryParam("update_time", qUpdateTime); err != nil {
				return err
			}
		}
	}

	if o.UUID != nil {

		// query param uuid
		var qrUUID string

		if o.UUID != nil {
			qrUUID = *o.UUID
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamDataEngineGovernancePoliciesClassificationClassifierCollectionGet binds the parameter fields
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamDataEngineGovernancePoliciesClassificationClassifierCollectionGet binds the parameter order_by
func (o *DataEngineGovernancePoliciesClassificationClassifierCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
