// Code generated by go-swagger; DO NOT EDIT.

package dcn

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDcnClusterGetParams creates a new DcnClusterGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDcnClusterGetParams() *DcnClusterGetParams {
	return &DcnClusterGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDcnClusterGetParamsWithTimeout creates a new DcnClusterGetParams object
// with the ability to set a timeout on a request.
func NewDcnClusterGetParamsWithTimeout(timeout time.Duration) *DcnClusterGetParams {
	return &DcnClusterGetParams{
		timeout: timeout,
	}
}

// NewDcnClusterGetParamsWithContext creates a new DcnClusterGetParams object
// with the ability to set a context for a request.
func NewDcnClusterGetParamsWithContext(ctx context.Context) *DcnClusterGetParams {
	return &DcnClusterGetParams{
		Context: ctx,
	}
}

// NewDcnClusterGetParamsWithHTTPClient creates a new DcnClusterGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewDcnClusterGetParamsWithHTTPClient(client *http.Client) *DcnClusterGetParams {
	return &DcnClusterGetParams{
		HTTPClient: client,
	}
}

/*
DcnClusterGetParams contains all the parameters to send to the API endpoint

	for the dcn cluster get operation.

	Typically these are written to a http.Request.
*/
type DcnClusterGetParams struct {

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* NetworkPoolIPRangesEnd.

	   Filter by network_pool.ip_ranges.end
	*/
	NetworkPoolIPRangesEnd *string

	/* NetworkPoolIPRangesFamily.

	   Filter by network_pool.ip_ranges.family
	*/
	NetworkPoolIPRangesFamily *string

	/* NetworkPoolIPRangesStart.

	   Filter by network_pool.ip_ranges.start
	*/
	NetworkPoolIPRangesStart *string

	/* NetworkPoolSubnetAddress.

	   Filter by network_pool.subnet.address
	*/
	NetworkPoolSubnetAddress *string

	/* NetworkPoolSubnetFamily.

	   Filter by network_pool.subnet.family
	*/
	NetworkPoolSubnetFamily *string

	/* NetworkPoolSubnetNetmask.

	   Filter by network_pool.subnet.netmask
	*/
	NetworkPoolSubnetNetmask *string

	/* NodesDate.

	   Filter by nodes.date
	*/
	NodesDate *string

	/* NodesErrorCount.

	   Filter by nodes.error.count
	*/
	NodesErrorCount *int64

	/* NodesErrorMessage.

	   Filter by nodes.error.message
	*/
	NodesErrorMessage *string

	/* NodesErrorUnitType.

	   Filter by nodes.error.unit_type
	*/
	NodesErrorUnitType *string

	/* NodesHardwareBoard.

	   Filter by nodes.hardware.board
	*/
	NodesHardwareBoard *string

	/* NodesHardwareCPUCount.

	   Filter by nodes.hardware.cpu.count
	*/
	NodesHardwareCPUCount *int64

	/* NodesHardwareCPUFirmwareRelease.

	   Filter by nodes.hardware.cpu.firmware_release
	*/
	NodesHardwareCPUFirmwareRelease *string

	/* NodesHardwareCPUMemorySize.

	   Filter by nodes.hardware.cpu.memory_size
	*/
	NodesHardwareCPUMemorySize *int64

	/* NodesHardwareCPUProcessor.

	   Filter by nodes.hardware.cpu.processor
	*/
	NodesHardwareCPUProcessor *string

	/* NodesHardwareFrusCount.

	   Filter by nodes.hardware.frus.count
	*/
	NodesHardwareFrusCount *int64

	/* NodesHardwareFrusFruType.

	   Filter by nodes.hardware.frus.fru_type
	*/
	NodesHardwareFrusFruType *string

	/* NodesHardwareFrusID.

	   Filter by nodes.hardware.frus.id
	*/
	NodesHardwareFrusID *string

	/* NodesHardwareGpuCount.

	   Filter by nodes.hardware.gpu.count
	*/
	NodesHardwareGpuCount *int64

	/* NodesHardwareGpuFirmwareRelease.

	   Filter by nodes.hardware.gpu.firmware_release
	*/
	NodesHardwareGpuFirmwareRelease *string

	/* NodesHardwareGpuMemorySize.

	   Filter by nodes.hardware.gpu.memory_size
	*/
	NodesHardwareGpuMemorySize *int64

	/* NodesHardwareGpuProcessor.

	   Filter by nodes.hardware.gpu.processor
	*/
	NodesHardwareGpuProcessor *string

	/* NodesLocation.

	   Filter by nodes.location
	*/
	NodesLocation *string

	/* NodesMembership.

	   Filter by nodes.membership
	*/
	NodesMembership *string

	/* NodesMetricCPUMemoryUsed.

	   Filter by nodes.metric.cpu.memory_used
	*/
	NodesMetricCPUMemoryUsed *int64

	/* NodesMetricCPUProcessorUtilization.

	   Filter by nodes.metric.cpu.processor_utilization
	*/
	NodesMetricCPUProcessorUtilization *int64

	/* NodesMetricDuration.

	   Filter by nodes.metric.duration
	*/
	NodesMetricDuration *string

	/* NodesMetricGpuMemoryUsed.

	   Filter by nodes.metric.gpu.memory_used
	*/
	NodesMetricGpuMemoryUsed *int64

	/* NodesMetricGpuProcessorUtilization.

	   Filter by nodes.metric.gpu.processor_utilization
	*/
	NodesMetricGpuProcessorUtilization *int64

	/* NodesMetricStatus.

	   Filter by nodes.metric.status
	*/
	NodesMetricStatus *string

	/* NodesMetricTimestamp.

	   Filter by nodes.metric.timestamp
	*/
	NodesMetricTimestamp *string

	/* NodesMetricUUID.

	   Filter by nodes.metric.uuid
	*/
	NodesMetricUUID *string

	/* NodesModel.

	   Filter by nodes.model
	*/
	NodesModel *string

	/* NodesName.

	   Filter by nodes.name
	*/
	NodesName *string

	/* NodesNetworkExternalInterfaceMacAddress.

	   Filter by nodes.network.external_interface.mac_address
	*/
	NodesNetworkExternalInterfaceMacAddress *string

	/* NodesNetworkExternalInterfaceMtu.

	   Filter by nodes.network.external_interface.mtu
	*/
	NodesNetworkExternalInterfaceMtu *int64

	/* NodesNetworkExternalInterfaceName.

	   Filter by nodes.network.external_interface.name
	*/
	NodesNetworkExternalInterfaceName *string

	/* NodesOwner.

	   Filter by nodes.owner
	*/
	NodesOwner *string

	/* NodesSerialNumber.

	   Filter by nodes.serial_number
	*/
	NodesSerialNumber *string

	/* NodesSoftwareCompatibility.

	   Filter by nodes.software.compatibility
	*/
	NodesSoftwareCompatibility *string

	/* NodesSoftwareVersionFull.

	   Filter by nodes.software.version.full
	*/
	NodesSoftwareVersionFull *string

	/* NodesSoftwareVersionGeneration.

	   Filter by nodes.software.version.generation
	*/
	NodesSoftwareVersionGeneration *int64

	/* NodesSoftwareVersionMajor.

	   Filter by nodes.software.version.major
	*/
	NodesSoftwareVersionMajor *int64

	/* NodesSoftwareVersionMinor.

	   Filter by nodes.software.version.minor
	*/
	NodesSoftwareVersionMinor *int64

	/* NodesSoftwareVersionPatch.

	   Filter by nodes.software.version.patch
	*/
	NodesSoftwareVersionPatch *string

	/* NodesState.

	   Filter by nodes.state
	*/
	NodesState *string

	/* NodesStatisticsCPUMemoryUsed.

	   Filter by nodes.statistics.cpu.memory_used
	*/
	NodesStatisticsCPUMemoryUsed *int64

	/* NodesStatisticsCPUProcessorUtilizationBase.

	   Filter by nodes.statistics.cpu.processor_utilization_base
	*/
	NodesStatisticsCPUProcessorUtilizationBase *int64

	/* NodesStatisticsCPUProcessorUtilizationRaw.

	   Filter by nodes.statistics.cpu.processor_utilization_raw
	*/
	NodesStatisticsCPUProcessorUtilizationRaw *int64

	/* NodesStatisticsGpuMemoryUsed.

	   Filter by nodes.statistics.gpu.memory_used
	*/
	NodesStatisticsGpuMemoryUsed *int64

	/* NodesStatisticsGpuProcessorUtilizationBase.

	   Filter by nodes.statistics.gpu.processor_utilization_base
	*/
	NodesStatisticsGpuProcessorUtilizationBase *int64

	/* NodesStatisticsGpuProcessorUtilizationRaw.

	   Filter by nodes.statistics.gpu.processor_utilization_raw
	*/
	NodesStatisticsGpuProcessorUtilizationRaw *int64

	/* NodesStatisticsStatus.

	   Filter by nodes.statistics.status
	*/
	NodesStatisticsStatus *string

	/* NodesStatisticsTimestamp.

	   Filter by nodes.statistics.timestamp
	*/
	NodesStatisticsTimestamp *string

	/* NodesSystemID.

	   Filter by nodes.system_id
	*/
	NodesSystemID *string

	/* NodesUptime.

	   Filter by nodes.uptime
	*/
	NodesUptime *int64

	/* NodesUUID.

	   Filter by nodes.uuid
	*/
	NodesUUID *string

	/* NodesVendorSerialNumber.

	   Filter by nodes.vendor_serial_number
	*/
	NodesVendorSerialNumber *string

	/* ServiceIPAddress.

	   Filter by service_ip.address
	*/
	ServiceIPAddress *string

	/* ServiceIPGateway.

	   Filter by service_ip.gateway
	*/
	ServiceIPGateway *string

	/* ServiceIPNetmask.

	   Filter by service_ip.netmask
	*/
	ServiceIPNetmask *string

	/* SoftwareVersionFull.

	   Filter by software.version.full
	*/
	SoftwareVersionFull *string

	/* SoftwareVersionGeneration.

	   Filter by software.version.generation
	*/
	SoftwareVersionGeneration *int64

	/* SoftwareVersionMajor.

	   Filter by software.version.major
	*/
	SoftwareVersionMajor *int64

	/* SoftwareVersionMinor.

	   Filter by software.version.minor
	*/
	SoftwareVersionMinor *int64

	/* SoftwareVersionPatch.

	   Filter by software.version.patch
	*/
	SoftwareVersionPatch *string

	/* UUID.

	   Filter by uuid
	*/
	UUID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the dcn cluster get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DcnClusterGetParams) WithDefaults() *DcnClusterGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the dcn cluster get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DcnClusterGetParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the dcn cluster get params
func (o *DcnClusterGetParams) WithTimeout(timeout time.Duration) *DcnClusterGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the dcn cluster get params
func (o *DcnClusterGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the dcn cluster get params
func (o *DcnClusterGetParams) WithContext(ctx context.Context) *DcnClusterGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the dcn cluster get params
func (o *DcnClusterGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the dcn cluster get params
func (o *DcnClusterGetParams) WithHTTPClient(client *http.Client) *DcnClusterGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the dcn cluster get params
func (o *DcnClusterGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFields adds the fields to the dcn cluster get params
func (o *DcnClusterGetParams) WithFields(fields []string) *DcnClusterGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the dcn cluster get params
func (o *DcnClusterGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithNetworkPoolIPRangesEnd adds the networkPoolIPRangesEnd to the dcn cluster get params
func (o *DcnClusterGetParams) WithNetworkPoolIPRangesEnd(networkPoolIPRangesEnd *string) *DcnClusterGetParams {
	o.SetNetworkPoolIPRangesEnd(networkPoolIPRangesEnd)
	return o
}

// SetNetworkPoolIPRangesEnd adds the networkPoolIpRangesEnd to the dcn cluster get params
func (o *DcnClusterGetParams) SetNetworkPoolIPRangesEnd(networkPoolIPRangesEnd *string) {
	o.NetworkPoolIPRangesEnd = networkPoolIPRangesEnd
}

// WithNetworkPoolIPRangesFamily adds the networkPoolIPRangesFamily to the dcn cluster get params
func (o *DcnClusterGetParams) WithNetworkPoolIPRangesFamily(networkPoolIPRangesFamily *string) *DcnClusterGetParams {
	o.SetNetworkPoolIPRangesFamily(networkPoolIPRangesFamily)
	return o
}

// SetNetworkPoolIPRangesFamily adds the networkPoolIpRangesFamily to the dcn cluster get params
func (o *DcnClusterGetParams) SetNetworkPoolIPRangesFamily(networkPoolIPRangesFamily *string) {
	o.NetworkPoolIPRangesFamily = networkPoolIPRangesFamily
}

// WithNetworkPoolIPRangesStart adds the networkPoolIPRangesStart to the dcn cluster get params
func (o *DcnClusterGetParams) WithNetworkPoolIPRangesStart(networkPoolIPRangesStart *string) *DcnClusterGetParams {
	o.SetNetworkPoolIPRangesStart(networkPoolIPRangesStart)
	return o
}

// SetNetworkPoolIPRangesStart adds the networkPoolIpRangesStart to the dcn cluster get params
func (o *DcnClusterGetParams) SetNetworkPoolIPRangesStart(networkPoolIPRangesStart *string) {
	o.NetworkPoolIPRangesStart = networkPoolIPRangesStart
}

// WithNetworkPoolSubnetAddress adds the networkPoolSubnetAddress to the dcn cluster get params
func (o *DcnClusterGetParams) WithNetworkPoolSubnetAddress(networkPoolSubnetAddress *string) *DcnClusterGetParams {
	o.SetNetworkPoolSubnetAddress(networkPoolSubnetAddress)
	return o
}

// SetNetworkPoolSubnetAddress adds the networkPoolSubnetAddress to the dcn cluster get params
func (o *DcnClusterGetParams) SetNetworkPoolSubnetAddress(networkPoolSubnetAddress *string) {
	o.NetworkPoolSubnetAddress = networkPoolSubnetAddress
}

// WithNetworkPoolSubnetFamily adds the networkPoolSubnetFamily to the dcn cluster get params
func (o *DcnClusterGetParams) WithNetworkPoolSubnetFamily(networkPoolSubnetFamily *string) *DcnClusterGetParams {
	o.SetNetworkPoolSubnetFamily(networkPoolSubnetFamily)
	return o
}

// SetNetworkPoolSubnetFamily adds the networkPoolSubnetFamily to the dcn cluster get params
func (o *DcnClusterGetParams) SetNetworkPoolSubnetFamily(networkPoolSubnetFamily *string) {
	o.NetworkPoolSubnetFamily = networkPoolSubnetFamily
}

// WithNetworkPoolSubnetNetmask adds the networkPoolSubnetNetmask to the dcn cluster get params
func (o *DcnClusterGetParams) WithNetworkPoolSubnetNetmask(networkPoolSubnetNetmask *string) *DcnClusterGetParams {
	o.SetNetworkPoolSubnetNetmask(networkPoolSubnetNetmask)
	return o
}

// SetNetworkPoolSubnetNetmask adds the networkPoolSubnetNetmask to the dcn cluster get params
func (o *DcnClusterGetParams) SetNetworkPoolSubnetNetmask(networkPoolSubnetNetmask *string) {
	o.NetworkPoolSubnetNetmask = networkPoolSubnetNetmask
}

// WithNodesDate adds the nodesDate to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesDate(nodesDate *string) *DcnClusterGetParams {
	o.SetNodesDate(nodesDate)
	return o
}

// SetNodesDate adds the nodesDate to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesDate(nodesDate *string) {
	o.NodesDate = nodesDate
}

// WithNodesErrorCount adds the nodesErrorCount to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesErrorCount(nodesErrorCount *int64) *DcnClusterGetParams {
	o.SetNodesErrorCount(nodesErrorCount)
	return o
}

// SetNodesErrorCount adds the nodesErrorCount to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesErrorCount(nodesErrorCount *int64) {
	o.NodesErrorCount = nodesErrorCount
}

// WithNodesErrorMessage adds the nodesErrorMessage to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesErrorMessage(nodesErrorMessage *string) *DcnClusterGetParams {
	o.SetNodesErrorMessage(nodesErrorMessage)
	return o
}

// SetNodesErrorMessage adds the nodesErrorMessage to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesErrorMessage(nodesErrorMessage *string) {
	o.NodesErrorMessage = nodesErrorMessage
}

// WithNodesErrorUnitType adds the nodesErrorUnitType to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesErrorUnitType(nodesErrorUnitType *string) *DcnClusterGetParams {
	o.SetNodesErrorUnitType(nodesErrorUnitType)
	return o
}

// SetNodesErrorUnitType adds the nodesErrorUnitType to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesErrorUnitType(nodesErrorUnitType *string) {
	o.NodesErrorUnitType = nodesErrorUnitType
}

// WithNodesHardwareBoard adds the nodesHardwareBoard to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesHardwareBoard(nodesHardwareBoard *string) *DcnClusterGetParams {
	o.SetNodesHardwareBoard(nodesHardwareBoard)
	return o
}

// SetNodesHardwareBoard adds the nodesHardwareBoard to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesHardwareBoard(nodesHardwareBoard *string) {
	o.NodesHardwareBoard = nodesHardwareBoard
}

// WithNodesHardwareCPUCount adds the nodesHardwareCPUCount to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesHardwareCPUCount(nodesHardwareCPUCount *int64) *DcnClusterGetParams {
	o.SetNodesHardwareCPUCount(nodesHardwareCPUCount)
	return o
}

// SetNodesHardwareCPUCount adds the nodesHardwareCpuCount to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesHardwareCPUCount(nodesHardwareCPUCount *int64) {
	o.NodesHardwareCPUCount = nodesHardwareCPUCount
}

// WithNodesHardwareCPUFirmwareRelease adds the nodesHardwareCPUFirmwareRelease to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesHardwareCPUFirmwareRelease(nodesHardwareCPUFirmwareRelease *string) *DcnClusterGetParams {
	o.SetNodesHardwareCPUFirmwareRelease(nodesHardwareCPUFirmwareRelease)
	return o
}

// SetNodesHardwareCPUFirmwareRelease adds the nodesHardwareCpuFirmwareRelease to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesHardwareCPUFirmwareRelease(nodesHardwareCPUFirmwareRelease *string) {
	o.NodesHardwareCPUFirmwareRelease = nodesHardwareCPUFirmwareRelease
}

// WithNodesHardwareCPUMemorySize adds the nodesHardwareCPUMemorySize to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesHardwareCPUMemorySize(nodesHardwareCPUMemorySize *int64) *DcnClusterGetParams {
	o.SetNodesHardwareCPUMemorySize(nodesHardwareCPUMemorySize)
	return o
}

// SetNodesHardwareCPUMemorySize adds the nodesHardwareCpuMemorySize to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesHardwareCPUMemorySize(nodesHardwareCPUMemorySize *int64) {
	o.NodesHardwareCPUMemorySize = nodesHardwareCPUMemorySize
}

// WithNodesHardwareCPUProcessor adds the nodesHardwareCPUProcessor to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesHardwareCPUProcessor(nodesHardwareCPUProcessor *string) *DcnClusterGetParams {
	o.SetNodesHardwareCPUProcessor(nodesHardwareCPUProcessor)
	return o
}

// SetNodesHardwareCPUProcessor adds the nodesHardwareCpuProcessor to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesHardwareCPUProcessor(nodesHardwareCPUProcessor *string) {
	o.NodesHardwareCPUProcessor = nodesHardwareCPUProcessor
}

// WithNodesHardwareFrusCount adds the nodesHardwareFrusCount to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesHardwareFrusCount(nodesHardwareFrusCount *int64) *DcnClusterGetParams {
	o.SetNodesHardwareFrusCount(nodesHardwareFrusCount)
	return o
}

// SetNodesHardwareFrusCount adds the nodesHardwareFrusCount to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesHardwareFrusCount(nodesHardwareFrusCount *int64) {
	o.NodesHardwareFrusCount = nodesHardwareFrusCount
}

// WithNodesHardwareFrusFruType adds the nodesHardwareFrusFruType to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesHardwareFrusFruType(nodesHardwareFrusFruType *string) *DcnClusterGetParams {
	o.SetNodesHardwareFrusFruType(nodesHardwareFrusFruType)
	return o
}

// SetNodesHardwareFrusFruType adds the nodesHardwareFrusFruType to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesHardwareFrusFruType(nodesHardwareFrusFruType *string) {
	o.NodesHardwareFrusFruType = nodesHardwareFrusFruType
}

// WithNodesHardwareFrusID adds the nodesHardwareFrusID to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesHardwareFrusID(nodesHardwareFrusID *string) *DcnClusterGetParams {
	o.SetNodesHardwareFrusID(nodesHardwareFrusID)
	return o
}

// SetNodesHardwareFrusID adds the nodesHardwareFrusId to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesHardwareFrusID(nodesHardwareFrusID *string) {
	o.NodesHardwareFrusID = nodesHardwareFrusID
}

// WithNodesHardwareGpuCount adds the nodesHardwareGpuCount to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesHardwareGpuCount(nodesHardwareGpuCount *int64) *DcnClusterGetParams {
	o.SetNodesHardwareGpuCount(nodesHardwareGpuCount)
	return o
}

// SetNodesHardwareGpuCount adds the nodesHardwareGpuCount to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesHardwareGpuCount(nodesHardwareGpuCount *int64) {
	o.NodesHardwareGpuCount = nodesHardwareGpuCount
}

// WithNodesHardwareGpuFirmwareRelease adds the nodesHardwareGpuFirmwareRelease to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesHardwareGpuFirmwareRelease(nodesHardwareGpuFirmwareRelease *string) *DcnClusterGetParams {
	o.SetNodesHardwareGpuFirmwareRelease(nodesHardwareGpuFirmwareRelease)
	return o
}

// SetNodesHardwareGpuFirmwareRelease adds the nodesHardwareGpuFirmwareRelease to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesHardwareGpuFirmwareRelease(nodesHardwareGpuFirmwareRelease *string) {
	o.NodesHardwareGpuFirmwareRelease = nodesHardwareGpuFirmwareRelease
}

// WithNodesHardwareGpuMemorySize adds the nodesHardwareGpuMemorySize to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesHardwareGpuMemorySize(nodesHardwareGpuMemorySize *int64) *DcnClusterGetParams {
	o.SetNodesHardwareGpuMemorySize(nodesHardwareGpuMemorySize)
	return o
}

// SetNodesHardwareGpuMemorySize adds the nodesHardwareGpuMemorySize to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesHardwareGpuMemorySize(nodesHardwareGpuMemorySize *int64) {
	o.NodesHardwareGpuMemorySize = nodesHardwareGpuMemorySize
}

// WithNodesHardwareGpuProcessor adds the nodesHardwareGpuProcessor to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesHardwareGpuProcessor(nodesHardwareGpuProcessor *string) *DcnClusterGetParams {
	o.SetNodesHardwareGpuProcessor(nodesHardwareGpuProcessor)
	return o
}

// SetNodesHardwareGpuProcessor adds the nodesHardwareGpuProcessor to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesHardwareGpuProcessor(nodesHardwareGpuProcessor *string) {
	o.NodesHardwareGpuProcessor = nodesHardwareGpuProcessor
}

// WithNodesLocation adds the nodesLocation to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesLocation(nodesLocation *string) *DcnClusterGetParams {
	o.SetNodesLocation(nodesLocation)
	return o
}

// SetNodesLocation adds the nodesLocation to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesLocation(nodesLocation *string) {
	o.NodesLocation = nodesLocation
}

// WithNodesMembership adds the nodesMembership to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesMembership(nodesMembership *string) *DcnClusterGetParams {
	o.SetNodesMembership(nodesMembership)
	return o
}

// SetNodesMembership adds the nodesMembership to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesMembership(nodesMembership *string) {
	o.NodesMembership = nodesMembership
}

// WithNodesMetricCPUMemoryUsed adds the nodesMetricCPUMemoryUsed to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesMetricCPUMemoryUsed(nodesMetricCPUMemoryUsed *int64) *DcnClusterGetParams {
	o.SetNodesMetricCPUMemoryUsed(nodesMetricCPUMemoryUsed)
	return o
}

// SetNodesMetricCPUMemoryUsed adds the nodesMetricCpuMemoryUsed to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesMetricCPUMemoryUsed(nodesMetricCPUMemoryUsed *int64) {
	o.NodesMetricCPUMemoryUsed = nodesMetricCPUMemoryUsed
}

// WithNodesMetricCPUProcessorUtilization adds the nodesMetricCPUProcessorUtilization to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesMetricCPUProcessorUtilization(nodesMetricCPUProcessorUtilization *int64) *DcnClusterGetParams {
	o.SetNodesMetricCPUProcessorUtilization(nodesMetricCPUProcessorUtilization)
	return o
}

// SetNodesMetricCPUProcessorUtilization adds the nodesMetricCpuProcessorUtilization to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesMetricCPUProcessorUtilization(nodesMetricCPUProcessorUtilization *int64) {
	o.NodesMetricCPUProcessorUtilization = nodesMetricCPUProcessorUtilization
}

// WithNodesMetricDuration adds the nodesMetricDuration to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesMetricDuration(nodesMetricDuration *string) *DcnClusterGetParams {
	o.SetNodesMetricDuration(nodesMetricDuration)
	return o
}

// SetNodesMetricDuration adds the nodesMetricDuration to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesMetricDuration(nodesMetricDuration *string) {
	o.NodesMetricDuration = nodesMetricDuration
}

// WithNodesMetricGpuMemoryUsed adds the nodesMetricGpuMemoryUsed to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesMetricGpuMemoryUsed(nodesMetricGpuMemoryUsed *int64) *DcnClusterGetParams {
	o.SetNodesMetricGpuMemoryUsed(nodesMetricGpuMemoryUsed)
	return o
}

// SetNodesMetricGpuMemoryUsed adds the nodesMetricGpuMemoryUsed to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesMetricGpuMemoryUsed(nodesMetricGpuMemoryUsed *int64) {
	o.NodesMetricGpuMemoryUsed = nodesMetricGpuMemoryUsed
}

// WithNodesMetricGpuProcessorUtilization adds the nodesMetricGpuProcessorUtilization to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesMetricGpuProcessorUtilization(nodesMetricGpuProcessorUtilization *int64) *DcnClusterGetParams {
	o.SetNodesMetricGpuProcessorUtilization(nodesMetricGpuProcessorUtilization)
	return o
}

// SetNodesMetricGpuProcessorUtilization adds the nodesMetricGpuProcessorUtilization to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesMetricGpuProcessorUtilization(nodesMetricGpuProcessorUtilization *int64) {
	o.NodesMetricGpuProcessorUtilization = nodesMetricGpuProcessorUtilization
}

// WithNodesMetricStatus adds the nodesMetricStatus to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesMetricStatus(nodesMetricStatus *string) *DcnClusterGetParams {
	o.SetNodesMetricStatus(nodesMetricStatus)
	return o
}

// SetNodesMetricStatus adds the nodesMetricStatus to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesMetricStatus(nodesMetricStatus *string) {
	o.NodesMetricStatus = nodesMetricStatus
}

// WithNodesMetricTimestamp adds the nodesMetricTimestamp to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesMetricTimestamp(nodesMetricTimestamp *string) *DcnClusterGetParams {
	o.SetNodesMetricTimestamp(nodesMetricTimestamp)
	return o
}

// SetNodesMetricTimestamp adds the nodesMetricTimestamp to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesMetricTimestamp(nodesMetricTimestamp *string) {
	o.NodesMetricTimestamp = nodesMetricTimestamp
}

// WithNodesMetricUUID adds the nodesMetricUUID to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesMetricUUID(nodesMetricUUID *string) *DcnClusterGetParams {
	o.SetNodesMetricUUID(nodesMetricUUID)
	return o
}

// SetNodesMetricUUID adds the nodesMetricUuid to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesMetricUUID(nodesMetricUUID *string) {
	o.NodesMetricUUID = nodesMetricUUID
}

// WithNodesModel adds the nodesModel to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesModel(nodesModel *string) *DcnClusterGetParams {
	o.SetNodesModel(nodesModel)
	return o
}

// SetNodesModel adds the nodesModel to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesModel(nodesModel *string) {
	o.NodesModel = nodesModel
}

// WithNodesName adds the nodesName to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesName(nodesName *string) *DcnClusterGetParams {
	o.SetNodesName(nodesName)
	return o
}

// SetNodesName adds the nodesName to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesName(nodesName *string) {
	o.NodesName = nodesName
}

// WithNodesNetworkExternalInterfaceMacAddress adds the nodesNetworkExternalInterfaceMacAddress to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesNetworkExternalInterfaceMacAddress(nodesNetworkExternalInterfaceMacAddress *string) *DcnClusterGetParams {
	o.SetNodesNetworkExternalInterfaceMacAddress(nodesNetworkExternalInterfaceMacAddress)
	return o
}

// SetNodesNetworkExternalInterfaceMacAddress adds the nodesNetworkExternalInterfaceMacAddress to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesNetworkExternalInterfaceMacAddress(nodesNetworkExternalInterfaceMacAddress *string) {
	o.NodesNetworkExternalInterfaceMacAddress = nodesNetworkExternalInterfaceMacAddress
}

// WithNodesNetworkExternalInterfaceMtu adds the nodesNetworkExternalInterfaceMtu to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesNetworkExternalInterfaceMtu(nodesNetworkExternalInterfaceMtu *int64) *DcnClusterGetParams {
	o.SetNodesNetworkExternalInterfaceMtu(nodesNetworkExternalInterfaceMtu)
	return o
}

// SetNodesNetworkExternalInterfaceMtu adds the nodesNetworkExternalInterfaceMtu to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesNetworkExternalInterfaceMtu(nodesNetworkExternalInterfaceMtu *int64) {
	o.NodesNetworkExternalInterfaceMtu = nodesNetworkExternalInterfaceMtu
}

// WithNodesNetworkExternalInterfaceName adds the nodesNetworkExternalInterfaceName to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesNetworkExternalInterfaceName(nodesNetworkExternalInterfaceName *string) *DcnClusterGetParams {
	o.SetNodesNetworkExternalInterfaceName(nodesNetworkExternalInterfaceName)
	return o
}

// SetNodesNetworkExternalInterfaceName adds the nodesNetworkExternalInterfaceName to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesNetworkExternalInterfaceName(nodesNetworkExternalInterfaceName *string) {
	o.NodesNetworkExternalInterfaceName = nodesNetworkExternalInterfaceName
}

// WithNodesOwner adds the nodesOwner to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesOwner(nodesOwner *string) *DcnClusterGetParams {
	o.SetNodesOwner(nodesOwner)
	return o
}

// SetNodesOwner adds the nodesOwner to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesOwner(nodesOwner *string) {
	o.NodesOwner = nodesOwner
}

// WithNodesSerialNumber adds the nodesSerialNumber to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesSerialNumber(nodesSerialNumber *string) *DcnClusterGetParams {
	o.SetNodesSerialNumber(nodesSerialNumber)
	return o
}

// SetNodesSerialNumber adds the nodesSerialNumber to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesSerialNumber(nodesSerialNumber *string) {
	o.NodesSerialNumber = nodesSerialNumber
}

// WithNodesSoftwareCompatibility adds the nodesSoftwareCompatibility to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesSoftwareCompatibility(nodesSoftwareCompatibility *string) *DcnClusterGetParams {
	o.SetNodesSoftwareCompatibility(nodesSoftwareCompatibility)
	return o
}

// SetNodesSoftwareCompatibility adds the nodesSoftwareCompatibility to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesSoftwareCompatibility(nodesSoftwareCompatibility *string) {
	o.NodesSoftwareCompatibility = nodesSoftwareCompatibility
}

// WithNodesSoftwareVersionFull adds the nodesSoftwareVersionFull to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesSoftwareVersionFull(nodesSoftwareVersionFull *string) *DcnClusterGetParams {
	o.SetNodesSoftwareVersionFull(nodesSoftwareVersionFull)
	return o
}

// SetNodesSoftwareVersionFull adds the nodesSoftwareVersionFull to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesSoftwareVersionFull(nodesSoftwareVersionFull *string) {
	o.NodesSoftwareVersionFull = nodesSoftwareVersionFull
}

// WithNodesSoftwareVersionGeneration adds the nodesSoftwareVersionGeneration to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesSoftwareVersionGeneration(nodesSoftwareVersionGeneration *int64) *DcnClusterGetParams {
	o.SetNodesSoftwareVersionGeneration(nodesSoftwareVersionGeneration)
	return o
}

// SetNodesSoftwareVersionGeneration adds the nodesSoftwareVersionGeneration to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesSoftwareVersionGeneration(nodesSoftwareVersionGeneration *int64) {
	o.NodesSoftwareVersionGeneration = nodesSoftwareVersionGeneration
}

// WithNodesSoftwareVersionMajor adds the nodesSoftwareVersionMajor to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesSoftwareVersionMajor(nodesSoftwareVersionMajor *int64) *DcnClusterGetParams {
	o.SetNodesSoftwareVersionMajor(nodesSoftwareVersionMajor)
	return o
}

// SetNodesSoftwareVersionMajor adds the nodesSoftwareVersionMajor to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesSoftwareVersionMajor(nodesSoftwareVersionMajor *int64) {
	o.NodesSoftwareVersionMajor = nodesSoftwareVersionMajor
}

// WithNodesSoftwareVersionMinor adds the nodesSoftwareVersionMinor to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesSoftwareVersionMinor(nodesSoftwareVersionMinor *int64) *DcnClusterGetParams {
	o.SetNodesSoftwareVersionMinor(nodesSoftwareVersionMinor)
	return o
}

// SetNodesSoftwareVersionMinor adds the nodesSoftwareVersionMinor to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesSoftwareVersionMinor(nodesSoftwareVersionMinor *int64) {
	o.NodesSoftwareVersionMinor = nodesSoftwareVersionMinor
}

// WithNodesSoftwareVersionPatch adds the nodesSoftwareVersionPatch to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesSoftwareVersionPatch(nodesSoftwareVersionPatch *string) *DcnClusterGetParams {
	o.SetNodesSoftwareVersionPatch(nodesSoftwareVersionPatch)
	return o
}

// SetNodesSoftwareVersionPatch adds the nodesSoftwareVersionPatch to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesSoftwareVersionPatch(nodesSoftwareVersionPatch *string) {
	o.NodesSoftwareVersionPatch = nodesSoftwareVersionPatch
}

// WithNodesState adds the nodesState to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesState(nodesState *string) *DcnClusterGetParams {
	o.SetNodesState(nodesState)
	return o
}

// SetNodesState adds the nodesState to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesState(nodesState *string) {
	o.NodesState = nodesState
}

// WithNodesStatisticsCPUMemoryUsed adds the nodesStatisticsCPUMemoryUsed to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesStatisticsCPUMemoryUsed(nodesStatisticsCPUMemoryUsed *int64) *DcnClusterGetParams {
	o.SetNodesStatisticsCPUMemoryUsed(nodesStatisticsCPUMemoryUsed)
	return o
}

// SetNodesStatisticsCPUMemoryUsed adds the nodesStatisticsCpuMemoryUsed to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesStatisticsCPUMemoryUsed(nodesStatisticsCPUMemoryUsed *int64) {
	o.NodesStatisticsCPUMemoryUsed = nodesStatisticsCPUMemoryUsed
}

// WithNodesStatisticsCPUProcessorUtilizationBase adds the nodesStatisticsCPUProcessorUtilizationBase to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesStatisticsCPUProcessorUtilizationBase(nodesStatisticsCPUProcessorUtilizationBase *int64) *DcnClusterGetParams {
	o.SetNodesStatisticsCPUProcessorUtilizationBase(nodesStatisticsCPUProcessorUtilizationBase)
	return o
}

// SetNodesStatisticsCPUProcessorUtilizationBase adds the nodesStatisticsCpuProcessorUtilizationBase to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesStatisticsCPUProcessorUtilizationBase(nodesStatisticsCPUProcessorUtilizationBase *int64) {
	o.NodesStatisticsCPUProcessorUtilizationBase = nodesStatisticsCPUProcessorUtilizationBase
}

// WithNodesStatisticsCPUProcessorUtilizationRaw adds the nodesStatisticsCPUProcessorUtilizationRaw to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesStatisticsCPUProcessorUtilizationRaw(nodesStatisticsCPUProcessorUtilizationRaw *int64) *DcnClusterGetParams {
	o.SetNodesStatisticsCPUProcessorUtilizationRaw(nodesStatisticsCPUProcessorUtilizationRaw)
	return o
}

// SetNodesStatisticsCPUProcessorUtilizationRaw adds the nodesStatisticsCpuProcessorUtilizationRaw to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesStatisticsCPUProcessorUtilizationRaw(nodesStatisticsCPUProcessorUtilizationRaw *int64) {
	o.NodesStatisticsCPUProcessorUtilizationRaw = nodesStatisticsCPUProcessorUtilizationRaw
}

// WithNodesStatisticsGpuMemoryUsed adds the nodesStatisticsGpuMemoryUsed to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesStatisticsGpuMemoryUsed(nodesStatisticsGpuMemoryUsed *int64) *DcnClusterGetParams {
	o.SetNodesStatisticsGpuMemoryUsed(nodesStatisticsGpuMemoryUsed)
	return o
}

// SetNodesStatisticsGpuMemoryUsed adds the nodesStatisticsGpuMemoryUsed to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesStatisticsGpuMemoryUsed(nodesStatisticsGpuMemoryUsed *int64) {
	o.NodesStatisticsGpuMemoryUsed = nodesStatisticsGpuMemoryUsed
}

// WithNodesStatisticsGpuProcessorUtilizationBase adds the nodesStatisticsGpuProcessorUtilizationBase to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesStatisticsGpuProcessorUtilizationBase(nodesStatisticsGpuProcessorUtilizationBase *int64) *DcnClusterGetParams {
	o.SetNodesStatisticsGpuProcessorUtilizationBase(nodesStatisticsGpuProcessorUtilizationBase)
	return o
}

// SetNodesStatisticsGpuProcessorUtilizationBase adds the nodesStatisticsGpuProcessorUtilizationBase to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesStatisticsGpuProcessorUtilizationBase(nodesStatisticsGpuProcessorUtilizationBase *int64) {
	o.NodesStatisticsGpuProcessorUtilizationBase = nodesStatisticsGpuProcessorUtilizationBase
}

// WithNodesStatisticsGpuProcessorUtilizationRaw adds the nodesStatisticsGpuProcessorUtilizationRaw to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesStatisticsGpuProcessorUtilizationRaw(nodesStatisticsGpuProcessorUtilizationRaw *int64) *DcnClusterGetParams {
	o.SetNodesStatisticsGpuProcessorUtilizationRaw(nodesStatisticsGpuProcessorUtilizationRaw)
	return o
}

// SetNodesStatisticsGpuProcessorUtilizationRaw adds the nodesStatisticsGpuProcessorUtilizationRaw to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesStatisticsGpuProcessorUtilizationRaw(nodesStatisticsGpuProcessorUtilizationRaw *int64) {
	o.NodesStatisticsGpuProcessorUtilizationRaw = nodesStatisticsGpuProcessorUtilizationRaw
}

// WithNodesStatisticsStatus adds the nodesStatisticsStatus to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesStatisticsStatus(nodesStatisticsStatus *string) *DcnClusterGetParams {
	o.SetNodesStatisticsStatus(nodesStatisticsStatus)
	return o
}

// SetNodesStatisticsStatus adds the nodesStatisticsStatus to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesStatisticsStatus(nodesStatisticsStatus *string) {
	o.NodesStatisticsStatus = nodesStatisticsStatus
}

// WithNodesStatisticsTimestamp adds the nodesStatisticsTimestamp to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesStatisticsTimestamp(nodesStatisticsTimestamp *string) *DcnClusterGetParams {
	o.SetNodesStatisticsTimestamp(nodesStatisticsTimestamp)
	return o
}

// SetNodesStatisticsTimestamp adds the nodesStatisticsTimestamp to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesStatisticsTimestamp(nodesStatisticsTimestamp *string) {
	o.NodesStatisticsTimestamp = nodesStatisticsTimestamp
}

// WithNodesSystemID adds the nodesSystemID to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesSystemID(nodesSystemID *string) *DcnClusterGetParams {
	o.SetNodesSystemID(nodesSystemID)
	return o
}

// SetNodesSystemID adds the nodesSystemId to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesSystemID(nodesSystemID *string) {
	o.NodesSystemID = nodesSystemID
}

// WithNodesUptime adds the nodesUptime to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesUptime(nodesUptime *int64) *DcnClusterGetParams {
	o.SetNodesUptime(nodesUptime)
	return o
}

// SetNodesUptime adds the nodesUptime to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesUptime(nodesUptime *int64) {
	o.NodesUptime = nodesUptime
}

// WithNodesUUID adds the nodesUUID to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesUUID(nodesUUID *string) *DcnClusterGetParams {
	o.SetNodesUUID(nodesUUID)
	return o
}

// SetNodesUUID adds the nodesUuid to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesUUID(nodesUUID *string) {
	o.NodesUUID = nodesUUID
}

// WithNodesVendorSerialNumber adds the nodesVendorSerialNumber to the dcn cluster get params
func (o *DcnClusterGetParams) WithNodesVendorSerialNumber(nodesVendorSerialNumber *string) *DcnClusterGetParams {
	o.SetNodesVendorSerialNumber(nodesVendorSerialNumber)
	return o
}

// SetNodesVendorSerialNumber adds the nodesVendorSerialNumber to the dcn cluster get params
func (o *DcnClusterGetParams) SetNodesVendorSerialNumber(nodesVendorSerialNumber *string) {
	o.NodesVendorSerialNumber = nodesVendorSerialNumber
}

// WithServiceIPAddress adds the serviceIPAddress to the dcn cluster get params
func (o *DcnClusterGetParams) WithServiceIPAddress(serviceIPAddress *string) *DcnClusterGetParams {
	o.SetServiceIPAddress(serviceIPAddress)
	return o
}

// SetServiceIPAddress adds the serviceIpAddress to the dcn cluster get params
func (o *DcnClusterGetParams) SetServiceIPAddress(serviceIPAddress *string) {
	o.ServiceIPAddress = serviceIPAddress
}

// WithServiceIPGateway adds the serviceIPGateway to the dcn cluster get params
func (o *DcnClusterGetParams) WithServiceIPGateway(serviceIPGateway *string) *DcnClusterGetParams {
	o.SetServiceIPGateway(serviceIPGateway)
	return o
}

// SetServiceIPGateway adds the serviceIpGateway to the dcn cluster get params
func (o *DcnClusterGetParams) SetServiceIPGateway(serviceIPGateway *string) {
	o.ServiceIPGateway = serviceIPGateway
}

// WithServiceIPNetmask adds the serviceIPNetmask to the dcn cluster get params
func (o *DcnClusterGetParams) WithServiceIPNetmask(serviceIPNetmask *string) *DcnClusterGetParams {
	o.SetServiceIPNetmask(serviceIPNetmask)
	return o
}

// SetServiceIPNetmask adds the serviceIpNetmask to the dcn cluster get params
func (o *DcnClusterGetParams) SetServiceIPNetmask(serviceIPNetmask *string) {
	o.ServiceIPNetmask = serviceIPNetmask
}

// WithSoftwareVersionFull adds the softwareVersionFull to the dcn cluster get params
func (o *DcnClusterGetParams) WithSoftwareVersionFull(softwareVersionFull *string) *DcnClusterGetParams {
	o.SetSoftwareVersionFull(softwareVersionFull)
	return o
}

// SetSoftwareVersionFull adds the softwareVersionFull to the dcn cluster get params
func (o *DcnClusterGetParams) SetSoftwareVersionFull(softwareVersionFull *string) {
	o.SoftwareVersionFull = softwareVersionFull
}

// WithSoftwareVersionGeneration adds the softwareVersionGeneration to the dcn cluster get params
func (o *DcnClusterGetParams) WithSoftwareVersionGeneration(softwareVersionGeneration *int64) *DcnClusterGetParams {
	o.SetSoftwareVersionGeneration(softwareVersionGeneration)
	return o
}

// SetSoftwareVersionGeneration adds the softwareVersionGeneration to the dcn cluster get params
func (o *DcnClusterGetParams) SetSoftwareVersionGeneration(softwareVersionGeneration *int64) {
	o.SoftwareVersionGeneration = softwareVersionGeneration
}

// WithSoftwareVersionMajor adds the softwareVersionMajor to the dcn cluster get params
func (o *DcnClusterGetParams) WithSoftwareVersionMajor(softwareVersionMajor *int64) *DcnClusterGetParams {
	o.SetSoftwareVersionMajor(softwareVersionMajor)
	return o
}

// SetSoftwareVersionMajor adds the softwareVersionMajor to the dcn cluster get params
func (o *DcnClusterGetParams) SetSoftwareVersionMajor(softwareVersionMajor *int64) {
	o.SoftwareVersionMajor = softwareVersionMajor
}

// WithSoftwareVersionMinor adds the softwareVersionMinor to the dcn cluster get params
func (o *DcnClusterGetParams) WithSoftwareVersionMinor(softwareVersionMinor *int64) *DcnClusterGetParams {
	o.SetSoftwareVersionMinor(softwareVersionMinor)
	return o
}

// SetSoftwareVersionMinor adds the softwareVersionMinor to the dcn cluster get params
func (o *DcnClusterGetParams) SetSoftwareVersionMinor(softwareVersionMinor *int64) {
	o.SoftwareVersionMinor = softwareVersionMinor
}

// WithSoftwareVersionPatch adds the softwareVersionPatch to the dcn cluster get params
func (o *DcnClusterGetParams) WithSoftwareVersionPatch(softwareVersionPatch *string) *DcnClusterGetParams {
	o.SetSoftwareVersionPatch(softwareVersionPatch)
	return o
}

// SetSoftwareVersionPatch adds the softwareVersionPatch to the dcn cluster get params
func (o *DcnClusterGetParams) SetSoftwareVersionPatch(softwareVersionPatch *string) {
	o.SoftwareVersionPatch = softwareVersionPatch
}

// WithUUID adds the uuid to the dcn cluster get params
func (o *DcnClusterGetParams) WithUUID(uuid *string) *DcnClusterGetParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the dcn cluster get params
func (o *DcnClusterGetParams) SetUUID(uuid *string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *DcnClusterGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.NetworkPoolIPRangesEnd != nil {

		// query param network_pool.ip_ranges.end
		var qrNetworkPoolIPRangesEnd string

		if o.NetworkPoolIPRangesEnd != nil {
			qrNetworkPoolIPRangesEnd = *o.NetworkPoolIPRangesEnd
		}
		qNetworkPoolIPRangesEnd := qrNetworkPoolIPRangesEnd
		if qNetworkPoolIPRangesEnd != "" {

			if err := r.SetQueryParam("network_pool.ip_ranges.end", qNetworkPoolIPRangesEnd); err != nil {
				return err
			}
		}
	}

	if o.NetworkPoolIPRangesFamily != nil {

		// query param network_pool.ip_ranges.family
		var qrNetworkPoolIPRangesFamily string

		if o.NetworkPoolIPRangesFamily != nil {
			qrNetworkPoolIPRangesFamily = *o.NetworkPoolIPRangesFamily
		}
		qNetworkPoolIPRangesFamily := qrNetworkPoolIPRangesFamily
		if qNetworkPoolIPRangesFamily != "" {

			if err := r.SetQueryParam("network_pool.ip_ranges.family", qNetworkPoolIPRangesFamily); err != nil {
				return err
			}
		}
	}

	if o.NetworkPoolIPRangesStart != nil {

		// query param network_pool.ip_ranges.start
		var qrNetworkPoolIPRangesStart string

		if o.NetworkPoolIPRangesStart != nil {
			qrNetworkPoolIPRangesStart = *o.NetworkPoolIPRangesStart
		}
		qNetworkPoolIPRangesStart := qrNetworkPoolIPRangesStart
		if qNetworkPoolIPRangesStart != "" {

			if err := r.SetQueryParam("network_pool.ip_ranges.start", qNetworkPoolIPRangesStart); err != nil {
				return err
			}
		}
	}

	if o.NetworkPoolSubnetAddress != nil {

		// query param network_pool.subnet.address
		var qrNetworkPoolSubnetAddress string

		if o.NetworkPoolSubnetAddress != nil {
			qrNetworkPoolSubnetAddress = *o.NetworkPoolSubnetAddress
		}
		qNetworkPoolSubnetAddress := qrNetworkPoolSubnetAddress
		if qNetworkPoolSubnetAddress != "" {

			if err := r.SetQueryParam("network_pool.subnet.address", qNetworkPoolSubnetAddress); err != nil {
				return err
			}
		}
	}

	if o.NetworkPoolSubnetFamily != nil {

		// query param network_pool.subnet.family
		var qrNetworkPoolSubnetFamily string

		if o.NetworkPoolSubnetFamily != nil {
			qrNetworkPoolSubnetFamily = *o.NetworkPoolSubnetFamily
		}
		qNetworkPoolSubnetFamily := qrNetworkPoolSubnetFamily
		if qNetworkPoolSubnetFamily != "" {

			if err := r.SetQueryParam("network_pool.subnet.family", qNetworkPoolSubnetFamily); err != nil {
				return err
			}
		}
	}

	if o.NetworkPoolSubnetNetmask != nil {

		// query param network_pool.subnet.netmask
		var qrNetworkPoolSubnetNetmask string

		if o.NetworkPoolSubnetNetmask != nil {
			qrNetworkPoolSubnetNetmask = *o.NetworkPoolSubnetNetmask
		}
		qNetworkPoolSubnetNetmask := qrNetworkPoolSubnetNetmask
		if qNetworkPoolSubnetNetmask != "" {

			if err := r.SetQueryParam("network_pool.subnet.netmask", qNetworkPoolSubnetNetmask); err != nil {
				return err
			}
		}
	}

	if o.NodesDate != nil {

		// query param nodes.date
		var qrNodesDate string

		if o.NodesDate != nil {
			qrNodesDate = *o.NodesDate
		}
		qNodesDate := qrNodesDate
		if qNodesDate != "" {

			if err := r.SetQueryParam("nodes.date", qNodesDate); err != nil {
				return err
			}
		}
	}

	if o.NodesErrorCount != nil {

		// query param nodes.error.count
		var qrNodesErrorCount int64

		if o.NodesErrorCount != nil {
			qrNodesErrorCount = *o.NodesErrorCount
		}
		qNodesErrorCount := swag.FormatInt64(qrNodesErrorCount)
		if qNodesErrorCount != "" {

			if err := r.SetQueryParam("nodes.error.count", qNodesErrorCount); err != nil {
				return err
			}
		}
	}

	if o.NodesErrorMessage != nil {

		// query param nodes.error.message
		var qrNodesErrorMessage string

		if o.NodesErrorMessage != nil {
			qrNodesErrorMessage = *o.NodesErrorMessage
		}
		qNodesErrorMessage := qrNodesErrorMessage
		if qNodesErrorMessage != "" {

			if err := r.SetQueryParam("nodes.error.message", qNodesErrorMessage); err != nil {
				return err
			}
		}
	}

	if o.NodesErrorUnitType != nil {

		// query param nodes.error.unit_type
		var qrNodesErrorUnitType string

		if o.NodesErrorUnitType != nil {
			qrNodesErrorUnitType = *o.NodesErrorUnitType
		}
		qNodesErrorUnitType := qrNodesErrorUnitType
		if qNodesErrorUnitType != "" {

			if err := r.SetQueryParam("nodes.error.unit_type", qNodesErrorUnitType); err != nil {
				return err
			}
		}
	}

	if o.NodesHardwareBoard != nil {

		// query param nodes.hardware.board
		var qrNodesHardwareBoard string

		if o.NodesHardwareBoard != nil {
			qrNodesHardwareBoard = *o.NodesHardwareBoard
		}
		qNodesHardwareBoard := qrNodesHardwareBoard
		if qNodesHardwareBoard != "" {

			if err := r.SetQueryParam("nodes.hardware.board", qNodesHardwareBoard); err != nil {
				return err
			}
		}
	}

	if o.NodesHardwareCPUCount != nil {

		// query param nodes.hardware.cpu.count
		var qrNodesHardwareCPUCount int64

		if o.NodesHardwareCPUCount != nil {
			qrNodesHardwareCPUCount = *o.NodesHardwareCPUCount
		}
		qNodesHardwareCPUCount := swag.FormatInt64(qrNodesHardwareCPUCount)
		if qNodesHardwareCPUCount != "" {

			if err := r.SetQueryParam("nodes.hardware.cpu.count", qNodesHardwareCPUCount); err != nil {
				return err
			}
		}
	}

	if o.NodesHardwareCPUFirmwareRelease != nil {

		// query param nodes.hardware.cpu.firmware_release
		var qrNodesHardwareCPUFirmwareRelease string

		if o.NodesHardwareCPUFirmwareRelease != nil {
			qrNodesHardwareCPUFirmwareRelease = *o.NodesHardwareCPUFirmwareRelease
		}
		qNodesHardwareCPUFirmwareRelease := qrNodesHardwareCPUFirmwareRelease
		if qNodesHardwareCPUFirmwareRelease != "" {

			if err := r.SetQueryParam("nodes.hardware.cpu.firmware_release", qNodesHardwareCPUFirmwareRelease); err != nil {
				return err
			}
		}
	}

	if o.NodesHardwareCPUMemorySize != nil {

		// query param nodes.hardware.cpu.memory_size
		var qrNodesHardwareCPUMemorySize int64

		if o.NodesHardwareCPUMemorySize != nil {
			qrNodesHardwareCPUMemorySize = *o.NodesHardwareCPUMemorySize
		}
		qNodesHardwareCPUMemorySize := swag.FormatInt64(qrNodesHardwareCPUMemorySize)
		if qNodesHardwareCPUMemorySize != "" {

			if err := r.SetQueryParam("nodes.hardware.cpu.memory_size", qNodesHardwareCPUMemorySize); err != nil {
				return err
			}
		}
	}

	if o.NodesHardwareCPUProcessor != nil {

		// query param nodes.hardware.cpu.processor
		var qrNodesHardwareCPUProcessor string

		if o.NodesHardwareCPUProcessor != nil {
			qrNodesHardwareCPUProcessor = *o.NodesHardwareCPUProcessor
		}
		qNodesHardwareCPUProcessor := qrNodesHardwareCPUProcessor
		if qNodesHardwareCPUProcessor != "" {

			if err := r.SetQueryParam("nodes.hardware.cpu.processor", qNodesHardwareCPUProcessor); err != nil {
				return err
			}
		}
	}

	if o.NodesHardwareFrusCount != nil {

		// query param nodes.hardware.frus.count
		var qrNodesHardwareFrusCount int64

		if o.NodesHardwareFrusCount != nil {
			qrNodesHardwareFrusCount = *o.NodesHardwareFrusCount
		}
		qNodesHardwareFrusCount := swag.FormatInt64(qrNodesHardwareFrusCount)
		if qNodesHardwareFrusCount != "" {

			if err := r.SetQueryParam("nodes.hardware.frus.count", qNodesHardwareFrusCount); err != nil {
				return err
			}
		}
	}

	if o.NodesHardwareFrusFruType != nil {

		// query param nodes.hardware.frus.fru_type
		var qrNodesHardwareFrusFruType string

		if o.NodesHardwareFrusFruType != nil {
			qrNodesHardwareFrusFruType = *o.NodesHardwareFrusFruType
		}
		qNodesHardwareFrusFruType := qrNodesHardwareFrusFruType
		if qNodesHardwareFrusFruType != "" {

			if err := r.SetQueryParam("nodes.hardware.frus.fru_type", qNodesHardwareFrusFruType); err != nil {
				return err
			}
		}
	}

	if o.NodesHardwareFrusID != nil {

		// query param nodes.hardware.frus.id
		var qrNodesHardwareFrusID string

		if o.NodesHardwareFrusID != nil {
			qrNodesHardwareFrusID = *o.NodesHardwareFrusID
		}
		qNodesHardwareFrusID := qrNodesHardwareFrusID
		if qNodesHardwareFrusID != "" {

			if err := r.SetQueryParam("nodes.hardware.frus.id", qNodesHardwareFrusID); err != nil {
				return err
			}
		}
	}

	if o.NodesHardwareGpuCount != nil {

		// query param nodes.hardware.gpu.count
		var qrNodesHardwareGpuCount int64

		if o.NodesHardwareGpuCount != nil {
			qrNodesHardwareGpuCount = *o.NodesHardwareGpuCount
		}
		qNodesHardwareGpuCount := swag.FormatInt64(qrNodesHardwareGpuCount)
		if qNodesHardwareGpuCount != "" {

			if err := r.SetQueryParam("nodes.hardware.gpu.count", qNodesHardwareGpuCount); err != nil {
				return err
			}
		}
	}

	if o.NodesHardwareGpuFirmwareRelease != nil {

		// query param nodes.hardware.gpu.firmware_release
		var qrNodesHardwareGpuFirmwareRelease string

		if o.NodesHardwareGpuFirmwareRelease != nil {
			qrNodesHardwareGpuFirmwareRelease = *o.NodesHardwareGpuFirmwareRelease
		}
		qNodesHardwareGpuFirmwareRelease := qrNodesHardwareGpuFirmwareRelease
		if qNodesHardwareGpuFirmwareRelease != "" {

			if err := r.SetQueryParam("nodes.hardware.gpu.firmware_release", qNodesHardwareGpuFirmwareRelease); err != nil {
				return err
			}
		}
	}

	if o.NodesHardwareGpuMemorySize != nil {

		// query param nodes.hardware.gpu.memory_size
		var qrNodesHardwareGpuMemorySize int64

		if o.NodesHardwareGpuMemorySize != nil {
			qrNodesHardwareGpuMemorySize = *o.NodesHardwareGpuMemorySize
		}
		qNodesHardwareGpuMemorySize := swag.FormatInt64(qrNodesHardwareGpuMemorySize)
		if qNodesHardwareGpuMemorySize != "" {

			if err := r.SetQueryParam("nodes.hardware.gpu.memory_size", qNodesHardwareGpuMemorySize); err != nil {
				return err
			}
		}
	}

	if o.NodesHardwareGpuProcessor != nil {

		// query param nodes.hardware.gpu.processor
		var qrNodesHardwareGpuProcessor string

		if o.NodesHardwareGpuProcessor != nil {
			qrNodesHardwareGpuProcessor = *o.NodesHardwareGpuProcessor
		}
		qNodesHardwareGpuProcessor := qrNodesHardwareGpuProcessor
		if qNodesHardwareGpuProcessor != "" {

			if err := r.SetQueryParam("nodes.hardware.gpu.processor", qNodesHardwareGpuProcessor); err != nil {
				return err
			}
		}
	}

	if o.NodesLocation != nil {

		// query param nodes.location
		var qrNodesLocation string

		if o.NodesLocation != nil {
			qrNodesLocation = *o.NodesLocation
		}
		qNodesLocation := qrNodesLocation
		if qNodesLocation != "" {

			if err := r.SetQueryParam("nodes.location", qNodesLocation); err != nil {
				return err
			}
		}
	}

	if o.NodesMembership != nil {

		// query param nodes.membership
		var qrNodesMembership string

		if o.NodesMembership != nil {
			qrNodesMembership = *o.NodesMembership
		}
		qNodesMembership := qrNodesMembership
		if qNodesMembership != "" {

			if err := r.SetQueryParam("nodes.membership", qNodesMembership); err != nil {
				return err
			}
		}
	}

	if o.NodesMetricCPUMemoryUsed != nil {

		// query param nodes.metric.cpu.memory_used
		var qrNodesMetricCPUMemoryUsed int64

		if o.NodesMetricCPUMemoryUsed != nil {
			qrNodesMetricCPUMemoryUsed = *o.NodesMetricCPUMemoryUsed
		}
		qNodesMetricCPUMemoryUsed := swag.FormatInt64(qrNodesMetricCPUMemoryUsed)
		if qNodesMetricCPUMemoryUsed != "" {

			if err := r.SetQueryParam("nodes.metric.cpu.memory_used", qNodesMetricCPUMemoryUsed); err != nil {
				return err
			}
		}
	}

	if o.NodesMetricCPUProcessorUtilization != nil {

		// query param nodes.metric.cpu.processor_utilization
		var qrNodesMetricCPUProcessorUtilization int64

		if o.NodesMetricCPUProcessorUtilization != nil {
			qrNodesMetricCPUProcessorUtilization = *o.NodesMetricCPUProcessorUtilization
		}
		qNodesMetricCPUProcessorUtilization := swag.FormatInt64(qrNodesMetricCPUProcessorUtilization)
		if qNodesMetricCPUProcessorUtilization != "" {

			if err := r.SetQueryParam("nodes.metric.cpu.processor_utilization", qNodesMetricCPUProcessorUtilization); err != nil {
				return err
			}
		}
	}

	if o.NodesMetricDuration != nil {

		// query param nodes.metric.duration
		var qrNodesMetricDuration string

		if o.NodesMetricDuration != nil {
			qrNodesMetricDuration = *o.NodesMetricDuration
		}
		qNodesMetricDuration := qrNodesMetricDuration
		if qNodesMetricDuration != "" {

			if err := r.SetQueryParam("nodes.metric.duration", qNodesMetricDuration); err != nil {
				return err
			}
		}
	}

	if o.NodesMetricGpuMemoryUsed != nil {

		// query param nodes.metric.gpu.memory_used
		var qrNodesMetricGpuMemoryUsed int64

		if o.NodesMetricGpuMemoryUsed != nil {
			qrNodesMetricGpuMemoryUsed = *o.NodesMetricGpuMemoryUsed
		}
		qNodesMetricGpuMemoryUsed := swag.FormatInt64(qrNodesMetricGpuMemoryUsed)
		if qNodesMetricGpuMemoryUsed != "" {

			if err := r.SetQueryParam("nodes.metric.gpu.memory_used", qNodesMetricGpuMemoryUsed); err != nil {
				return err
			}
		}
	}

	if o.NodesMetricGpuProcessorUtilization != nil {

		// query param nodes.metric.gpu.processor_utilization
		var qrNodesMetricGpuProcessorUtilization int64

		if o.NodesMetricGpuProcessorUtilization != nil {
			qrNodesMetricGpuProcessorUtilization = *o.NodesMetricGpuProcessorUtilization
		}
		qNodesMetricGpuProcessorUtilization := swag.FormatInt64(qrNodesMetricGpuProcessorUtilization)
		if qNodesMetricGpuProcessorUtilization != "" {

			if err := r.SetQueryParam("nodes.metric.gpu.processor_utilization", qNodesMetricGpuProcessorUtilization); err != nil {
				return err
			}
		}
	}

	if o.NodesMetricStatus != nil {

		// query param nodes.metric.status
		var qrNodesMetricStatus string

		if o.NodesMetricStatus != nil {
			qrNodesMetricStatus = *o.NodesMetricStatus
		}
		qNodesMetricStatus := qrNodesMetricStatus
		if qNodesMetricStatus != "" {

			if err := r.SetQueryParam("nodes.metric.status", qNodesMetricStatus); err != nil {
				return err
			}
		}
	}

	if o.NodesMetricTimestamp != nil {

		// query param nodes.metric.timestamp
		var qrNodesMetricTimestamp string

		if o.NodesMetricTimestamp != nil {
			qrNodesMetricTimestamp = *o.NodesMetricTimestamp
		}
		qNodesMetricTimestamp := qrNodesMetricTimestamp
		if qNodesMetricTimestamp != "" {

			if err := r.SetQueryParam("nodes.metric.timestamp", qNodesMetricTimestamp); err != nil {
				return err
			}
		}
	}

	if o.NodesMetricUUID != nil {

		// query param nodes.metric.uuid
		var qrNodesMetricUUID string

		if o.NodesMetricUUID != nil {
			qrNodesMetricUUID = *o.NodesMetricUUID
		}
		qNodesMetricUUID := qrNodesMetricUUID
		if qNodesMetricUUID != "" {

			if err := r.SetQueryParam("nodes.metric.uuid", qNodesMetricUUID); err != nil {
				return err
			}
		}
	}

	if o.NodesModel != nil {

		// query param nodes.model
		var qrNodesModel string

		if o.NodesModel != nil {
			qrNodesModel = *o.NodesModel
		}
		qNodesModel := qrNodesModel
		if qNodesModel != "" {

			if err := r.SetQueryParam("nodes.model", qNodesModel); err != nil {
				return err
			}
		}
	}

	if o.NodesName != nil {

		// query param nodes.name
		var qrNodesName string

		if o.NodesName != nil {
			qrNodesName = *o.NodesName
		}
		qNodesName := qrNodesName
		if qNodesName != "" {

			if err := r.SetQueryParam("nodes.name", qNodesName); err != nil {
				return err
			}
		}
	}

	if o.NodesNetworkExternalInterfaceMacAddress != nil {

		// query param nodes.network.external_interface.mac_address
		var qrNodesNetworkExternalInterfaceMacAddress string

		if o.NodesNetworkExternalInterfaceMacAddress != nil {
			qrNodesNetworkExternalInterfaceMacAddress = *o.NodesNetworkExternalInterfaceMacAddress
		}
		qNodesNetworkExternalInterfaceMacAddress := qrNodesNetworkExternalInterfaceMacAddress
		if qNodesNetworkExternalInterfaceMacAddress != "" {

			if err := r.SetQueryParam("nodes.network.external_interface.mac_address", qNodesNetworkExternalInterfaceMacAddress); err != nil {
				return err
			}
		}
	}

	if o.NodesNetworkExternalInterfaceMtu != nil {

		// query param nodes.network.external_interface.mtu
		var qrNodesNetworkExternalInterfaceMtu int64

		if o.NodesNetworkExternalInterfaceMtu != nil {
			qrNodesNetworkExternalInterfaceMtu = *o.NodesNetworkExternalInterfaceMtu
		}
		qNodesNetworkExternalInterfaceMtu := swag.FormatInt64(qrNodesNetworkExternalInterfaceMtu)
		if qNodesNetworkExternalInterfaceMtu != "" {

			if err := r.SetQueryParam("nodes.network.external_interface.mtu", qNodesNetworkExternalInterfaceMtu); err != nil {
				return err
			}
		}
	}

	if o.NodesNetworkExternalInterfaceName != nil {

		// query param nodes.network.external_interface.name
		var qrNodesNetworkExternalInterfaceName string

		if o.NodesNetworkExternalInterfaceName != nil {
			qrNodesNetworkExternalInterfaceName = *o.NodesNetworkExternalInterfaceName
		}
		qNodesNetworkExternalInterfaceName := qrNodesNetworkExternalInterfaceName
		if qNodesNetworkExternalInterfaceName != "" {

			if err := r.SetQueryParam("nodes.network.external_interface.name", qNodesNetworkExternalInterfaceName); err != nil {
				return err
			}
		}
	}

	if o.NodesOwner != nil {

		// query param nodes.owner
		var qrNodesOwner string

		if o.NodesOwner != nil {
			qrNodesOwner = *o.NodesOwner
		}
		qNodesOwner := qrNodesOwner
		if qNodesOwner != "" {

			if err := r.SetQueryParam("nodes.owner", qNodesOwner); err != nil {
				return err
			}
		}
	}

	if o.NodesSerialNumber != nil {

		// query param nodes.serial_number
		var qrNodesSerialNumber string

		if o.NodesSerialNumber != nil {
			qrNodesSerialNumber = *o.NodesSerialNumber
		}
		qNodesSerialNumber := qrNodesSerialNumber
		if qNodesSerialNumber != "" {

			if err := r.SetQueryParam("nodes.serial_number", qNodesSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.NodesSoftwareCompatibility != nil {

		// query param nodes.software.compatibility
		var qrNodesSoftwareCompatibility string

		if o.NodesSoftwareCompatibility != nil {
			qrNodesSoftwareCompatibility = *o.NodesSoftwareCompatibility
		}
		qNodesSoftwareCompatibility := qrNodesSoftwareCompatibility
		if qNodesSoftwareCompatibility != "" {

			if err := r.SetQueryParam("nodes.software.compatibility", qNodesSoftwareCompatibility); err != nil {
				return err
			}
		}
	}

	if o.NodesSoftwareVersionFull != nil {

		// query param nodes.software.version.full
		var qrNodesSoftwareVersionFull string

		if o.NodesSoftwareVersionFull != nil {
			qrNodesSoftwareVersionFull = *o.NodesSoftwareVersionFull
		}
		qNodesSoftwareVersionFull := qrNodesSoftwareVersionFull
		if qNodesSoftwareVersionFull != "" {

			if err := r.SetQueryParam("nodes.software.version.full", qNodesSoftwareVersionFull); err != nil {
				return err
			}
		}
	}

	if o.NodesSoftwareVersionGeneration != nil {

		// query param nodes.software.version.generation
		var qrNodesSoftwareVersionGeneration int64

		if o.NodesSoftwareVersionGeneration != nil {
			qrNodesSoftwareVersionGeneration = *o.NodesSoftwareVersionGeneration
		}
		qNodesSoftwareVersionGeneration := swag.FormatInt64(qrNodesSoftwareVersionGeneration)
		if qNodesSoftwareVersionGeneration != "" {

			if err := r.SetQueryParam("nodes.software.version.generation", qNodesSoftwareVersionGeneration); err != nil {
				return err
			}
		}
	}

	if o.NodesSoftwareVersionMajor != nil {

		// query param nodes.software.version.major
		var qrNodesSoftwareVersionMajor int64

		if o.NodesSoftwareVersionMajor != nil {
			qrNodesSoftwareVersionMajor = *o.NodesSoftwareVersionMajor
		}
		qNodesSoftwareVersionMajor := swag.FormatInt64(qrNodesSoftwareVersionMajor)
		if qNodesSoftwareVersionMajor != "" {

			if err := r.SetQueryParam("nodes.software.version.major", qNodesSoftwareVersionMajor); err != nil {
				return err
			}
		}
	}

	if o.NodesSoftwareVersionMinor != nil {

		// query param nodes.software.version.minor
		var qrNodesSoftwareVersionMinor int64

		if o.NodesSoftwareVersionMinor != nil {
			qrNodesSoftwareVersionMinor = *o.NodesSoftwareVersionMinor
		}
		qNodesSoftwareVersionMinor := swag.FormatInt64(qrNodesSoftwareVersionMinor)
		if qNodesSoftwareVersionMinor != "" {

			if err := r.SetQueryParam("nodes.software.version.minor", qNodesSoftwareVersionMinor); err != nil {
				return err
			}
		}
	}

	if o.NodesSoftwareVersionPatch != nil {

		// query param nodes.software.version.patch
		var qrNodesSoftwareVersionPatch string

		if o.NodesSoftwareVersionPatch != nil {
			qrNodesSoftwareVersionPatch = *o.NodesSoftwareVersionPatch
		}
		qNodesSoftwareVersionPatch := qrNodesSoftwareVersionPatch
		if qNodesSoftwareVersionPatch != "" {

			if err := r.SetQueryParam("nodes.software.version.patch", qNodesSoftwareVersionPatch); err != nil {
				return err
			}
		}
	}

	if o.NodesState != nil {

		// query param nodes.state
		var qrNodesState string

		if o.NodesState != nil {
			qrNodesState = *o.NodesState
		}
		qNodesState := qrNodesState
		if qNodesState != "" {

			if err := r.SetQueryParam("nodes.state", qNodesState); err != nil {
				return err
			}
		}
	}

	if o.NodesStatisticsCPUMemoryUsed != nil {

		// query param nodes.statistics.cpu.memory_used
		var qrNodesStatisticsCPUMemoryUsed int64

		if o.NodesStatisticsCPUMemoryUsed != nil {
			qrNodesStatisticsCPUMemoryUsed = *o.NodesStatisticsCPUMemoryUsed
		}
		qNodesStatisticsCPUMemoryUsed := swag.FormatInt64(qrNodesStatisticsCPUMemoryUsed)
		if qNodesStatisticsCPUMemoryUsed != "" {

			if err := r.SetQueryParam("nodes.statistics.cpu.memory_used", qNodesStatisticsCPUMemoryUsed); err != nil {
				return err
			}
		}
	}

	if o.NodesStatisticsCPUProcessorUtilizationBase != nil {

		// query param nodes.statistics.cpu.processor_utilization_base
		var qrNodesStatisticsCPUProcessorUtilizationBase int64

		if o.NodesStatisticsCPUProcessorUtilizationBase != nil {
			qrNodesStatisticsCPUProcessorUtilizationBase = *o.NodesStatisticsCPUProcessorUtilizationBase
		}
		qNodesStatisticsCPUProcessorUtilizationBase := swag.FormatInt64(qrNodesStatisticsCPUProcessorUtilizationBase)
		if qNodesStatisticsCPUProcessorUtilizationBase != "" {

			if err := r.SetQueryParam("nodes.statistics.cpu.processor_utilization_base", qNodesStatisticsCPUProcessorUtilizationBase); err != nil {
				return err
			}
		}
	}

	if o.NodesStatisticsCPUProcessorUtilizationRaw != nil {

		// query param nodes.statistics.cpu.processor_utilization_raw
		var qrNodesStatisticsCPUProcessorUtilizationRaw int64

		if o.NodesStatisticsCPUProcessorUtilizationRaw != nil {
			qrNodesStatisticsCPUProcessorUtilizationRaw = *o.NodesStatisticsCPUProcessorUtilizationRaw
		}
		qNodesStatisticsCPUProcessorUtilizationRaw := swag.FormatInt64(qrNodesStatisticsCPUProcessorUtilizationRaw)
		if qNodesStatisticsCPUProcessorUtilizationRaw != "" {

			if err := r.SetQueryParam("nodes.statistics.cpu.processor_utilization_raw", qNodesStatisticsCPUProcessorUtilizationRaw); err != nil {
				return err
			}
		}
	}

	if o.NodesStatisticsGpuMemoryUsed != nil {

		// query param nodes.statistics.gpu.memory_used
		var qrNodesStatisticsGpuMemoryUsed int64

		if o.NodesStatisticsGpuMemoryUsed != nil {
			qrNodesStatisticsGpuMemoryUsed = *o.NodesStatisticsGpuMemoryUsed
		}
		qNodesStatisticsGpuMemoryUsed := swag.FormatInt64(qrNodesStatisticsGpuMemoryUsed)
		if qNodesStatisticsGpuMemoryUsed != "" {

			if err := r.SetQueryParam("nodes.statistics.gpu.memory_used", qNodesStatisticsGpuMemoryUsed); err != nil {
				return err
			}
		}
	}

	if o.NodesStatisticsGpuProcessorUtilizationBase != nil {

		// query param nodes.statistics.gpu.processor_utilization_base
		var qrNodesStatisticsGpuProcessorUtilizationBase int64

		if o.NodesStatisticsGpuProcessorUtilizationBase != nil {
			qrNodesStatisticsGpuProcessorUtilizationBase = *o.NodesStatisticsGpuProcessorUtilizationBase
		}
		qNodesStatisticsGpuProcessorUtilizationBase := swag.FormatInt64(qrNodesStatisticsGpuProcessorUtilizationBase)
		if qNodesStatisticsGpuProcessorUtilizationBase != "" {

			if err := r.SetQueryParam("nodes.statistics.gpu.processor_utilization_base", qNodesStatisticsGpuProcessorUtilizationBase); err != nil {
				return err
			}
		}
	}

	if o.NodesStatisticsGpuProcessorUtilizationRaw != nil {

		// query param nodes.statistics.gpu.processor_utilization_raw
		var qrNodesStatisticsGpuProcessorUtilizationRaw int64

		if o.NodesStatisticsGpuProcessorUtilizationRaw != nil {
			qrNodesStatisticsGpuProcessorUtilizationRaw = *o.NodesStatisticsGpuProcessorUtilizationRaw
		}
		qNodesStatisticsGpuProcessorUtilizationRaw := swag.FormatInt64(qrNodesStatisticsGpuProcessorUtilizationRaw)
		if qNodesStatisticsGpuProcessorUtilizationRaw != "" {

			if err := r.SetQueryParam("nodes.statistics.gpu.processor_utilization_raw", qNodesStatisticsGpuProcessorUtilizationRaw); err != nil {
				return err
			}
		}
	}

	if o.NodesStatisticsStatus != nil {

		// query param nodes.statistics.status
		var qrNodesStatisticsStatus string

		if o.NodesStatisticsStatus != nil {
			qrNodesStatisticsStatus = *o.NodesStatisticsStatus
		}
		qNodesStatisticsStatus := qrNodesStatisticsStatus
		if qNodesStatisticsStatus != "" {

			if err := r.SetQueryParam("nodes.statistics.status", qNodesStatisticsStatus); err != nil {
				return err
			}
		}
	}

	if o.NodesStatisticsTimestamp != nil {

		// query param nodes.statistics.timestamp
		var qrNodesStatisticsTimestamp string

		if o.NodesStatisticsTimestamp != nil {
			qrNodesStatisticsTimestamp = *o.NodesStatisticsTimestamp
		}
		qNodesStatisticsTimestamp := qrNodesStatisticsTimestamp
		if qNodesStatisticsTimestamp != "" {

			if err := r.SetQueryParam("nodes.statistics.timestamp", qNodesStatisticsTimestamp); err != nil {
				return err
			}
		}
	}

	if o.NodesSystemID != nil {

		// query param nodes.system_id
		var qrNodesSystemID string

		if o.NodesSystemID != nil {
			qrNodesSystemID = *o.NodesSystemID
		}
		qNodesSystemID := qrNodesSystemID
		if qNodesSystemID != "" {

			if err := r.SetQueryParam("nodes.system_id", qNodesSystemID); err != nil {
				return err
			}
		}
	}

	if o.NodesUptime != nil {

		// query param nodes.uptime
		var qrNodesUptime int64

		if o.NodesUptime != nil {
			qrNodesUptime = *o.NodesUptime
		}
		qNodesUptime := swag.FormatInt64(qrNodesUptime)
		if qNodesUptime != "" {

			if err := r.SetQueryParam("nodes.uptime", qNodesUptime); err != nil {
				return err
			}
		}
	}

	if o.NodesUUID != nil {

		// query param nodes.uuid
		var qrNodesUUID string

		if o.NodesUUID != nil {
			qrNodesUUID = *o.NodesUUID
		}
		qNodesUUID := qrNodesUUID
		if qNodesUUID != "" {

			if err := r.SetQueryParam("nodes.uuid", qNodesUUID); err != nil {
				return err
			}
		}
	}

	if o.NodesVendorSerialNumber != nil {

		// query param nodes.vendor_serial_number
		var qrNodesVendorSerialNumber string

		if o.NodesVendorSerialNumber != nil {
			qrNodesVendorSerialNumber = *o.NodesVendorSerialNumber
		}
		qNodesVendorSerialNumber := qrNodesVendorSerialNumber
		if qNodesVendorSerialNumber != "" {

			if err := r.SetQueryParam("nodes.vendor_serial_number", qNodesVendorSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.ServiceIPAddress != nil {

		// query param service_ip.address
		var qrServiceIPAddress string

		if o.ServiceIPAddress != nil {
			qrServiceIPAddress = *o.ServiceIPAddress
		}
		qServiceIPAddress := qrServiceIPAddress
		if qServiceIPAddress != "" {

			if err := r.SetQueryParam("service_ip.address", qServiceIPAddress); err != nil {
				return err
			}
		}
	}

	if o.ServiceIPGateway != nil {

		// query param service_ip.gateway
		var qrServiceIPGateway string

		if o.ServiceIPGateway != nil {
			qrServiceIPGateway = *o.ServiceIPGateway
		}
		qServiceIPGateway := qrServiceIPGateway
		if qServiceIPGateway != "" {

			if err := r.SetQueryParam("service_ip.gateway", qServiceIPGateway); err != nil {
				return err
			}
		}
	}

	if o.ServiceIPNetmask != nil {

		// query param service_ip.netmask
		var qrServiceIPNetmask string

		if o.ServiceIPNetmask != nil {
			qrServiceIPNetmask = *o.ServiceIPNetmask
		}
		qServiceIPNetmask := qrServiceIPNetmask
		if qServiceIPNetmask != "" {

			if err := r.SetQueryParam("service_ip.netmask", qServiceIPNetmask); err != nil {
				return err
			}
		}
	}

	if o.SoftwareVersionFull != nil {

		// query param software.version.full
		var qrSoftwareVersionFull string

		if o.SoftwareVersionFull != nil {
			qrSoftwareVersionFull = *o.SoftwareVersionFull
		}
		qSoftwareVersionFull := qrSoftwareVersionFull
		if qSoftwareVersionFull != "" {

			if err := r.SetQueryParam("software.version.full", qSoftwareVersionFull); err != nil {
				return err
			}
		}
	}

	if o.SoftwareVersionGeneration != nil {

		// query param software.version.generation
		var qrSoftwareVersionGeneration int64

		if o.SoftwareVersionGeneration != nil {
			qrSoftwareVersionGeneration = *o.SoftwareVersionGeneration
		}
		qSoftwareVersionGeneration := swag.FormatInt64(qrSoftwareVersionGeneration)
		if qSoftwareVersionGeneration != "" {

			if err := r.SetQueryParam("software.version.generation", qSoftwareVersionGeneration); err != nil {
				return err
			}
		}
	}

	if o.SoftwareVersionMajor != nil {

		// query param software.version.major
		var qrSoftwareVersionMajor int64

		if o.SoftwareVersionMajor != nil {
			qrSoftwareVersionMajor = *o.SoftwareVersionMajor
		}
		qSoftwareVersionMajor := swag.FormatInt64(qrSoftwareVersionMajor)
		if qSoftwareVersionMajor != "" {

			if err := r.SetQueryParam("software.version.major", qSoftwareVersionMajor); err != nil {
				return err
			}
		}
	}

	if o.SoftwareVersionMinor != nil {

		// query param software.version.minor
		var qrSoftwareVersionMinor int64

		if o.SoftwareVersionMinor != nil {
			qrSoftwareVersionMinor = *o.SoftwareVersionMinor
		}
		qSoftwareVersionMinor := swag.FormatInt64(qrSoftwareVersionMinor)
		if qSoftwareVersionMinor != "" {

			if err := r.SetQueryParam("software.version.minor", qSoftwareVersionMinor); err != nil {
				return err
			}
		}
	}

	if o.SoftwareVersionPatch != nil {

		// query param software.version.patch
		var qrSoftwareVersionPatch string

		if o.SoftwareVersionPatch != nil {
			qrSoftwareVersionPatch = *o.SoftwareVersionPatch
		}
		qSoftwareVersionPatch := qrSoftwareVersionPatch
		if qSoftwareVersionPatch != "" {

			if err := r.SetQueryParam("software.version.patch", qSoftwareVersionPatch); err != nil {
				return err
			}
		}
	}

	if o.UUID != nil {

		// query param uuid
		var qrUUID string

		if o.UUID != nil {
			qrUUID = *o.UUID
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamDcnClusterGet binds the parameter fields
func (o *DcnClusterGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}
