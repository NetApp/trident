// Code generated by go-swagger; DO NOT EDIT.

package dcn

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDcnClusterSoftwarePackageCollectionGetParams creates a new DcnClusterSoftwarePackageCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDcnClusterSoftwarePackageCollectionGetParams() *DcnClusterSoftwarePackageCollectionGetParams {
	return &DcnClusterSoftwarePackageCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDcnClusterSoftwarePackageCollectionGetParamsWithTimeout creates a new DcnClusterSoftwarePackageCollectionGetParams object
// with the ability to set a timeout on a request.
func NewDcnClusterSoftwarePackageCollectionGetParamsWithTimeout(timeout time.Duration) *DcnClusterSoftwarePackageCollectionGetParams {
	return &DcnClusterSoftwarePackageCollectionGetParams{
		timeout: timeout,
	}
}

// NewDcnClusterSoftwarePackageCollectionGetParamsWithContext creates a new DcnClusterSoftwarePackageCollectionGetParams object
// with the ability to set a context for a request.
func NewDcnClusterSoftwarePackageCollectionGetParamsWithContext(ctx context.Context) *DcnClusterSoftwarePackageCollectionGetParams {
	return &DcnClusterSoftwarePackageCollectionGetParams{
		Context: ctx,
	}
}

// NewDcnClusterSoftwarePackageCollectionGetParamsWithHTTPClient creates a new DcnClusterSoftwarePackageCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewDcnClusterSoftwarePackageCollectionGetParamsWithHTTPClient(client *http.Client) *DcnClusterSoftwarePackageCollectionGetParams {
	return &DcnClusterSoftwarePackageCollectionGetParams{
		HTTPClient: client,
	}
}

/*
DcnClusterSoftwarePackageCollectionGetParams contains all the parameters to send to the API endpoint

	for the dcn cluster software package collection get operation.

	Typically these are written to a http.Request.
*/
type DcnClusterSoftwarePackageCollectionGetParams struct {

	/* Compatible.

	   Filter by compatible
	*/
	Compatible *bool

	/* CreateTime.

	   Filter by create_time
	*/
	CreateTime *string

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* InstallStatusActive.

	   Filter by install_status.active
	*/
	InstallStatusActive *bool

	/* InstallStatusDuration.

	   Filter by install_status.duration
	*/
	InstallStatusDuration *string

	/* InstallStatusMessage.

	   Filter by install_status.message
	*/
	InstallStatusMessage *string

	/* InstallStatusStartTime.

	   Filter by install_status.start_time
	*/
	InstallStatusStartTime *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* Size.

	   Filter by size
	*/
	Size *int64

	/* Staged.

	   Filter by staged
	*/
	Staged *bool

	/* State.

	   Filter by state
	*/
	State *string

	/* UUID.

	   Filter by uuid
	*/
	UUID *string

	/* VersionFull.

	   Filter by version.full
	*/
	VersionFull *string

	/* VersionGeneration.

	   Filter by version.generation
	*/
	VersionGeneration *int64

	/* VersionMajor.

	   Filter by version.major
	*/
	VersionMajor *int64

	/* VersionMinor.

	   Filter by version.minor
	*/
	VersionMinor *int64

	/* VersionPatch.

	   Filter by version.patch
	*/
	VersionPatch *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the dcn cluster software package collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DcnClusterSoftwarePackageCollectionGetParams) WithDefaults() *DcnClusterSoftwarePackageCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the dcn cluster software package collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DcnClusterSoftwarePackageCollectionGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := DcnClusterSoftwarePackageCollectionGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) WithTimeout(timeout time.Duration) *DcnClusterSoftwarePackageCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) WithContext(ctx context.Context) *DcnClusterSoftwarePackageCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) WithHTTPClient(client *http.Client) *DcnClusterSoftwarePackageCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCompatible adds the compatible to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) WithCompatible(compatible *bool) *DcnClusterSoftwarePackageCollectionGetParams {
	o.SetCompatible(compatible)
	return o
}

// SetCompatible adds the compatible to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) SetCompatible(compatible *bool) {
	o.Compatible = compatible
}

// WithCreateTime adds the createTime to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) WithCreateTime(createTime *string) *DcnClusterSoftwarePackageCollectionGetParams {
	o.SetCreateTime(createTime)
	return o
}

// SetCreateTime adds the createTime to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) SetCreateTime(createTime *string) {
	o.CreateTime = createTime
}

// WithFields adds the fields to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) WithFields(fields []string) *DcnClusterSoftwarePackageCollectionGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithInstallStatusActive adds the installStatusActive to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) WithInstallStatusActive(installStatusActive *bool) *DcnClusterSoftwarePackageCollectionGetParams {
	o.SetInstallStatusActive(installStatusActive)
	return o
}

// SetInstallStatusActive adds the installStatusActive to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) SetInstallStatusActive(installStatusActive *bool) {
	o.InstallStatusActive = installStatusActive
}

// WithInstallStatusDuration adds the installStatusDuration to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) WithInstallStatusDuration(installStatusDuration *string) *DcnClusterSoftwarePackageCollectionGetParams {
	o.SetInstallStatusDuration(installStatusDuration)
	return o
}

// SetInstallStatusDuration adds the installStatusDuration to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) SetInstallStatusDuration(installStatusDuration *string) {
	o.InstallStatusDuration = installStatusDuration
}

// WithInstallStatusMessage adds the installStatusMessage to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) WithInstallStatusMessage(installStatusMessage *string) *DcnClusterSoftwarePackageCollectionGetParams {
	o.SetInstallStatusMessage(installStatusMessage)
	return o
}

// SetInstallStatusMessage adds the installStatusMessage to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) SetInstallStatusMessage(installStatusMessage *string) {
	o.InstallStatusMessage = installStatusMessage
}

// WithInstallStatusStartTime adds the installStatusStartTime to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) WithInstallStatusStartTime(installStatusStartTime *string) *DcnClusterSoftwarePackageCollectionGetParams {
	o.SetInstallStatusStartTime(installStatusStartTime)
	return o
}

// SetInstallStatusStartTime adds the installStatusStartTime to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) SetInstallStatusStartTime(installStatusStartTime *string) {
	o.InstallStatusStartTime = installStatusStartTime
}

// WithMaxRecords adds the maxRecords to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) WithMaxRecords(maxRecords *int64) *DcnClusterSoftwarePackageCollectionGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithOrderBy adds the orderBy to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) WithOrderBy(orderBy []string) *DcnClusterSoftwarePackageCollectionGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithReturnRecords adds the returnRecords to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) WithReturnRecords(returnRecords *bool) *DcnClusterSoftwarePackageCollectionGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) WithReturnTimeout(returnTimeout *int64) *DcnClusterSoftwarePackageCollectionGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithSize adds the size to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) WithSize(size *int64) *DcnClusterSoftwarePackageCollectionGetParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) SetSize(size *int64) {
	o.Size = size
}

// WithStaged adds the staged to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) WithStaged(staged *bool) *DcnClusterSoftwarePackageCollectionGetParams {
	o.SetStaged(staged)
	return o
}

// SetStaged adds the staged to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) SetStaged(staged *bool) {
	o.Staged = staged
}

// WithState adds the state to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) WithState(state *string) *DcnClusterSoftwarePackageCollectionGetParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) SetState(state *string) {
	o.State = state
}

// WithUUID adds the uuid to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) WithUUID(uuid *string) *DcnClusterSoftwarePackageCollectionGetParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) SetUUID(uuid *string) {
	o.UUID = uuid
}

// WithVersionFull adds the versionFull to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) WithVersionFull(versionFull *string) *DcnClusterSoftwarePackageCollectionGetParams {
	o.SetVersionFull(versionFull)
	return o
}

// SetVersionFull adds the versionFull to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) SetVersionFull(versionFull *string) {
	o.VersionFull = versionFull
}

// WithVersionGeneration adds the versionGeneration to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) WithVersionGeneration(versionGeneration *int64) *DcnClusterSoftwarePackageCollectionGetParams {
	o.SetVersionGeneration(versionGeneration)
	return o
}

// SetVersionGeneration adds the versionGeneration to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) SetVersionGeneration(versionGeneration *int64) {
	o.VersionGeneration = versionGeneration
}

// WithVersionMajor adds the versionMajor to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) WithVersionMajor(versionMajor *int64) *DcnClusterSoftwarePackageCollectionGetParams {
	o.SetVersionMajor(versionMajor)
	return o
}

// SetVersionMajor adds the versionMajor to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) SetVersionMajor(versionMajor *int64) {
	o.VersionMajor = versionMajor
}

// WithVersionMinor adds the versionMinor to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) WithVersionMinor(versionMinor *int64) *DcnClusterSoftwarePackageCollectionGetParams {
	o.SetVersionMinor(versionMinor)
	return o
}

// SetVersionMinor adds the versionMinor to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) SetVersionMinor(versionMinor *int64) {
	o.VersionMinor = versionMinor
}

// WithVersionPatch adds the versionPatch to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) WithVersionPatch(versionPatch *string) *DcnClusterSoftwarePackageCollectionGetParams {
	o.SetVersionPatch(versionPatch)
	return o
}

// SetVersionPatch adds the versionPatch to the dcn cluster software package collection get params
func (o *DcnClusterSoftwarePackageCollectionGetParams) SetVersionPatch(versionPatch *string) {
	o.VersionPatch = versionPatch
}

// WriteToRequest writes these params to a swagger request
func (o *DcnClusterSoftwarePackageCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Compatible != nil {

		// query param compatible
		var qrCompatible bool

		if o.Compatible != nil {
			qrCompatible = *o.Compatible
		}
		qCompatible := swag.FormatBool(qrCompatible)
		if qCompatible != "" {

			if err := r.SetQueryParam("compatible", qCompatible); err != nil {
				return err
			}
		}
	}

	if o.CreateTime != nil {

		// query param create_time
		var qrCreateTime string

		if o.CreateTime != nil {
			qrCreateTime = *o.CreateTime
		}
		qCreateTime := qrCreateTime
		if qCreateTime != "" {

			if err := r.SetQueryParam("create_time", qCreateTime); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.InstallStatusActive != nil {

		// query param install_status.active
		var qrInstallStatusActive bool

		if o.InstallStatusActive != nil {
			qrInstallStatusActive = *o.InstallStatusActive
		}
		qInstallStatusActive := swag.FormatBool(qrInstallStatusActive)
		if qInstallStatusActive != "" {

			if err := r.SetQueryParam("install_status.active", qInstallStatusActive); err != nil {
				return err
			}
		}
	}

	if o.InstallStatusDuration != nil {

		// query param install_status.duration
		var qrInstallStatusDuration string

		if o.InstallStatusDuration != nil {
			qrInstallStatusDuration = *o.InstallStatusDuration
		}
		qInstallStatusDuration := qrInstallStatusDuration
		if qInstallStatusDuration != "" {

			if err := r.SetQueryParam("install_status.duration", qInstallStatusDuration); err != nil {
				return err
			}
		}
	}

	if o.InstallStatusMessage != nil {

		// query param install_status.message
		var qrInstallStatusMessage string

		if o.InstallStatusMessage != nil {
			qrInstallStatusMessage = *o.InstallStatusMessage
		}
		qInstallStatusMessage := qrInstallStatusMessage
		if qInstallStatusMessage != "" {

			if err := r.SetQueryParam("install_status.message", qInstallStatusMessage); err != nil {
				return err
			}
		}
	}

	if o.InstallStatusStartTime != nil {

		// query param install_status.start_time
		var qrInstallStatusStartTime string

		if o.InstallStatusStartTime != nil {
			qrInstallStatusStartTime = *o.InstallStatusStartTime
		}
		qInstallStatusStartTime := qrInstallStatusStartTime
		if qInstallStatusStartTime != "" {

			if err := r.SetQueryParam("install_status.start_time", qInstallStatusStartTime); err != nil {
				return err
			}
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.Size != nil {

		// query param size
		var qrSize int64

		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt64(qrSize)
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if o.Staged != nil {

		// query param staged
		var qrStaged bool

		if o.Staged != nil {
			qrStaged = *o.Staged
		}
		qStaged := swag.FormatBool(qrStaged)
		if qStaged != "" {

			if err := r.SetQueryParam("staged", qStaged); err != nil {
				return err
			}
		}
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.UUID != nil {

		// query param uuid
		var qrUUID string

		if o.UUID != nil {
			qrUUID = *o.UUID
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if o.VersionFull != nil {

		// query param version.full
		var qrVersionFull string

		if o.VersionFull != nil {
			qrVersionFull = *o.VersionFull
		}
		qVersionFull := qrVersionFull
		if qVersionFull != "" {

			if err := r.SetQueryParam("version.full", qVersionFull); err != nil {
				return err
			}
		}
	}

	if o.VersionGeneration != nil {

		// query param version.generation
		var qrVersionGeneration int64

		if o.VersionGeneration != nil {
			qrVersionGeneration = *o.VersionGeneration
		}
		qVersionGeneration := swag.FormatInt64(qrVersionGeneration)
		if qVersionGeneration != "" {

			if err := r.SetQueryParam("version.generation", qVersionGeneration); err != nil {
				return err
			}
		}
	}

	if o.VersionMajor != nil {

		// query param version.major
		var qrVersionMajor int64

		if o.VersionMajor != nil {
			qrVersionMajor = *o.VersionMajor
		}
		qVersionMajor := swag.FormatInt64(qrVersionMajor)
		if qVersionMajor != "" {

			if err := r.SetQueryParam("version.major", qVersionMajor); err != nil {
				return err
			}
		}
	}

	if o.VersionMinor != nil {

		// query param version.minor
		var qrVersionMinor int64

		if o.VersionMinor != nil {
			qrVersionMinor = *o.VersionMinor
		}
		qVersionMinor := swag.FormatInt64(qrVersionMinor)
		if qVersionMinor != "" {

			if err := r.SetQueryParam("version.minor", qVersionMinor); err != nil {
				return err
			}
		}
	}

	if o.VersionPatch != nil {

		// query param version.patch
		var qrVersionPatch string

		if o.VersionPatch != nil {
			qrVersionPatch = *o.VersionPatch
		}
		qVersionPatch := qrVersionPatch
		if qVersionPatch != "" {

			if err := r.SetQueryParam("version.patch", qVersionPatch); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamDcnClusterSoftwarePackageCollectionGet binds the parameter fields
func (o *DcnClusterSoftwarePackageCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamDcnClusterSoftwarePackageCollectionGet binds the parameter order_by
func (o *DcnClusterSoftwarePackageCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
