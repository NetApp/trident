// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DataSourceType Types of data source:
// * <i>volume</i> - The data source type is volume.
// * <i>bucket</i> - The data source type is bucket.
//
// Example: volume
//
// swagger:model data_source_type
type DataSourceType string

func NewDataSourceType(value DataSourceType) *DataSourceType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DataSourceType.
func (m DataSourceType) Pointer() *DataSourceType {
	return &m
}

const (

	// DataSourceTypeVolume captures enum value "volume"
	DataSourceTypeVolume DataSourceType = "volume"

	// DataSourceTypeBucket captures enum value "bucket"
	DataSourceTypeBucket DataSourceType = "bucket"
)

// for schema
var dataSourceTypeEnum []interface{}

func init() {
	var res []DataSourceType
	if err := json.Unmarshal([]byte(`["volume","bucket"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataSourceTypeEnum = append(dataSourceTypeEnum, v)
	}
}

func (m DataSourceType) validateDataSourceTypeEnum(path, location string, value DataSourceType) error {
	if err := validate.EnumCase(path, location, value, dataSourceTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this data source type
func (m DataSourceType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDataSourceTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this data source type based on context it is used
func (m DataSourceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
