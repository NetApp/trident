// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PerformanceMetricSvmReference Performance numbers, such as IOPS latency and throughput, for SVM protocols.
//
// swagger:model performance_metric_svm_reference
type PerformanceMetricSvmReference struct {

	// links
	Links *PerformanceMetricSvmReferenceInlineLinks `json:"_links,omitempty"`

	// The duration over which this sample is calculated. The time durations are represented in the ISO-8601 standard format. Samples can be calculated over the following durations:
	//
	// Example: PT15S
	// Read Only: true
	// Enum: ["PT15S","PT4M","PT30M","PT2H","P1D","PT5M"]
	Duration *string `json:"duration,omitempty"`

	// iops
	Iops *PerformanceMetricSvmReferenceInlineIops `json:"iops,omitempty"`

	// latency
	Latency *PerformanceMetricSvmReferenceInlineLatency `json:"latency,omitempty"`

	// Any errors associated with the sample. For example, if the aggregation of data over multiple nodes fails then any of the partial errors might be returned, "ok" on success, or "error" on any internal uncategorized failure. Whenever a sample collection is missed but done at a later time, it is back filled to the previous 15 second timestamp and tagged with "backfilled_data". "Inconsistent_ delta_time" is encountered when the time between two collections is not the same for all nodes. Therefore, the aggregated value might be over or under inflated. "Negative_delta" is returned when an expected monotonically increasing value has decreased in value. "Inconsistent_old_data" is returned when one or more nodes do not have the latest data.
	// Example: ok
	// Read Only: true
	// Enum: ["ok","error","partial_no_data","partial_no_response","partial_other_error","negative_delta","not_found","backfilled_data","inconsistent_delta_time","inconsistent_old_data","partial_no_uuid"]
	Status *string `json:"status,omitempty"`

	// throughput
	Throughput *PerformanceMetricSvmReferenceInlineThroughput `json:"throughput,omitempty"`

	// The timestamp of the performance data.
	// Example: 2017-01-25 11:20:13+00:00
	// Read Only: true
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp,omitempty"`
}

// Validate validates this performance metric svm reference
func (m *PerformanceMetricSvmReference) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIops(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThroughput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceMetricSvmReference) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

var performanceMetricSvmReferenceTypeDurationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PT15S","PT4M","PT30M","PT2H","P1D","PT5M"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		performanceMetricSvmReferenceTypeDurationPropEnum = append(performanceMetricSvmReferenceTypeDurationPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// performance_metric_svm_reference
	// PerformanceMetricSvmReference
	// duration
	// Duration
	// PT15S
	// END DEBUGGING
	// PerformanceMetricSvmReferenceDurationPT15S captures enum value "PT15S"
	PerformanceMetricSvmReferenceDurationPT15S string = "PT15S"

	// BEGIN DEBUGGING
	// performance_metric_svm_reference
	// PerformanceMetricSvmReference
	// duration
	// Duration
	// PT4M
	// END DEBUGGING
	// PerformanceMetricSvmReferenceDurationPT4M captures enum value "PT4M"
	PerformanceMetricSvmReferenceDurationPT4M string = "PT4M"

	// BEGIN DEBUGGING
	// performance_metric_svm_reference
	// PerformanceMetricSvmReference
	// duration
	// Duration
	// PT30M
	// END DEBUGGING
	// PerformanceMetricSvmReferenceDurationPT30M captures enum value "PT30M"
	PerformanceMetricSvmReferenceDurationPT30M string = "PT30M"

	// BEGIN DEBUGGING
	// performance_metric_svm_reference
	// PerformanceMetricSvmReference
	// duration
	// Duration
	// PT2H
	// END DEBUGGING
	// PerformanceMetricSvmReferenceDurationPT2H captures enum value "PT2H"
	PerformanceMetricSvmReferenceDurationPT2H string = "PT2H"

	// BEGIN DEBUGGING
	// performance_metric_svm_reference
	// PerformanceMetricSvmReference
	// duration
	// Duration
	// P1D
	// END DEBUGGING
	// PerformanceMetricSvmReferenceDurationP1D captures enum value "P1D"
	PerformanceMetricSvmReferenceDurationP1D string = "P1D"

	// BEGIN DEBUGGING
	// performance_metric_svm_reference
	// PerformanceMetricSvmReference
	// duration
	// Duration
	// PT5M
	// END DEBUGGING
	// PerformanceMetricSvmReferenceDurationPT5M captures enum value "PT5M"
	PerformanceMetricSvmReferenceDurationPT5M string = "PT5M"
)

// prop value enum
func (m *PerformanceMetricSvmReference) validateDurationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, performanceMetricSvmReferenceTypeDurationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PerformanceMetricSvmReference) validateDuration(formats strfmt.Registry) error {
	if swag.IsZero(m.Duration) { // not required
		return nil
	}

	// value enum
	if err := m.validateDurationEnum("duration", "body", *m.Duration); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceMetricSvmReference) validateIops(formats strfmt.Registry) error {
	if swag.IsZero(m.Iops) { // not required
		return nil
	}

	if m.Iops != nil {
		if err := m.Iops.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iops")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceMetricSvmReference) validateLatency(formats strfmt.Registry) error {
	if swag.IsZero(m.Latency) { // not required
		return nil
	}

	if m.Latency != nil {
		if err := m.Latency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latency")
			}
			return err
		}
	}

	return nil
}

var performanceMetricSvmReferenceTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","error","partial_no_data","partial_no_response","partial_other_error","negative_delta","not_found","backfilled_data","inconsistent_delta_time","inconsistent_old_data","partial_no_uuid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		performanceMetricSvmReferenceTypeStatusPropEnum = append(performanceMetricSvmReferenceTypeStatusPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// performance_metric_svm_reference
	// PerformanceMetricSvmReference
	// status
	// Status
	// ok
	// END DEBUGGING
	// PerformanceMetricSvmReferenceStatusOk captures enum value "ok"
	PerformanceMetricSvmReferenceStatusOk string = "ok"

	// BEGIN DEBUGGING
	// performance_metric_svm_reference
	// PerformanceMetricSvmReference
	// status
	// Status
	// error
	// END DEBUGGING
	// PerformanceMetricSvmReferenceStatusError captures enum value "error"
	PerformanceMetricSvmReferenceStatusError string = "error"

	// BEGIN DEBUGGING
	// performance_metric_svm_reference
	// PerformanceMetricSvmReference
	// status
	// Status
	// partial_no_data
	// END DEBUGGING
	// PerformanceMetricSvmReferenceStatusPartialNoData captures enum value "partial_no_data"
	PerformanceMetricSvmReferenceStatusPartialNoData string = "partial_no_data"

	// BEGIN DEBUGGING
	// performance_metric_svm_reference
	// PerformanceMetricSvmReference
	// status
	// Status
	// partial_no_response
	// END DEBUGGING
	// PerformanceMetricSvmReferenceStatusPartialNoResponse captures enum value "partial_no_response"
	PerformanceMetricSvmReferenceStatusPartialNoResponse string = "partial_no_response"

	// BEGIN DEBUGGING
	// performance_metric_svm_reference
	// PerformanceMetricSvmReference
	// status
	// Status
	// partial_other_error
	// END DEBUGGING
	// PerformanceMetricSvmReferenceStatusPartialOtherError captures enum value "partial_other_error"
	PerformanceMetricSvmReferenceStatusPartialOtherError string = "partial_other_error"

	// BEGIN DEBUGGING
	// performance_metric_svm_reference
	// PerformanceMetricSvmReference
	// status
	// Status
	// negative_delta
	// END DEBUGGING
	// PerformanceMetricSvmReferenceStatusNegativeDelta captures enum value "negative_delta"
	PerformanceMetricSvmReferenceStatusNegativeDelta string = "negative_delta"

	// BEGIN DEBUGGING
	// performance_metric_svm_reference
	// PerformanceMetricSvmReference
	// status
	// Status
	// not_found
	// END DEBUGGING
	// PerformanceMetricSvmReferenceStatusNotFound captures enum value "not_found"
	PerformanceMetricSvmReferenceStatusNotFound string = "not_found"

	// BEGIN DEBUGGING
	// performance_metric_svm_reference
	// PerformanceMetricSvmReference
	// status
	// Status
	// backfilled_data
	// END DEBUGGING
	// PerformanceMetricSvmReferenceStatusBackfilledData captures enum value "backfilled_data"
	PerformanceMetricSvmReferenceStatusBackfilledData string = "backfilled_data"

	// BEGIN DEBUGGING
	// performance_metric_svm_reference
	// PerformanceMetricSvmReference
	// status
	// Status
	// inconsistent_delta_time
	// END DEBUGGING
	// PerformanceMetricSvmReferenceStatusInconsistentDeltaTime captures enum value "inconsistent_delta_time"
	PerformanceMetricSvmReferenceStatusInconsistentDeltaTime string = "inconsistent_delta_time"

	// BEGIN DEBUGGING
	// performance_metric_svm_reference
	// PerformanceMetricSvmReference
	// status
	// Status
	// inconsistent_old_data
	// END DEBUGGING
	// PerformanceMetricSvmReferenceStatusInconsistentOldData captures enum value "inconsistent_old_data"
	PerformanceMetricSvmReferenceStatusInconsistentOldData string = "inconsistent_old_data"

	// BEGIN DEBUGGING
	// performance_metric_svm_reference
	// PerformanceMetricSvmReference
	// status
	// Status
	// partial_no_uuid
	// END DEBUGGING
	// PerformanceMetricSvmReferenceStatusPartialNoUUID captures enum value "partial_no_uuid"
	PerformanceMetricSvmReferenceStatusPartialNoUUID string = "partial_no_uuid"
)

// prop value enum
func (m *PerformanceMetricSvmReference) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, performanceMetricSvmReferenceTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PerformanceMetricSvmReference) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceMetricSvmReference) validateThroughput(formats strfmt.Registry) error {
	if swag.IsZero(m.Throughput) { // not required
		return nil
	}

	if m.Throughput != nil {
		if err := m.Throughput.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throughput")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceMetricSvmReference) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this performance metric svm reference based on the context it is used
func (m *PerformanceMetricSvmReference) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDuration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIops(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLatency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThroughput(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceMetricSvmReference) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceMetricSvmReference) contextValidateDuration(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "duration", "body", m.Duration); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceMetricSvmReference) contextValidateIops(ctx context.Context, formats strfmt.Registry) error {

	if m.Iops != nil {
		if err := m.Iops.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iops")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceMetricSvmReference) contextValidateLatency(ctx context.Context, formats strfmt.Registry) error {

	if m.Latency != nil {
		if err := m.Latency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latency")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceMetricSvmReference) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceMetricSvmReference) contextValidateThroughput(ctx context.Context, formats strfmt.Registry) error {

	if m.Throughput != nil {
		if err := m.Throughput.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throughput")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceMetricSvmReference) contextValidateTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceMetricSvmReference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceMetricSvmReference) UnmarshalBinary(b []byte) error {
	var res PerformanceMetricSvmReference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceMetricSvmReferenceInlineIops The rate of I/O operations observed at the storage object.
//
// swagger:model performance_metric_svm_reference_inline_iops
type PerformanceMetricSvmReferenceInlineIops struct {

	// Performance metric for other I/O operations. Other I/O operations can be metadata operations, such as directory lookups and so on.
	Other *int64 `json:"other,omitempty"`

	// Performance metric for read I/O operations.
	// Example: 200
	Read *int64 `json:"read,omitempty"`

	// Performance metric aggregated over all types of I/O operations.
	// Example: 1000
	Total *int64 `json:"total,omitempty"`

	// Performance metric for write I/O operations.
	// Example: 100
	Write *int64 `json:"write,omitempty"`
}

// Validate validates this performance metric svm reference inline iops
func (m *PerformanceMetricSvmReferenceInlineIops) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this performance metric svm reference inline iops based on the context it is used
func (m *PerformanceMetricSvmReferenceInlineIops) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceMetricSvmReferenceInlineIops) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceMetricSvmReferenceInlineIops) UnmarshalBinary(b []byte) error {
	var res PerformanceMetricSvmReferenceInlineIops
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceMetricSvmReferenceInlineLatency The round trip latency in microseconds observed at the storage object.
//
// swagger:model performance_metric_svm_reference_inline_latency
type PerformanceMetricSvmReferenceInlineLatency struct {

	// Performance metric for other I/O operations. Other I/O operations can be metadata operations, such as directory lookups and so on.
	Other *int64 `json:"other,omitempty"`

	// Performance metric for read I/O operations.
	// Example: 200
	Read *int64 `json:"read,omitempty"`

	// Performance metric aggregated over all types of I/O operations.
	// Example: 1000
	Total *int64 `json:"total,omitempty"`

	// Performance metric for write I/O operations.
	// Example: 100
	Write *int64 `json:"write,omitempty"`
}

// Validate validates this performance metric svm reference inline latency
func (m *PerformanceMetricSvmReferenceInlineLatency) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this performance metric svm reference inline latency based on the context it is used
func (m *PerformanceMetricSvmReferenceInlineLatency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceMetricSvmReferenceInlineLatency) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceMetricSvmReferenceInlineLatency) UnmarshalBinary(b []byte) error {
	var res PerformanceMetricSvmReferenceInlineLatency
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceMetricSvmReferenceInlineLinks performance metric svm reference inline links
//
// swagger:model performance_metric_svm_reference_inline__links
type PerformanceMetricSvmReferenceInlineLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this performance metric svm reference inline links
func (m *PerformanceMetricSvmReferenceInlineLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceMetricSvmReferenceInlineLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this performance metric svm reference inline links based on the context it is used
func (m *PerformanceMetricSvmReferenceInlineLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceMetricSvmReferenceInlineLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceMetricSvmReferenceInlineLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceMetricSvmReferenceInlineLinks) UnmarshalBinary(b []byte) error {
	var res PerformanceMetricSvmReferenceInlineLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceMetricSvmReferenceInlineThroughput The rate of throughput bytes per second observed at the storage object.
//
// swagger:model performance_metric_svm_reference_inline_throughput
type PerformanceMetricSvmReferenceInlineThroughput struct {

	// Performance metric for read I/O operations.
	// Example: 200
	Read *int64 `json:"read,omitempty"`

	// Performance metric aggregated over all types of I/O operations.
	// Example: 1000
	Total *int64 `json:"total,omitempty"`

	// Performance metric for write I/O operations.
	// Example: 100
	Write *int64 `json:"write,omitempty"`
}

// Validate validates this performance metric svm reference inline throughput
func (m *PerformanceMetricSvmReferenceInlineThroughput) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this performance metric svm reference inline throughput based on the context it is used
func (m *PerformanceMetricSvmReferenceInlineThroughput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceMetricSvmReferenceInlineThroughput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceMetricSvmReferenceInlineThroughput) UnmarshalBinary(b []byte) error {
	var res PerformanceMetricSvmReferenceInlineThroughput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
