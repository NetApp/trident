// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DcnNodeError DCN node error information.
//
// swagger:model dcn_node_error
type DcnNodeError struct {

	// Number count of failed units.
	// Example: 1
	// Read Only: true
	Count *int64 `json:"count,omitempty"`

	// Error code describing the current condition.
	// Example: 111411208
	// Read Only: true
	Message *string `json:"message,omitempty"`

	// unit type
	// Read Only: true
	// Enum: ["over_temperature","fan","psu","CPU","GPU","pcie","dimm","file_system","disk","system","memory","network"]
	UnitType *string `json:"unit_type,omitempty"`
}

// Validate validates this dcn node error
func (m *DcnNodeError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUnitType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dcnNodeErrorTypeUnitTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["over_temperature","fan","psu","CPU","GPU","pcie","dimm","file_system","disk","system","memory","network"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dcnNodeErrorTypeUnitTypePropEnum = append(dcnNodeErrorTypeUnitTypePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// dcn_node_error
	// DcnNodeError
	// unit_type
	// UnitType
	// over_temperature
	// END DEBUGGING
	// DcnNodeErrorUnitTypeOverTemperature captures enum value "over_temperature"
	DcnNodeErrorUnitTypeOverTemperature string = "over_temperature"

	// BEGIN DEBUGGING
	// dcn_node_error
	// DcnNodeError
	// unit_type
	// UnitType
	// fan
	// END DEBUGGING
	// DcnNodeErrorUnitTypeFan captures enum value "fan"
	DcnNodeErrorUnitTypeFan string = "fan"

	// BEGIN DEBUGGING
	// dcn_node_error
	// DcnNodeError
	// unit_type
	// UnitType
	// psu
	// END DEBUGGING
	// DcnNodeErrorUnitTypePsu captures enum value "psu"
	DcnNodeErrorUnitTypePsu string = "psu"

	// BEGIN DEBUGGING
	// dcn_node_error
	// DcnNodeError
	// unit_type
	// UnitType
	// CPU
	// END DEBUGGING
	// DcnNodeErrorUnitTypeCPU captures enum value "CPU"
	DcnNodeErrorUnitTypeCPU string = "CPU"

	// BEGIN DEBUGGING
	// dcn_node_error
	// DcnNodeError
	// unit_type
	// UnitType
	// GPU
	// END DEBUGGING
	// DcnNodeErrorUnitTypeGPU captures enum value "GPU"
	DcnNodeErrorUnitTypeGPU string = "GPU"

	// BEGIN DEBUGGING
	// dcn_node_error
	// DcnNodeError
	// unit_type
	// UnitType
	// pcie
	// END DEBUGGING
	// DcnNodeErrorUnitTypePcie captures enum value "pcie"
	DcnNodeErrorUnitTypePcie string = "pcie"

	// BEGIN DEBUGGING
	// dcn_node_error
	// DcnNodeError
	// unit_type
	// UnitType
	// dimm
	// END DEBUGGING
	// DcnNodeErrorUnitTypeDimm captures enum value "dimm"
	DcnNodeErrorUnitTypeDimm string = "dimm"

	// BEGIN DEBUGGING
	// dcn_node_error
	// DcnNodeError
	// unit_type
	// UnitType
	// file_system
	// END DEBUGGING
	// DcnNodeErrorUnitTypeFileSystem captures enum value "file_system"
	DcnNodeErrorUnitTypeFileSystem string = "file_system"

	// BEGIN DEBUGGING
	// dcn_node_error
	// DcnNodeError
	// unit_type
	// UnitType
	// disk
	// END DEBUGGING
	// DcnNodeErrorUnitTypeDisk captures enum value "disk"
	DcnNodeErrorUnitTypeDisk string = "disk"

	// BEGIN DEBUGGING
	// dcn_node_error
	// DcnNodeError
	// unit_type
	// UnitType
	// system
	// END DEBUGGING
	// DcnNodeErrorUnitTypeSystem captures enum value "system"
	DcnNodeErrorUnitTypeSystem string = "system"

	// BEGIN DEBUGGING
	// dcn_node_error
	// DcnNodeError
	// unit_type
	// UnitType
	// memory
	// END DEBUGGING
	// DcnNodeErrorUnitTypeMemory captures enum value "memory"
	DcnNodeErrorUnitTypeMemory string = "memory"

	// BEGIN DEBUGGING
	// dcn_node_error
	// DcnNodeError
	// unit_type
	// UnitType
	// network
	// END DEBUGGING
	// DcnNodeErrorUnitTypeNetwork captures enum value "network"
	DcnNodeErrorUnitTypeNetwork string = "network"
)

// prop value enum
func (m *DcnNodeError) validateUnitTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dcnNodeErrorTypeUnitTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DcnNodeError) validateUnitType(formats strfmt.Registry) error {
	if swag.IsZero(m.UnitType) { // not required
		return nil
	}

	// value enum
	if err := m.validateUnitTypeEnum("unit_type", "body", *m.UnitType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this dcn node error based on the context it is used
func (m *DcnNodeError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnitType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DcnNodeError) contextValidateCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "count", "body", m.Count); err != nil {
		return err
	}

	return nil
}

func (m *DcnNodeError) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *DcnNodeError) contextValidateUnitType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "unit_type", "body", m.UnitType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DcnNodeError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DcnNodeError) UnmarshalBinary(b []byte) error {
	var res DcnNodeError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
