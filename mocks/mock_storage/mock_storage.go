// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/storage (interfaces: Backend,Pool)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_storage/mock_storage.go github.com/netapp/trident/storage Backend,Pool
//

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"
	sync "sync"
	time "time"

	roaring "github.com/RoaringBitmap/roaring/v2"
	config "github.com/netapp/trident/config"
	storage "github.com/netapp/trident/storage"
	storageattribute "github.com/netapp/trident/storage_attribute"
	models "github.com/netapp/trident/utils/models"
	gomock "go.uber.org/mock/gomock"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
	isgomock struct{}
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// AddStoragePool mocks base method.
func (m *MockBackend) AddStoragePool(pool storage.Pool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddStoragePool", pool)
}

// AddStoragePool indicates an expected call of AddStoragePool.
func (mr *MockBackendMockRecorder) AddStoragePool(pool any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStoragePool", reflect.TypeOf((*MockBackend)(nil).AddStoragePool), pool)
}

// AddVolume mocks base method.
func (m *MockBackend) AddVolume(ctx context.Context, volConfig *storage.VolumeConfig, storagePool storage.Pool, volAttributes map[string]storageattribute.Request, retry bool) (*storage.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVolume", ctx, volConfig, storagePool, volAttributes, retry)
	ret0, _ := ret[0].(*storage.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddVolume indicates an expected call of AddVolume.
func (mr *MockBackendMockRecorder) AddVolume(ctx, volConfig, storagePool, volAttributes, retry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVolume", reflect.TypeOf((*MockBackend)(nil).AddVolume), ctx, volConfig, storagePool, volAttributes, retry)
}

// BackendUUID mocks base method.
func (m *MockBackend) BackendUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackendUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// BackendUUID indicates an expected call of BackendUUID.
func (mr *MockBackendMockRecorder) BackendUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackendUUID", reflect.TypeOf((*MockBackend)(nil).BackendUUID))
}

// CanEnablePublishEnforcement mocks base method.
func (m *MockBackend) CanEnablePublishEnforcement() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanEnablePublishEnforcement")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanEnablePublishEnforcement indicates an expected call of CanEnablePublishEnforcement.
func (mr *MockBackendMockRecorder) CanEnablePublishEnforcement() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanEnablePublishEnforcement", reflect.TypeOf((*MockBackend)(nil).CanEnablePublishEnforcement))
}

// CanGetState mocks base method.
func (m *MockBackend) CanGetState() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanGetState")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanGetState indicates an expected call of CanGetState.
func (mr *MockBackendMockRecorder) CanGetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanGetState", reflect.TypeOf((*MockBackend)(nil).CanGetState))
}

// CanGroupSnapshot mocks base method.
func (m *MockBackend) CanGroupSnapshot() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanGroupSnapshot")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanGroupSnapshot indicates an expected call of CanGroupSnapshot.
func (mr *MockBackendMockRecorder) CanGroupSnapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanGroupSnapshot", reflect.TypeOf((*MockBackend)(nil).CanGroupSnapshot))
}

// CanMirror mocks base method.
func (m *MockBackend) CanMirror() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanMirror")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanMirror indicates an expected call of CanMirror.
func (mr *MockBackendMockRecorder) CanMirror() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanMirror", reflect.TypeOf((*MockBackend)(nil).CanMirror))
}

// CanSnapshot mocks base method.
func (m *MockBackend) CanSnapshot(ctx context.Context, snapConfig *storage.SnapshotConfig, volConfig *storage.VolumeConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanSnapshot", ctx, snapConfig, volConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// CanSnapshot indicates an expected call of CanSnapshot.
func (mr *MockBackendMockRecorder) CanSnapshot(ctx, snapConfig, volConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanSnapshot", reflect.TypeOf((*MockBackend)(nil).CanSnapshot), ctx, snapConfig, volConfig)
}

// CheckMirrorTransferState mocks base method.
func (m *MockBackend) CheckMirrorTransferState(ctx context.Context, pvcVolumeName string) (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckMirrorTransferState", ctx, pvcVolumeName)
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckMirrorTransferState indicates an expected call of CheckMirrorTransferState.
func (mr *MockBackendMockRecorder) CheckMirrorTransferState(ctx, pvcVolumeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckMirrorTransferState", reflect.TypeOf((*MockBackend)(nil).CheckMirrorTransferState), ctx, pvcVolumeName)
}

// ClearStoragePools mocks base method.
func (m *MockBackend) ClearStoragePools() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearStoragePools")
}

// ClearStoragePools indicates an expected call of ClearStoragePools.
func (mr *MockBackendMockRecorder) ClearStoragePools() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearStoragePools", reflect.TypeOf((*MockBackend)(nil).ClearStoragePools))
}

// ClearVolumes mocks base method.
func (m *MockBackend) ClearVolumes() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearVolumes")
}

// ClearVolumes indicates an expected call of ClearVolumes.
func (mr *MockBackendMockRecorder) ClearVolumes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearVolumes", reflect.TypeOf((*MockBackend)(nil).ClearVolumes))
}

// CloneVolume mocks base method.
func (m *MockBackend) CloneVolume(ctx context.Context, sourceVolConfig, cloneVolConfig *storage.VolumeConfig, storagePool storage.Pool, retry bool) (*storage.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneVolume", ctx, sourceVolConfig, cloneVolConfig, storagePool, retry)
	ret0, _ := ret[0].(*storage.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloneVolume indicates an expected call of CloneVolume.
func (mr *MockBackendMockRecorder) CloneVolume(ctx, sourceVolConfig, cloneVolConfig, storagePool, retry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneVolume", reflect.TypeOf((*MockBackend)(nil).CloneVolume), ctx, sourceVolConfig, cloneVolConfig, storagePool, retry)
}

// ConfigRef mocks base method.
func (m *MockBackend) ConfigRef() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigRef")
	ret0, _ := ret[0].(string)
	return ret0
}

// ConfigRef indicates an expected call of ConfigRef.
func (mr *MockBackendMockRecorder) ConfigRef() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigRef", reflect.TypeOf((*MockBackend)(nil).ConfigRef))
}

// ConstructExternal mocks base method.
func (m *MockBackend) ConstructExternal(ctx context.Context) *storage.BackendExternal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstructExternal", ctx)
	ret0, _ := ret[0].(*storage.BackendExternal)
	return ret0
}

// ConstructExternal indicates an expected call of ConstructExternal.
func (mr *MockBackendMockRecorder) ConstructExternal(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstructExternal", reflect.TypeOf((*MockBackend)(nil).ConstructExternal), ctx)
}

// ConstructExternalWithPoolMap mocks base method.
func (m *MockBackend) ConstructExternalWithPoolMap(ctx context.Context, poolMap map[string][]string) *storage.BackendExternal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstructExternalWithPoolMap", ctx, poolMap)
	ret0, _ := ret[0].(*storage.BackendExternal)
	return ret0
}

// ConstructExternalWithPoolMap indicates an expected call of ConstructExternalWithPoolMap.
func (mr *MockBackendMockRecorder) ConstructExternalWithPoolMap(ctx, poolMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstructExternalWithPoolMap", reflect.TypeOf((*MockBackend)(nil).ConstructExternalWithPoolMap), ctx, poolMap)
}

// ConstructGroupSnapshot mocks base method.
func (m *MockBackend) ConstructGroupSnapshot(ctx context.Context, arg1 *storage.GroupSnapshotConfig, snapshots []*storage.Snapshot) (*storage.GroupSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstructGroupSnapshot", ctx, arg1, snapshots)
	ret0, _ := ret[0].(*storage.GroupSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConstructGroupSnapshot indicates an expected call of ConstructGroupSnapshot.
func (mr *MockBackendMockRecorder) ConstructGroupSnapshot(ctx, arg1, snapshots any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstructGroupSnapshot", reflect.TypeOf((*MockBackend)(nil).ConstructGroupSnapshot), ctx, arg1, snapshots)
}

// ConstructPersistent mocks base method.
func (m *MockBackend) ConstructPersistent(ctx context.Context) *storage.BackendPersistent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstructPersistent", ctx)
	ret0, _ := ret[0].(*storage.BackendPersistent)
	return ret0
}

// ConstructPersistent indicates an expected call of ConstructPersistent.
func (mr *MockBackendMockRecorder) ConstructPersistent(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstructPersistent", reflect.TypeOf((*MockBackend)(nil).ConstructPersistent), ctx)
}

// CreateGroupSnapshot mocks base method.
func (m *MockBackend) CreateGroupSnapshot(ctx context.Context, arg1 *storage.GroupSnapshotConfig, target *storage.GroupSnapshotTargetInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroupSnapshot", ctx, arg1, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGroupSnapshot indicates an expected call of CreateGroupSnapshot.
func (mr *MockBackendMockRecorder) CreateGroupSnapshot(ctx, arg1, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupSnapshot", reflect.TypeOf((*MockBackend)(nil).CreateGroupSnapshot), ctx, arg1, target)
}

// CreatePrepare mocks base method.
func (m *MockBackend) CreatePrepare(ctx context.Context, volConfig *storage.VolumeConfig, storagePool storage.Pool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreatePrepare", ctx, volConfig, storagePool)
}

// CreatePrepare indicates an expected call of CreatePrepare.
func (mr *MockBackendMockRecorder) CreatePrepare(ctx, volConfig, storagePool any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrepare", reflect.TypeOf((*MockBackend)(nil).CreatePrepare), ctx, volConfig, storagePool)
}

// CreateSnapshot mocks base method.
func (m *MockBackend) CreateSnapshot(ctx context.Context, snapConfig *storage.SnapshotConfig, volConfig *storage.VolumeConfig) (*storage.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot", ctx, snapConfig, volConfig)
	ret0, _ := ret[0].(*storage.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshot indicates an expected call of CreateSnapshot.
func (mr *MockBackendMockRecorder) CreateSnapshot(ctx, snapConfig, volConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockBackend)(nil).CreateSnapshot), ctx, snapConfig, volConfig)
}

// DeepCopyType mocks base method.
func (m *MockBackend) DeepCopyType() storage.Backend {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeepCopyType")
	ret0, _ := ret[0].(storage.Backend)
	return ret0
}

// DeepCopyType indicates an expected call of DeepCopyType.
func (mr *MockBackendMockRecorder) DeepCopyType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeepCopyType", reflect.TypeOf((*MockBackend)(nil).DeepCopyType))
}

// DeleteSnapshot mocks base method.
func (m *MockBackend) DeleteSnapshot(ctx context.Context, snapConfig *storage.SnapshotConfig, volConfig *storage.VolumeConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", ctx, snapConfig, volConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot.
func (mr *MockBackendMockRecorder) DeleteSnapshot(ctx, snapConfig, volConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockBackend)(nil).DeleteSnapshot), ctx, snapConfig, volConfig)
}

// Driver mocks base method.
func (m *MockBackend) Driver() storage.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(storage.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *MockBackendMockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*MockBackend)(nil).Driver))
}

// EnablePublishEnforcement mocks base method.
func (m *MockBackend) EnablePublishEnforcement(ctx context.Context, volume *storage.Volume) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnablePublishEnforcement", ctx, volume)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnablePublishEnforcement indicates an expected call of EnablePublishEnforcement.
func (mr *MockBackendMockRecorder) EnablePublishEnforcement(ctx, volume any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnablePublishEnforcement", reflect.TypeOf((*MockBackend)(nil).EnablePublishEnforcement), ctx, volume)
}

// EstablishMirror mocks base method.
func (m *MockBackend) EstablishMirror(ctx context.Context, localInternalVolumeName, remoteVolumeHandle, replicationPolicy, replicationSchedule string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstablishMirror", ctx, localInternalVolumeName, remoteVolumeHandle, replicationPolicy, replicationSchedule)
	ret0, _ := ret[0].(error)
	return ret0
}

// EstablishMirror indicates an expected call of EstablishMirror.
func (mr *MockBackendMockRecorder) EstablishMirror(ctx, localInternalVolumeName, remoteVolumeHandle, replicationPolicy, replicationSchedule any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstablishMirror", reflect.TypeOf((*MockBackend)(nil).EstablishMirror), ctx, localInternalVolumeName, remoteVolumeHandle, replicationPolicy, replicationSchedule)
}

// GetBackendState mocks base method.
func (m *MockBackend) GetBackendState(ctx context.Context) (string, *roaring.Bitmap) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackendState", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*roaring.Bitmap)
	return ret0, ret1
}

// GetBackendState indicates an expected call of GetBackendState.
func (mr *MockBackendMockRecorder) GetBackendState(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendState", reflect.TypeOf((*MockBackend)(nil).GetBackendState), ctx)
}

// GetChapInfo mocks base method.
func (m *MockBackend) GetChapInfo(ctx context.Context, volumeName, nodeName string) (*models.IscsiChapInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChapInfo", ctx, volumeName, nodeName)
	ret0, _ := ret[0].(*models.IscsiChapInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChapInfo indicates an expected call of GetChapInfo.
func (mr *MockBackendMockRecorder) GetChapInfo(ctx, volumeName, nodeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChapInfo", reflect.TypeOf((*MockBackend)(nil).GetChapInfo), ctx, volumeName, nodeName)
}

// GetDebugTraceFlags mocks base method.
func (m *MockBackend) GetDebugTraceFlags(ctx context.Context) map[string]bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDebugTraceFlags", ctx)
	ret0, _ := ret[0].(map[string]bool)
	return ret0
}

// GetDebugTraceFlags indicates an expected call of GetDebugTraceFlags.
func (mr *MockBackendMockRecorder) GetDebugTraceFlags(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDebugTraceFlags", reflect.TypeOf((*MockBackend)(nil).GetDebugTraceFlags), ctx)
}

// GetDriverName mocks base method.
func (m *MockBackend) GetDriverName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDriverName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDriverName indicates an expected call of GetDriverName.
func (mr *MockBackendMockRecorder) GetDriverName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriverName", reflect.TypeOf((*MockBackend)(nil).GetDriverName))
}

// GetGroupSnapshotTarget mocks base method.
func (m *MockBackend) GetGroupSnapshotTarget(ctx context.Context, volConfigs []*storage.VolumeConfig) (*storage.GroupSnapshotTargetInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupSnapshotTarget", ctx, volConfigs)
	ret0, _ := ret[0].(*storage.GroupSnapshotTargetInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupSnapshotTarget indicates an expected call of GetGroupSnapshotTarget.
func (mr *MockBackendMockRecorder) GetGroupSnapshotTarget(ctx, volConfigs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupSnapshotTarget", reflect.TypeOf((*MockBackend)(nil).GetGroupSnapshotTarget), ctx, volConfigs)
}

// GetMirrorStatus mocks base method.
func (m *MockBackend) GetMirrorStatus(ctx context.Context, localInternalVolumeName, remoteVolumeHandle string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMirrorStatus", ctx, localInternalVolumeName, remoteVolumeHandle)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMirrorStatus indicates an expected call of GetMirrorStatus.
func (mr *MockBackendMockRecorder) GetMirrorStatus(ctx, localInternalVolumeName, remoteVolumeHandle any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMirrorStatus", reflect.TypeOf((*MockBackend)(nil).GetMirrorStatus), ctx, localInternalVolumeName, remoteVolumeHandle)
}

// GetMirrorTransferTime mocks base method.
func (m *MockBackend) GetMirrorTransferTime(ctx context.Context, pvcVolumeName string) (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMirrorTransferTime", ctx, pvcVolumeName)
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMirrorTransferTime indicates an expected call of GetMirrorTransferTime.
func (mr *MockBackendMockRecorder) GetMirrorTransferTime(ctx, pvcVolumeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMirrorTransferTime", reflect.TypeOf((*MockBackend)(nil).GetMirrorTransferTime), ctx, pvcVolumeName)
}

// GetPhysicalPoolNames mocks base method.
func (m *MockBackend) GetPhysicalPoolNames(ctx context.Context) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhysicalPoolNames", ctx)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetPhysicalPoolNames indicates an expected call of GetPhysicalPoolNames.
func (mr *MockBackendMockRecorder) GetPhysicalPoolNames(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhysicalPoolNames", reflect.TypeOf((*MockBackend)(nil).GetPhysicalPoolNames), ctx)
}

// GetProtocol mocks base method.
func (m *MockBackend) GetProtocol(ctx context.Context) config.Protocol {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProtocol", ctx)
	ret0, _ := ret[0].(config.Protocol)
	return ret0
}

// GetProtocol indicates an expected call of GetProtocol.
func (mr *MockBackendMockRecorder) GetProtocol(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProtocol", reflect.TypeOf((*MockBackend)(nil).GetProtocol), ctx)
}

// GetReplicationDetails mocks base method.
func (m *MockBackend) GetReplicationDetails(ctx context.Context, localInternalVolumeName, remoteVolumeHandle string) (string, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicationDetails", ctx, localInternalVolumeName, remoteVolumeHandle)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetReplicationDetails indicates an expected call of GetReplicationDetails.
func (mr *MockBackendMockRecorder) GetReplicationDetails(ctx, localInternalVolumeName, remoteVolumeHandle any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationDetails", reflect.TypeOf((*MockBackend)(nil).GetReplicationDetails), ctx, localInternalVolumeName, remoteVolumeHandle)
}

// GetSnapshot mocks base method.
func (m *MockBackend) GetSnapshot(ctx context.Context, snapConfig *storage.SnapshotConfig, volConfig *storage.VolumeConfig) (*storage.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshot", ctx, snapConfig, volConfig)
	ret0, _ := ret[0].(*storage.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshot indicates an expected call of GetSnapshot.
func (mr *MockBackendMockRecorder) GetSnapshot(ctx, snapConfig, volConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshot", reflect.TypeOf((*MockBackend)(nil).GetSnapshot), ctx, snapConfig, volConfig)
}

// GetSnapshots mocks base method.
func (m *MockBackend) GetSnapshots(ctx context.Context, volConfig *storage.VolumeConfig) ([]*storage.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshots", ctx, volConfig)
	ret0, _ := ret[0].([]*storage.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshots indicates an expected call of GetSnapshots.
func (mr *MockBackendMockRecorder) GetSnapshots(ctx, volConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshots", reflect.TypeOf((*MockBackend)(nil).GetSnapshots), ctx, volConfig)
}

// GetUniqueKey mocks base method.
func (m *MockBackend) GetUniqueKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUniqueKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUniqueKey indicates an expected call of GetUniqueKey.
func (mr *MockBackendMockRecorder) GetUniqueKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUniqueKey", reflect.TypeOf((*MockBackend)(nil).GetUniqueKey))
}

// GetUpdateType mocks base method.
func (m *MockBackend) GetUpdateType(ctx context.Context, origBackend storage.Backend) *roaring.Bitmap {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdateType", ctx, origBackend)
	ret0, _ := ret[0].(*roaring.Bitmap)
	return ret0
}

// GetUpdateType indicates an expected call of GetUpdateType.
func (mr *MockBackendMockRecorder) GetUpdateType(ctx, origBackend any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateType", reflect.TypeOf((*MockBackend)(nil).GetUpdateType), ctx, origBackend)
}

// GetVolumeForImport mocks base method.
func (m *MockBackend) GetVolumeForImport(ctx context.Context, volumeID string) (*storage.VolumeExternal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeForImport", ctx, volumeID)
	ret0, _ := ret[0].(*storage.VolumeExternal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeForImport indicates an expected call of GetVolumeForImport.
func (mr *MockBackendMockRecorder) GetVolumeForImport(ctx, volumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeForImport", reflect.TypeOf((*MockBackend)(nil).GetVolumeForImport), ctx, volumeID)
}

// HasVolumes mocks base method.
func (m *MockBackend) HasVolumes() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasVolumes")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasVolumes indicates an expected call of HasVolumes.
func (mr *MockBackendMockRecorder) HasVolumes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasVolumes", reflect.TypeOf((*MockBackend)(nil).HasVolumes))
}

// HealVolumePublishEnforcement mocks base method.
func (m *MockBackend) HealVolumePublishEnforcement(ctx context.Context, volume *storage.Volume) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealVolumePublishEnforcement", ctx, volume)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HealVolumePublishEnforcement indicates an expected call of HealVolumePublishEnforcement.
func (mr *MockBackendMockRecorder) HealVolumePublishEnforcement(ctx, volume any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealVolumePublishEnforcement", reflect.TypeOf((*MockBackend)(nil).HealVolumePublishEnforcement), ctx, volume)
}

// ImportVolume mocks base method.
func (m *MockBackend) ImportVolume(ctx context.Context, volConfig *storage.VolumeConfig) (*storage.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportVolume", ctx, volConfig)
	ret0, _ := ret[0].(*storage.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportVolume indicates an expected call of ImportVolume.
func (mr *MockBackendMockRecorder) ImportVolume(ctx, volConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportVolume", reflect.TypeOf((*MockBackend)(nil).ImportVolume), ctx, volConfig)
}

// InvalidateNodeAccess mocks base method.
func (m *MockBackend) InvalidateNodeAccess() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InvalidateNodeAccess")
}

// InvalidateNodeAccess indicates an expected call of InvalidateNodeAccess.
func (mr *MockBackendMockRecorder) InvalidateNodeAccess() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateNodeAccess", reflect.TypeOf((*MockBackend)(nil).InvalidateNodeAccess))
}

// IsCredentialsFieldSet mocks base method.
func (m *MockBackend) IsCredentialsFieldSet(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCredentialsFieldSet", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCredentialsFieldSet indicates an expected call of IsCredentialsFieldSet.
func (mr *MockBackendMockRecorder) IsCredentialsFieldSet(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCredentialsFieldSet", reflect.TypeOf((*MockBackend)(nil).IsCredentialsFieldSet), ctx)
}

// IsNodeAccessUpToDate mocks base method.
func (m *MockBackend) IsNodeAccessUpToDate() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNodeAccessUpToDate")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNodeAccessUpToDate indicates an expected call of IsNodeAccessUpToDate.
func (mr *MockBackendMockRecorder) IsNodeAccessUpToDate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNodeAccessUpToDate", reflect.TypeOf((*MockBackend)(nil).IsNodeAccessUpToDate))
}

// MarshalDriverConfig mocks base method.
func (m *MockBackend) MarshalDriverConfig() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalDriverConfig")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalDriverConfig indicates an expected call of MarshalDriverConfig.
func (mr *MockBackendMockRecorder) MarshalDriverConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalDriverConfig", reflect.TypeOf((*MockBackend)(nil).MarshalDriverConfig))
}

// Name mocks base method.
func (m *MockBackend) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockBackendMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockBackend)(nil).Name))
}

// Online mocks base method.
func (m *MockBackend) Online() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Online")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Online indicates an expected call of Online.
func (mr *MockBackendMockRecorder) Online() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Online", reflect.TypeOf((*MockBackend)(nil).Online))
}

// ProcessGroupSnapshot mocks base method.
func (m *MockBackend) ProcessGroupSnapshot(ctx context.Context, arg1 *storage.GroupSnapshotConfig, volConfigs []*storage.VolumeConfig) ([]*storage.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessGroupSnapshot", ctx, arg1, volConfigs)
	ret0, _ := ret[0].([]*storage.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessGroupSnapshot indicates an expected call of ProcessGroupSnapshot.
func (mr *MockBackendMockRecorder) ProcessGroupSnapshot(ctx, arg1, volConfigs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessGroupSnapshot", reflect.TypeOf((*MockBackend)(nil).ProcessGroupSnapshot), ctx, arg1, volConfigs)
}

// PromoteMirror mocks base method.
func (m *MockBackend) PromoteMirror(ctx context.Context, localInternalVolumeName, remoteVolumeHandle, snapshotName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromoteMirror", ctx, localInternalVolumeName, remoteVolumeHandle, snapshotName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromoteMirror indicates an expected call of PromoteMirror.
func (mr *MockBackendMockRecorder) PromoteMirror(ctx, localInternalVolumeName, remoteVolumeHandle, snapshotName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromoteMirror", reflect.TypeOf((*MockBackend)(nil).PromoteMirror), ctx, localInternalVolumeName, remoteVolumeHandle, snapshotName)
}

// PublishVolume mocks base method.
func (m *MockBackend) PublishVolume(ctx context.Context, volConfig *storage.VolumeConfig, publishInfo *models.VolumePublishInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishVolume", ctx, volConfig, publishInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishVolume indicates an expected call of PublishVolume.
func (mr *MockBackendMockRecorder) PublishVolume(ctx, volConfig, publishInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishVolume", reflect.TypeOf((*MockBackend)(nil).PublishVolume), ctx, volConfig, publishInfo)
}

// ReconcileNodeAccess mocks base method.
func (m *MockBackend) ReconcileNodeAccess(ctx context.Context, nodes []*models.Node, tridentUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileNodeAccess", ctx, nodes, tridentUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileNodeAccess indicates an expected call of ReconcileNodeAccess.
func (mr *MockBackendMockRecorder) ReconcileNodeAccess(ctx, nodes, tridentUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileNodeAccess", reflect.TypeOf((*MockBackend)(nil).ReconcileNodeAccess), ctx, nodes, tridentUUID)
}

// ReconcileVolumeNodeAccess mocks base method.
func (m *MockBackend) ReconcileVolumeNodeAccess(ctx context.Context, volConfig *storage.VolumeConfig, nodes []*models.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVolumeNodeAccess", ctx, volConfig, nodes)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileVolumeNodeAccess indicates an expected call of ReconcileVolumeNodeAccess.
func (mr *MockBackendMockRecorder) ReconcileVolumeNodeAccess(ctx, volConfig, nodes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVolumeNodeAccess", reflect.TypeOf((*MockBackend)(nil).ReconcileVolumeNodeAccess), ctx, volConfig, nodes)
}

// ReestablishMirror mocks base method.
func (m *MockBackend) ReestablishMirror(ctx context.Context, localInternalVolumeName, remoteVolumeHandle, replicationPolicy, replicationSchedule string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReestablishMirror", ctx, localInternalVolumeName, remoteVolumeHandle, replicationPolicy, replicationSchedule)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReestablishMirror indicates an expected call of ReestablishMirror.
func (mr *MockBackendMockRecorder) ReestablishMirror(ctx, localInternalVolumeName, remoteVolumeHandle, replicationPolicy, replicationSchedule any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReestablishMirror", reflect.TypeOf((*MockBackend)(nil).ReestablishMirror), ctx, localInternalVolumeName, remoteVolumeHandle, replicationPolicy, replicationSchedule)
}

// ReleaseMirror mocks base method.
func (m *MockBackend) ReleaseMirror(ctx context.Context, localInternalVolumeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseMirror", ctx, localInternalVolumeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseMirror indicates an expected call of ReleaseMirror.
func (mr *MockBackendMockRecorder) ReleaseMirror(ctx, localInternalVolumeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseMirror", reflect.TypeOf((*MockBackend)(nil).ReleaseMirror), ctx, localInternalVolumeName)
}

// RemoveCachedVolume mocks base method.
func (m *MockBackend) RemoveCachedVolume(volumeName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveCachedVolume", volumeName)
}

// RemoveCachedVolume indicates an expected call of RemoveCachedVolume.
func (mr *MockBackendMockRecorder) RemoveCachedVolume(volumeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCachedVolume", reflect.TypeOf((*MockBackend)(nil).RemoveCachedVolume), volumeName)
}

// RemoveVolume mocks base method.
func (m *MockBackend) RemoveVolume(ctx context.Context, volConfig *storage.VolumeConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVolume", ctx, volConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVolume indicates an expected call of RemoveVolume.
func (mr *MockBackendMockRecorder) RemoveVolume(ctx, volConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVolume", reflect.TypeOf((*MockBackend)(nil).RemoveVolume), ctx, volConfig)
}

// RenameVolume mocks base method.
func (m *MockBackend) RenameVolume(ctx context.Context, volConfig *storage.VolumeConfig, newName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameVolume", ctx, volConfig, newName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameVolume indicates an expected call of RenameVolume.
func (mr *MockBackendMockRecorder) RenameVolume(ctx, volConfig, newName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameVolume", reflect.TypeOf((*MockBackend)(nil).RenameVolume), ctx, volConfig, newName)
}

// ResizeVolume mocks base method.
func (m *MockBackend) ResizeVolume(ctx context.Context, volConfig *storage.VolumeConfig, newSize string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeVolume", ctx, volConfig, newSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResizeVolume indicates an expected call of ResizeVolume.
func (mr *MockBackendMockRecorder) ResizeVolume(ctx, volConfig, newSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeVolume", reflect.TypeOf((*MockBackend)(nil).ResizeVolume), ctx, volConfig, newSize)
}

// RestoreSnapshot mocks base method.
func (m *MockBackend) RestoreSnapshot(ctx context.Context, snapConfig *storage.SnapshotConfig, volConfig *storage.VolumeConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreSnapshot", ctx, snapConfig, volConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreSnapshot indicates an expected call of RestoreSnapshot.
func (mr *MockBackendMockRecorder) RestoreSnapshot(ctx, snapConfig, volConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreSnapshot", reflect.TypeOf((*MockBackend)(nil).RestoreSnapshot), ctx, snapConfig, volConfig)
}

// SetBackendUUID mocks base method.
func (m *MockBackend) SetBackendUUID(BackendUUID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBackendUUID", BackendUUID)
}

// SetBackendUUID indicates an expected call of SetBackendUUID.
func (mr *MockBackendMockRecorder) SetBackendUUID(BackendUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBackendUUID", reflect.TypeOf((*MockBackend)(nil).SetBackendUUID), BackendUUID)
}

// SetConfigRef mocks base method.
func (m *MockBackend) SetConfigRef(ConfigRef string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConfigRef", ConfigRef)
}

// SetConfigRef indicates an expected call of SetConfigRef.
func (mr *MockBackendMockRecorder) SetConfigRef(ConfigRef any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigRef", reflect.TypeOf((*MockBackend)(nil).SetConfigRef), ConfigRef)
}

// SetDriver mocks base method.
func (m *MockBackend) SetDriver(Driver storage.Driver) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDriver", Driver)
}

// SetDriver indicates an expected call of SetDriver.
func (mr *MockBackendMockRecorder) SetDriver(Driver any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDriver", reflect.TypeOf((*MockBackend)(nil).SetDriver), Driver)
}

// SetName mocks base method.
func (m *MockBackend) SetName(Name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetName", Name)
}

// SetName indicates an expected call of SetName.
func (mr *MockBackendMockRecorder) SetName(Name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockBackend)(nil).SetName), Name)
}

// SetNodeAccessUpToDate mocks base method.
func (m *MockBackend) SetNodeAccessUpToDate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNodeAccessUpToDate")
}

// SetNodeAccessUpToDate indicates an expected call of SetNodeAccessUpToDate.
func (mr *MockBackendMockRecorder) SetNodeAccessUpToDate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNodeAccessUpToDate", reflect.TypeOf((*MockBackend)(nil).SetNodeAccessUpToDate))
}

// SetOnline mocks base method.
func (m *MockBackend) SetOnline(Online bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOnline", Online)
}

// SetOnline indicates an expected call of SetOnline.
func (mr *MockBackendMockRecorder) SetOnline(Online any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOnline", reflect.TypeOf((*MockBackend)(nil).SetOnline), Online)
}

// SetState mocks base method.
func (m *MockBackend) SetState(State storage.BackendState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetState", State)
}

// SetState indicates an expected call of SetState.
func (mr *MockBackendMockRecorder) SetState(State any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockBackend)(nil).SetState), State)
}

// SetUserState mocks base method.
func (m *MockBackend) SetUserState(State storage.UserBackendState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUserState", State)
}

// SetUserState indicates an expected call of SetUserState.
func (mr *MockBackendMockRecorder) SetUserState(State any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserState", reflect.TypeOf((*MockBackend)(nil).SetUserState), State)
}

// SmartCopy mocks base method.
func (m *MockBackend) SmartCopy() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SmartCopy")
	ret0, _ := ret[0].(any)
	return ret0
}

// SmartCopy indicates an expected call of SmartCopy.
func (mr *MockBackendMockRecorder) SmartCopy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SmartCopy", reflect.TypeOf((*MockBackend)(nil).SmartCopy))
}

// State mocks base method.
func (m *MockBackend) State() storage.BackendState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(storage.BackendState)
	return ret0
}

// State indicates an expected call of State.
func (mr *MockBackendMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockBackend)(nil).State))
}

// StateReason mocks base method.
func (m *MockBackend) StateReason() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateReason")
	ret0, _ := ret[0].(string)
	return ret0
}

// StateReason indicates an expected call of StateReason.
func (mr *MockBackendMockRecorder) StateReason() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateReason", reflect.TypeOf((*MockBackend)(nil).StateReason))
}

// StoragePools mocks base method.
func (m *MockBackend) StoragePools() *sync.Map {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoragePools")
	ret0, _ := ret[0].(*sync.Map)
	return ret0
}

// StoragePools indicates an expected call of StoragePools.
func (mr *MockBackendMockRecorder) StoragePools() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoragePools", reflect.TypeOf((*MockBackend)(nil).StoragePools))
}

// Terminate mocks base method.
func (m *MockBackend) Terminate(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Terminate", ctx)
}

// Terminate indicates an expected call of Terminate.
func (mr *MockBackendMockRecorder) Terminate(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Terminate", reflect.TypeOf((*MockBackend)(nil).Terminate), ctx)
}

// UnpublishVolume mocks base method.
func (m *MockBackend) UnpublishVolume(ctx context.Context, volConfig *storage.VolumeConfig, publishInfo *models.VolumePublishInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpublishVolume", ctx, volConfig, publishInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnpublishVolume indicates an expected call of UnpublishVolume.
func (mr *MockBackendMockRecorder) UnpublishVolume(ctx, volConfig, publishInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpublishVolume", reflect.TypeOf((*MockBackend)(nil).UnpublishVolume), ctx, volConfig, publishInfo)
}

// UpdateBackendState mocks base method.
func (m *MockBackend) UpdateBackendState(ctx context.Context, stateReason string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateBackendState", ctx, stateReason)
}

// UpdateBackendState indicates an expected call of UpdateBackendState.
func (mr *MockBackendMockRecorder) UpdateBackendState(ctx, stateReason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackendState", reflect.TypeOf((*MockBackend)(nil).UpdateBackendState), ctx, stateReason)
}

// UpdateMirror mocks base method.
func (m *MockBackend) UpdateMirror(ctx context.Context, localInternalVolumeName, snapshotName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMirror", ctx, localInternalVolumeName, snapshotName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMirror indicates an expected call of UpdateMirror.
func (mr *MockBackendMockRecorder) UpdateMirror(ctx, localInternalVolumeName, snapshotName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMirror", reflect.TypeOf((*MockBackend)(nil).UpdateMirror), ctx, localInternalVolumeName, snapshotName)
}

// UpdateVolume mocks base method.
func (m *MockBackend) UpdateVolume(ctx context.Context, volConfig *storage.VolumeConfig, updateInfo *models.VolumeUpdateInfo) (map[string]*storage.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVolume", ctx, volConfig, updateInfo)
	ret0, _ := ret[0].(map[string]*storage.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVolume indicates an expected call of UpdateVolume.
func (mr *MockBackendMockRecorder) UpdateVolume(ctx, volConfig, updateInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolume", reflect.TypeOf((*MockBackend)(nil).UpdateVolume), ctx, volConfig, updateInfo)
}

// UserState mocks base method.
func (m *MockBackend) UserState() storage.UserBackendState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserState")
	ret0, _ := ret[0].(storage.UserBackendState)
	return ret0
}

// UserState indicates an expected call of UserState.
func (mr *MockBackendMockRecorder) UserState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserState", reflect.TypeOf((*MockBackend)(nil).UserState))
}

// Volumes mocks base method.
func (m *MockBackend) Volumes() *sync.Map {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Volumes")
	ret0, _ := ret[0].(*sync.Map)
	return ret0
}

// Volumes indicates an expected call of Volumes.
func (mr *MockBackendMockRecorder) Volumes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Volumes", reflect.TypeOf((*MockBackend)(nil).Volumes))
}

// MockPool is a mock of Pool interface.
type MockPool struct {
	ctrl     *gomock.Controller
	recorder *MockPoolMockRecorder
	isgomock struct{}
}

// MockPoolMockRecorder is the mock recorder for MockPool.
type MockPoolMockRecorder struct {
	mock *MockPool
}

// NewMockPool creates a new mock instance.
func NewMockPool(ctrl *gomock.Controller) *MockPool {
	mock := &MockPool{ctrl: ctrl}
	mock.recorder = &MockPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPool) EXPECT() *MockPoolMockRecorder {
	return m.recorder
}

// AddStorageClass mocks base method.
func (m *MockPool) AddStorageClass(class string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddStorageClass", class)
}

// AddStorageClass indicates an expected call of AddStorageClass.
func (mr *MockPoolMockRecorder) AddStorageClass(class any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStorageClass", reflect.TypeOf((*MockPool)(nil).AddStorageClass), class)
}

// Attributes mocks base method.
func (m *MockPool) Attributes() map[string]storageattribute.Offer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attributes")
	ret0, _ := ret[0].(map[string]storageattribute.Offer)
	return ret0
}

// Attributes indicates an expected call of Attributes.
func (mr *MockPoolMockRecorder) Attributes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attributes", reflect.TypeOf((*MockPool)(nil).Attributes))
}

// Backend mocks base method.
func (m *MockPool) Backend() storage.Backend {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Backend")
	ret0, _ := ret[0].(storage.Backend)
	return ret0
}

// Backend indicates an expected call of Backend.
func (mr *MockPoolMockRecorder) Backend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Backend", reflect.TypeOf((*MockPool)(nil).Backend))
}

// ConstructExternal mocks base method.
func (m *MockPool) ConstructExternal() *storage.PoolExternal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstructExternal")
	ret0, _ := ret[0].(*storage.PoolExternal)
	return ret0
}

// ConstructExternal indicates an expected call of ConstructExternal.
func (mr *MockPoolMockRecorder) ConstructExternal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstructExternal", reflect.TypeOf((*MockPool)(nil).ConstructExternal))
}

// ConstructExternalWithPoolMap mocks base method.
func (m *MockPool) ConstructExternalWithPoolMap(poolMap map[string][]string) *storage.PoolExternal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstructExternalWithPoolMap", poolMap)
	ret0, _ := ret[0].(*storage.PoolExternal)
	return ret0
}

// ConstructExternalWithPoolMap indicates an expected call of ConstructExternalWithPoolMap.
func (mr *MockPoolMockRecorder) ConstructExternalWithPoolMap(poolMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstructExternalWithPoolMap", reflect.TypeOf((*MockPool)(nil).ConstructExternalWithPoolMap), poolMap)
}

// GetLabelMapFromTemplate mocks base method.
func (m *MockPool) GetLabelMapFromTemplate(ctx context.Context, templateData map[string]any) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabelMapFromTemplate", ctx, templateData)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetLabelMapFromTemplate indicates an expected call of GetLabelMapFromTemplate.
func (mr *MockPoolMockRecorder) GetLabelMapFromTemplate(ctx, templateData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabelMapFromTemplate", reflect.TypeOf((*MockPool)(nil).GetLabelMapFromTemplate), ctx, templateData)
}

// GetLabels mocks base method.
func (m *MockPool) GetLabels(ctx context.Context, prefix string) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabels", ctx, prefix)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetLabels indicates an expected call of GetLabels.
func (mr *MockPoolMockRecorder) GetLabels(ctx, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabels", reflect.TypeOf((*MockPool)(nil).GetLabels), ctx, prefix)
}

// GetLabelsJSON mocks base method.
func (m *MockPool) GetLabelsJSON(ctx context.Context, key string, labelLimit int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabelsJSON", ctx, key, labelLimit)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabelsJSON indicates an expected call of GetLabelsJSON.
func (mr *MockPoolMockRecorder) GetLabelsJSON(ctx, key, labelLimit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabelsJSON", reflect.TypeOf((*MockPool)(nil).GetLabelsJSON), ctx, key, labelLimit)
}

// GetTemplatizedLabelsJSON mocks base method.
func (m *MockPool) GetTemplatizedLabelsJSON(ctx context.Context, key string, labelLimit int, templateData map[string]any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplatizedLabelsJSON", ctx, key, labelLimit, templateData)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplatizedLabelsJSON indicates an expected call of GetTemplatizedLabelsJSON.
func (mr *MockPoolMockRecorder) GetTemplatizedLabelsJSON(ctx, key, labelLimit, templateData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplatizedLabelsJSON", reflect.TypeOf((*MockPool)(nil).GetTemplatizedLabelsJSON), ctx, key, labelLimit, templateData)
}

// InternalAttributes mocks base method.
func (m *MockPool) InternalAttributes() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InternalAttributes")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// InternalAttributes indicates an expected call of InternalAttributes.
func (mr *MockPoolMockRecorder) InternalAttributes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalAttributes", reflect.TypeOf((*MockPool)(nil).InternalAttributes))
}

// Name mocks base method.
func (m *MockPool) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockPoolMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPool)(nil).Name))
}

// RemoveStorageClass mocks base method.
func (m *MockPool) RemoveStorageClass(class string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveStorageClass", class)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RemoveStorageClass indicates an expected call of RemoveStorageClass.
func (mr *MockPoolMockRecorder) RemoveStorageClass(class any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStorageClass", reflect.TypeOf((*MockPool)(nil).RemoveStorageClass), class)
}

// SetAttributes mocks base method.
func (m *MockPool) SetAttributes(attributes map[string]storageattribute.Offer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAttributes", attributes)
}

// SetAttributes indicates an expected call of SetAttributes.
func (mr *MockPoolMockRecorder) SetAttributes(attributes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAttributes", reflect.TypeOf((*MockPool)(nil).SetAttributes), attributes)
}

// SetBackend mocks base method.
func (m *MockPool) SetBackend(backend storage.Backend) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBackend", backend)
}

// SetBackend indicates an expected call of SetBackend.
func (mr *MockPoolMockRecorder) SetBackend(backend any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBackend", reflect.TypeOf((*MockPool)(nil).SetBackend), backend)
}

// SetInternalAttributes mocks base method.
func (m *MockPool) SetInternalAttributes(internalAttributes map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetInternalAttributes", internalAttributes)
}

// SetInternalAttributes indicates an expected call of SetInternalAttributes.
func (mr *MockPoolMockRecorder) SetInternalAttributes(internalAttributes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInternalAttributes", reflect.TypeOf((*MockPool)(nil).SetInternalAttributes), internalAttributes)
}

// SetName mocks base method.
func (m *MockPool) SetName(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetName", name)
}

// SetName indicates an expected call of SetName.
func (mr *MockPoolMockRecorder) SetName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockPool)(nil).SetName), name)
}

// SetStorageClasses mocks base method.
func (m *MockPool) SetStorageClasses(storageClasses []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStorageClasses", storageClasses)
}

// SetStorageClasses indicates an expected call of SetStorageClasses.
func (mr *MockPoolMockRecorder) SetStorageClasses(storageClasses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStorageClasses", reflect.TypeOf((*MockPool)(nil).SetStorageClasses), storageClasses)
}

// SetSupportedTopologies mocks base method.
func (m *MockPool) SetSupportedTopologies(supportedTopologies []map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSupportedTopologies", supportedTopologies)
}

// SetSupportedTopologies indicates an expected call of SetSupportedTopologies.
func (mr *MockPoolMockRecorder) SetSupportedTopologies(supportedTopologies any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSupportedTopologies", reflect.TypeOf((*MockPool)(nil).SetSupportedTopologies), supportedTopologies)
}

// StorageClasses mocks base method.
func (m *MockPool) StorageClasses() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageClasses")
	ret0, _ := ret[0].([]string)
	return ret0
}

// StorageClasses indicates an expected call of StorageClasses.
func (mr *MockPoolMockRecorder) StorageClasses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageClasses", reflect.TypeOf((*MockPool)(nil).StorageClasses))
}

// SupportedTopologies mocks base method.
func (m *MockPool) SupportedTopologies() []map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportedTopologies")
	ret0, _ := ret[0].([]map[string]string)
	return ret0
}

// SupportedTopologies indicates an expected call of SupportedTopologies.
func (mr *MockPoolMockRecorder) SupportedTopologies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedTopologies", reflect.TypeOf((*MockPool)(nil).SupportedTopologies))
}
