// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/cli/k8s_client (interfaces: KubernetesClient)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/mock_cli/mock_k8s_client/mock_k8s_client.go github.com/netapp/trident/cli/k8s_client KubernetesClient
//

// Package mock_k8sclient is a generated GoMock package.
package mock_k8sclient

import (
	reflect "reflect"
	time "time"

	v1 "github.com/kubernetes-csi/external-snapshotter/client/v8/apis/volumesnapshot/v1"
	k8sclient "github.com/netapp/trident/cli/k8s_client"
	v10 "github.com/netapp/trident/persistent_store/crd/apis/netapp/v1"
	version "github.com/netapp/trident/utils/version"
	gomock "go.uber.org/mock/gomock"
	v11 "k8s.io/api/apps/v1"
	v12 "k8s.io/api/core/v1"
	v13 "k8s.io/api/rbac/v1"
	v14 "k8s.io/api/storage/v1"
	v15 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	types "k8s.io/apimachinery/pkg/types"
	version0 "k8s.io/apimachinery/pkg/version"
)

// MockKubernetesClient is a mock of KubernetesClient interface.
type MockKubernetesClient struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesClientMockRecorder
	isgomock struct{}
}

// MockKubernetesClientMockRecorder is the mock recorder for MockKubernetesClient.
type MockKubernetesClientMockRecorder struct {
	mock *MockKubernetesClient
}

// NewMockKubernetesClient creates a new mock instance.
func NewMockKubernetesClient(ctrl *gomock.Controller) *MockKubernetesClient {
	mock := &MockKubernetesClient{ctrl: ctrl}
	mock.recorder = &MockKubernetesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubernetesClient) EXPECT() *MockKubernetesClientMockRecorder {
	return m.recorder
}

// AddFinalizerToCRD mocks base method.
func (m *MockKubernetesClient) AddFinalizerToCRD(crdName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFinalizerToCRD", crdName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFinalizerToCRD indicates an expected call of AddFinalizerToCRD.
func (mr *MockKubernetesClientMockRecorder) AddFinalizerToCRD(crdName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFinalizerToCRD", reflect.TypeOf((*MockKubernetesClient)(nil).AddFinalizerToCRD), crdName)
}

// AddFinalizerToCRDs mocks base method.
func (m *MockKubernetesClient) AddFinalizerToCRDs(CRDnames []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFinalizerToCRDs", CRDnames)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFinalizerToCRDs indicates an expected call of AddFinalizerToCRDs.
func (mr *MockKubernetesClientMockRecorder) AddFinalizerToCRDs(CRDnames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFinalizerToCRDs", reflect.TypeOf((*MockKubernetesClient)(nil).AddFinalizerToCRDs), CRDnames)
}

// CLI mocks base method.
func (m *MockKubernetesClient) CLI() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CLI")
	ret0, _ := ret[0].(string)
	return ret0
}

// CLI indicates an expected call of CLI.
func (mr *MockKubernetesClientMockRecorder) CLI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CLI", reflect.TypeOf((*MockKubernetesClient)(nil).CLI))
}

// CheckCRDExists mocks base method.
func (m *MockKubernetesClient) CheckCRDExists(crdName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCRDExists", crdName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCRDExists indicates an expected call of CheckCRDExists.
func (mr *MockKubernetesClientMockRecorder) CheckCRDExists(crdName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCRDExists", reflect.TypeOf((*MockKubernetesClient)(nil).CheckCRDExists), crdName)
}

// CheckCSIDriverExistsByLabel mocks base method.
func (m *MockKubernetesClient) CheckCSIDriverExistsByLabel(label string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCSIDriverExistsByLabel", label)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckCSIDriverExistsByLabel indicates an expected call of CheckCSIDriverExistsByLabel.
func (mr *MockKubernetesClientMockRecorder) CheckCSIDriverExistsByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCSIDriverExistsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).CheckCSIDriverExistsByLabel), label)
}

// CheckClusterRoleBindingExistsByLabel mocks base method.
func (m *MockKubernetesClient) CheckClusterRoleBindingExistsByLabel(label string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckClusterRoleBindingExistsByLabel", label)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckClusterRoleBindingExistsByLabel indicates an expected call of CheckClusterRoleBindingExistsByLabel.
func (mr *MockKubernetesClientMockRecorder) CheckClusterRoleBindingExistsByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckClusterRoleBindingExistsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).CheckClusterRoleBindingExistsByLabel), label)
}

// CheckClusterRoleExistsByLabel mocks base method.
func (m *MockKubernetesClient) CheckClusterRoleExistsByLabel(label string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckClusterRoleExistsByLabel", label)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckClusterRoleExistsByLabel indicates an expected call of CheckClusterRoleExistsByLabel.
func (mr *MockKubernetesClientMockRecorder) CheckClusterRoleExistsByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckClusterRoleExistsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).CheckClusterRoleExistsByLabel), label)
}

// CheckDaemonSetExists mocks base method.
func (m *MockKubernetesClient) CheckDaemonSetExists(name, namespace string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDaemonSetExists", name, namespace)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDaemonSetExists indicates an expected call of CheckDaemonSetExists.
func (mr *MockKubernetesClientMockRecorder) CheckDaemonSetExists(name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDaemonSetExists", reflect.TypeOf((*MockKubernetesClient)(nil).CheckDaemonSetExists), name, namespace)
}

// CheckDaemonSetExistsByLabel mocks base method.
func (m *MockKubernetesClient) CheckDaemonSetExistsByLabel(label string, allNamespaces bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDaemonSetExistsByLabel", label, allNamespaces)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckDaemonSetExistsByLabel indicates an expected call of CheckDaemonSetExistsByLabel.
func (mr *MockKubernetesClientMockRecorder) CheckDaemonSetExistsByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDaemonSetExistsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).CheckDaemonSetExistsByLabel), label, allNamespaces)
}

// CheckDeploymentExists mocks base method.
func (m *MockKubernetesClient) CheckDeploymentExists(name, namespace string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDeploymentExists", name, namespace)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDeploymentExists indicates an expected call of CheckDeploymentExists.
func (mr *MockKubernetesClientMockRecorder) CheckDeploymentExists(name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDeploymentExists", reflect.TypeOf((*MockKubernetesClient)(nil).CheckDeploymentExists), name, namespace)
}

// CheckDeploymentExistsByLabel mocks base method.
func (m *MockKubernetesClient) CheckDeploymentExistsByLabel(label string, allNamespaces bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDeploymentExistsByLabel", label, allNamespaces)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckDeploymentExistsByLabel indicates an expected call of CheckDeploymentExistsByLabel.
func (mr *MockKubernetesClientMockRecorder) CheckDeploymentExistsByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDeploymentExistsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).CheckDeploymentExistsByLabel), label, allNamespaces)
}

// CheckNamespaceExists mocks base method.
func (m *MockKubernetesClient) CheckNamespaceExists(namespace string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNamespaceExists", namespace)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckNamespaceExists indicates an expected call of CheckNamespaceExists.
func (mr *MockKubernetesClientMockRecorder) CheckNamespaceExists(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNamespaceExists", reflect.TypeOf((*MockKubernetesClient)(nil).CheckNamespaceExists), namespace)
}

// CheckPodExistsByLabel mocks base method.
func (m *MockKubernetesClient) CheckPodExistsByLabel(label string, allNamespaces bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPodExistsByLabel", label, allNamespaces)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckPodExistsByLabel indicates an expected call of CheckPodExistsByLabel.
func (mr *MockKubernetesClientMockRecorder) CheckPodExistsByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPodExistsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).CheckPodExistsByLabel), label, allNamespaces)
}

// CheckSecretExists mocks base method.
func (m *MockKubernetesClient) CheckSecretExists(secretName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSecretExists", secretName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSecretExists indicates an expected call of CheckSecretExists.
func (mr *MockKubernetesClientMockRecorder) CheckSecretExists(secretName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSecretExists", reflect.TypeOf((*MockKubernetesClient)(nil).CheckSecretExists), secretName)
}

// CheckServiceAccountExistsByLabel mocks base method.
func (m *MockKubernetesClient) CheckServiceAccountExistsByLabel(label string, allNamespaces bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckServiceAccountExistsByLabel", label, allNamespaces)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckServiceAccountExistsByLabel indicates an expected call of CheckServiceAccountExistsByLabel.
func (mr *MockKubernetesClientMockRecorder) CheckServiceAccountExistsByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckServiceAccountExistsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).CheckServiceAccountExistsByLabel), label, allNamespaces)
}

// CheckServiceExistsByLabel mocks base method.
func (m *MockKubernetesClient) CheckServiceExistsByLabel(label string, allNamespaces bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckServiceExistsByLabel", label, allNamespaces)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckServiceExistsByLabel indicates an expected call of CheckServiceExistsByLabel.
func (mr *MockKubernetesClientMockRecorder) CheckServiceExistsByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckServiceExistsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).CheckServiceExistsByLabel), label, allNamespaces)
}

// CreateObjectByFile mocks base method.
func (m *MockKubernetesClient) CreateObjectByFile(filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObjectByFile", filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateObjectByFile indicates an expected call of CreateObjectByFile.
func (mr *MockKubernetesClientMockRecorder) CreateObjectByFile(filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObjectByFile", reflect.TypeOf((*MockKubernetesClient)(nil).CreateObjectByFile), filePath)
}

// CreateObjectByYAML mocks base method.
func (m *MockKubernetesClient) CreateObjectByYAML(yaml string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObjectByYAML", yaml)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateObjectByYAML indicates an expected call of CreateObjectByYAML.
func (mr *MockKubernetesClientMockRecorder) CreateObjectByYAML(yaml any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObjectByYAML", reflect.TypeOf((*MockKubernetesClient)(nil).CreateObjectByYAML), yaml)
}

// CreateOrPatchClusterRole mocks base method.
func (m *MockKubernetesClient) CreateOrPatchClusterRole(clusterRole *v13.ClusterRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrPatchClusterRole", clusterRole)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrPatchClusterRole indicates an expected call of CreateOrPatchClusterRole.
func (mr *MockKubernetesClientMockRecorder) CreateOrPatchClusterRole(clusterRole any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrPatchClusterRole", reflect.TypeOf((*MockKubernetesClient)(nil).CreateOrPatchClusterRole), clusterRole)
}

// CreateOrPatchNodeRemediationTemplate mocks base method.
func (m *MockKubernetesClient) CreateOrPatchNodeRemediationTemplate(tnrt *v10.TridentNodeRemediationTemplate, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrPatchNodeRemediationTemplate", tnrt, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrPatchNodeRemediationTemplate indicates an expected call of CreateOrPatchNodeRemediationTemplate.
func (mr *MockKubernetesClientMockRecorder) CreateOrPatchNodeRemediationTemplate(tnrt, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrPatchNodeRemediationTemplate", reflect.TypeOf((*MockKubernetesClient)(nil).CreateOrPatchNodeRemediationTemplate), tnrt, namespace)
}

// CreateSecret mocks base method.
func (m *MockKubernetesClient) CreateSecret(secret *v12.Secret) (*v12.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", secret)
	ret0, _ := ret[0].(*v12.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockKubernetesClientMockRecorder) CreateSecret(secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockKubernetesClient)(nil).CreateSecret), secret)
}

// DeleteCRD mocks base method.
func (m *MockKubernetesClient) DeleteCRD(crdName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCRD", crdName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCRD indicates an expected call of DeleteCRD.
func (mr *MockKubernetesClientMockRecorder) DeleteCRD(crdName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCRD", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteCRD), crdName)
}

// DeleteCSIDriver mocks base method.
func (m *MockKubernetesClient) DeleteCSIDriver(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCSIDriver", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCSIDriver indicates an expected call of DeleteCSIDriver.
func (mr *MockKubernetesClientMockRecorder) DeleteCSIDriver(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCSIDriver", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteCSIDriver), name)
}

// DeleteCSIDriverByLabel mocks base method.
func (m *MockKubernetesClient) DeleteCSIDriverByLabel(label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCSIDriverByLabel", label)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCSIDriverByLabel indicates an expected call of DeleteCSIDriverByLabel.
func (mr *MockKubernetesClientMockRecorder) DeleteCSIDriverByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCSIDriverByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteCSIDriverByLabel), label)
}

// DeleteClusterRole mocks base method.
func (m *MockKubernetesClient) DeleteClusterRole(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRole", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRole indicates an expected call of DeleteClusterRole.
func (mr *MockKubernetesClientMockRecorder) DeleteClusterRole(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRole", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteClusterRole), name)
}

// DeleteClusterRoleBinding mocks base method.
func (m *MockKubernetesClient) DeleteClusterRoleBinding(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRoleBinding", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRoleBinding indicates an expected call of DeleteClusterRoleBinding.
func (mr *MockKubernetesClientMockRecorder) DeleteClusterRoleBinding(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRoleBinding", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteClusterRoleBinding), name)
}

// DeleteClusterRoleBindingByLabel mocks base method.
func (m *MockKubernetesClient) DeleteClusterRoleBindingByLabel(label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRoleBindingByLabel", label)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRoleBindingByLabel indicates an expected call of DeleteClusterRoleBindingByLabel.
func (mr *MockKubernetesClientMockRecorder) DeleteClusterRoleBindingByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRoleBindingByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteClusterRoleBindingByLabel), label)
}

// DeleteClusterRoleByLabel mocks base method.
func (m *MockKubernetesClient) DeleteClusterRoleByLabel(label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRoleByLabel", label)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRoleByLabel indicates an expected call of DeleteClusterRoleByLabel.
func (mr *MockKubernetesClientMockRecorder) DeleteClusterRoleByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRoleByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteClusterRoleByLabel), label)
}

// DeleteDaemonSet mocks base method.
func (m *MockKubernetesClient) DeleteDaemonSet(name, namespace string, foreground bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDaemonSet", name, namespace, foreground)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDaemonSet indicates an expected call of DeleteDaemonSet.
func (mr *MockKubernetesClientMockRecorder) DeleteDaemonSet(name, namespace, foreground any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDaemonSet", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteDaemonSet), name, namespace, foreground)
}

// DeleteDaemonSetByLabel mocks base method.
func (m *MockKubernetesClient) DeleteDaemonSetByLabel(label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDaemonSetByLabel", label)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDaemonSetByLabel indicates an expected call of DeleteDaemonSetByLabel.
func (mr *MockKubernetesClientMockRecorder) DeleteDaemonSetByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDaemonSetByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteDaemonSetByLabel), label)
}

// DeleteDaemonSetByLabelAndName mocks base method.
func (m *MockKubernetesClient) DeleteDaemonSetByLabelAndName(label, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDaemonSetByLabelAndName", label, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDaemonSetByLabelAndName indicates an expected call of DeleteDaemonSetByLabelAndName.
func (mr *MockKubernetesClientMockRecorder) DeleteDaemonSetByLabelAndName(label, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDaemonSetByLabelAndName", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteDaemonSetByLabelAndName), label, name)
}

// DeleteDeployment mocks base method.
func (m *MockKubernetesClient) DeleteDeployment(name, namespace string, foreground bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeployment", name, namespace, foreground)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeployment indicates an expected call of DeleteDeployment.
func (mr *MockKubernetesClientMockRecorder) DeleteDeployment(name, namespace, foreground any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeployment", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteDeployment), name, namespace, foreground)
}

// DeleteDeploymentByLabel mocks base method.
func (m *MockKubernetesClient) DeleteDeploymentByLabel(label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeploymentByLabel", label)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeploymentByLabel indicates an expected call of DeleteDeploymentByLabel.
func (mr *MockKubernetesClientMockRecorder) DeleteDeploymentByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploymentByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteDeploymentByLabel), label)
}

// DeleteObjectByFile mocks base method.
func (m *MockKubernetesClient) DeleteObjectByFile(filePath string, ignoreNotFound bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectByFile", filePath, ignoreNotFound)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObjectByFile indicates an expected call of DeleteObjectByFile.
func (mr *MockKubernetesClientMockRecorder) DeleteObjectByFile(filePath, ignoreNotFound any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectByFile", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteObjectByFile), filePath, ignoreNotFound)
}

// DeleteObjectByYAML mocks base method.
func (m *MockKubernetesClient) DeleteObjectByYAML(yaml string, ignoreNotFound bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectByYAML", yaml, ignoreNotFound)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObjectByYAML indicates an expected call of DeleteObjectByYAML.
func (mr *MockKubernetesClientMockRecorder) DeleteObjectByYAML(yaml, ignoreNotFound any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectByYAML", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteObjectByYAML), yaml, ignoreNotFound)
}

// DeletePod mocks base method.
func (m *MockKubernetesClient) DeletePod(name, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePod", name, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePod indicates an expected call of DeletePod.
func (mr *MockKubernetesClientMockRecorder) DeletePod(name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePod", reflect.TypeOf((*MockKubernetesClient)(nil).DeletePod), name, namespace)
}

// DeletePodByLabel mocks base method.
func (m *MockKubernetesClient) DeletePodByLabel(label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePodByLabel", label)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePodByLabel indicates an expected call of DeletePodByLabel.
func (mr *MockKubernetesClientMockRecorder) DeletePodByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePodByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).DeletePodByLabel), label)
}

// DeleteResourceQuota mocks base method.
func (m *MockKubernetesClient) DeleteResourceQuota(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceQuota", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResourceQuota indicates an expected call of DeleteResourceQuota.
func (mr *MockKubernetesClientMockRecorder) DeleteResourceQuota(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceQuota", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteResourceQuota), name)
}

// DeleteResourceQuotaByLabel mocks base method.
func (m *MockKubernetesClient) DeleteResourceQuotaByLabel(label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceQuotaByLabel", label)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResourceQuotaByLabel indicates an expected call of DeleteResourceQuotaByLabel.
func (mr *MockKubernetesClientMockRecorder) DeleteResourceQuotaByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceQuotaByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteResourceQuotaByLabel), label)
}

// DeleteRole mocks base method.
func (m *MockKubernetesClient) DeleteRole(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockKubernetesClientMockRecorder) DeleteRole(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteRole), name)
}

// DeleteRoleBinding mocks base method.
func (m *MockKubernetesClient) DeleteRoleBinding(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleBinding", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleBinding indicates an expected call of DeleteRoleBinding.
func (mr *MockKubernetesClientMockRecorder) DeleteRoleBinding(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleBinding", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteRoleBinding), name)
}

// DeleteSecret mocks base method.
func (m *MockKubernetesClient) DeleteSecret(name, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", name, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockKubernetesClientMockRecorder) DeleteSecret(name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteSecret), name, namespace)
}

// DeleteSecretByLabel mocks base method.
func (m *MockKubernetesClient) DeleteSecretByLabel(label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecretByLabel", label)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecretByLabel indicates an expected call of DeleteSecretByLabel.
func (mr *MockKubernetesClientMockRecorder) DeleteSecretByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecretByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteSecretByLabel), label)
}

// DeleteSecretDefault mocks base method.
func (m *MockKubernetesClient) DeleteSecretDefault(secretName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecretDefault", secretName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecretDefault indicates an expected call of DeleteSecretDefault.
func (mr *MockKubernetesClientMockRecorder) DeleteSecretDefault(secretName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecretDefault", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteSecretDefault), secretName)
}

// DeleteService mocks base method.
func (m *MockKubernetesClient) DeleteService(name, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", name, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockKubernetesClientMockRecorder) DeleteService(name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteService), name, namespace)
}

// DeleteServiceAccount mocks base method.
func (m *MockKubernetesClient) DeleteServiceAccount(name, namespace string, foreground bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceAccount", name, namespace, foreground)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceAccount indicates an expected call of DeleteServiceAccount.
func (mr *MockKubernetesClientMockRecorder) DeleteServiceAccount(name, namespace, foreground any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceAccount", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteServiceAccount), name, namespace, foreground)
}

// DeleteServiceAccountByLabel mocks base method.
func (m *MockKubernetesClient) DeleteServiceAccountByLabel(label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceAccountByLabel", label)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceAccountByLabel indicates an expected call of DeleteServiceAccountByLabel.
func (mr *MockKubernetesClientMockRecorder) DeleteServiceAccountByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceAccountByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteServiceAccountByLabel), label)
}

// DeleteServiceByLabel mocks base method.
func (m *MockKubernetesClient) DeleteServiceByLabel(label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceByLabel", label)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceByLabel indicates an expected call of DeleteServiceByLabel.
func (mr *MockKubernetesClientMockRecorder) DeleteServiceByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).DeleteServiceByLabel), label)
}

// Exec mocks base method.
func (m *MockKubernetesClient) Exec(podName, containerName string, commandArgs []string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", podName, containerName, commandArgs)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockKubernetesClientMockRecorder) Exec(podName, containerName, commandArgs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockKubernetesClient)(nil).Exec), podName, containerName, commandArgs)
}

// Flavor mocks base method.
func (m *MockKubernetesClient) Flavor() k8sclient.OrchestratorFlavor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flavor")
	ret0, _ := ret[0].(k8sclient.OrchestratorFlavor)
	return ret0
}

// Flavor indicates an expected call of Flavor.
func (mr *MockKubernetesClientMockRecorder) Flavor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flavor", reflect.TypeOf((*MockKubernetesClient)(nil).Flavor))
}

// GetCRD mocks base method.
func (m *MockKubernetesClient) GetCRD(crdName string) (*v15.CustomResourceDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCRD", crdName)
	ret0, _ := ret[0].(*v15.CustomResourceDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCRD indicates an expected call of GetCRD.
func (mr *MockKubernetesClientMockRecorder) GetCRD(crdName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCRD", reflect.TypeOf((*MockKubernetesClient)(nil).GetCRD), crdName)
}

// GetCSIDriverByLabel mocks base method.
func (m *MockKubernetesClient) GetCSIDriverByLabel(label string) (*v14.CSIDriver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSIDriverByLabel", label)
	ret0, _ := ret[0].(*v14.CSIDriver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSIDriverByLabel indicates an expected call of GetCSIDriverByLabel.
func (mr *MockKubernetesClientMockRecorder) GetCSIDriverByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSIDriverByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetCSIDriverByLabel), label)
}

// GetCSIDriversByLabel mocks base method.
func (m *MockKubernetesClient) GetCSIDriversByLabel(label string) ([]v14.CSIDriver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSIDriversByLabel", label)
	ret0, _ := ret[0].([]v14.CSIDriver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSIDriversByLabel indicates an expected call of GetCSIDriversByLabel.
func (mr *MockKubernetesClientMockRecorder) GetCSIDriversByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSIDriversByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetCSIDriversByLabel), label)
}

// GetClusterRoleBindingByLabel mocks base method.
func (m *MockKubernetesClient) GetClusterRoleBindingByLabel(label string) (*v13.ClusterRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleBindingByLabel", label)
	ret0, _ := ret[0].(*v13.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleBindingByLabel indicates an expected call of GetClusterRoleBindingByLabel.
func (mr *MockKubernetesClientMockRecorder) GetClusterRoleBindingByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleBindingByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetClusterRoleBindingByLabel), label)
}

// GetClusterRoleBindingByLabelAndName mocks base method.
func (m *MockKubernetesClient) GetClusterRoleBindingByLabelAndName(label, clusterRoleBindingName string) (*v13.ClusterRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleBindingByLabelAndName", label, clusterRoleBindingName)
	ret0, _ := ret[0].(*v13.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleBindingByLabelAndName indicates an expected call of GetClusterRoleBindingByLabelAndName.
func (mr *MockKubernetesClientMockRecorder) GetClusterRoleBindingByLabelAndName(label, clusterRoleBindingName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleBindingByLabelAndName", reflect.TypeOf((*MockKubernetesClient)(nil).GetClusterRoleBindingByLabelAndName), label, clusterRoleBindingName)
}

// GetClusterRoleBindingsByLabel mocks base method.
func (m *MockKubernetesClient) GetClusterRoleBindingsByLabel(label string) ([]v13.ClusterRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleBindingsByLabel", label)
	ret0, _ := ret[0].([]v13.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleBindingsByLabel indicates an expected call of GetClusterRoleBindingsByLabel.
func (mr *MockKubernetesClientMockRecorder) GetClusterRoleBindingsByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleBindingsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetClusterRoleBindingsByLabel), label)
}

// GetClusterRoleByLabel mocks base method.
func (m *MockKubernetesClient) GetClusterRoleByLabel(label string) (*v13.ClusterRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleByLabel", label)
	ret0, _ := ret[0].(*v13.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleByLabel indicates an expected call of GetClusterRoleByLabel.
func (mr *MockKubernetesClientMockRecorder) GetClusterRoleByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetClusterRoleByLabel), label)
}

// GetClusterRoleByLabelAndName mocks base method.
func (m *MockKubernetesClient) GetClusterRoleByLabelAndName(label, clusterRoleName string) (*v13.ClusterRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleByLabelAndName", label, clusterRoleName)
	ret0, _ := ret[0].(*v13.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleByLabelAndName indicates an expected call of GetClusterRoleByLabelAndName.
func (mr *MockKubernetesClientMockRecorder) GetClusterRoleByLabelAndName(label, clusterRoleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleByLabelAndName", reflect.TypeOf((*MockKubernetesClient)(nil).GetClusterRoleByLabelAndName), label, clusterRoleName)
}

// GetClusterRolesByLabel mocks base method.
func (m *MockKubernetesClient) GetClusterRolesByLabel(label string) ([]v13.ClusterRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRolesByLabel", label)
	ret0, _ := ret[0].([]v13.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRolesByLabel indicates an expected call of GetClusterRolesByLabel.
func (mr *MockKubernetesClientMockRecorder) GetClusterRolesByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRolesByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetClusterRolesByLabel), label)
}

// GetDaemonSetByLabel mocks base method.
func (m *MockKubernetesClient) GetDaemonSetByLabel(label string, allNamespaces bool) (*v11.DaemonSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDaemonSetByLabel", label, allNamespaces)
	ret0, _ := ret[0].(*v11.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDaemonSetByLabel indicates an expected call of GetDaemonSetByLabel.
func (mr *MockKubernetesClientMockRecorder) GetDaemonSetByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaemonSetByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetDaemonSetByLabel), label, allNamespaces)
}

// GetDaemonSetByLabelAndName mocks base method.
func (m *MockKubernetesClient) GetDaemonSetByLabelAndName(label, name string, allNamespaces bool) (*v11.DaemonSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDaemonSetByLabelAndName", label, name, allNamespaces)
	ret0, _ := ret[0].(*v11.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDaemonSetByLabelAndName indicates an expected call of GetDaemonSetByLabelAndName.
func (mr *MockKubernetesClientMockRecorder) GetDaemonSetByLabelAndName(label, name, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaemonSetByLabelAndName", reflect.TypeOf((*MockKubernetesClient)(nil).GetDaemonSetByLabelAndName), label, name, allNamespaces)
}

// GetDaemonSetsByLabel mocks base method.
func (m *MockKubernetesClient) GetDaemonSetsByLabel(label string, allNamespaces bool) ([]v11.DaemonSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDaemonSetsByLabel", label, allNamespaces)
	ret0, _ := ret[0].([]v11.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDaemonSetsByLabel indicates an expected call of GetDaemonSetsByLabel.
func (mr *MockKubernetesClientMockRecorder) GetDaemonSetsByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaemonSetsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetDaemonSetsByLabel), label, allNamespaces)
}

// GetDeploymentByLabel mocks base method.
func (m *MockKubernetesClient) GetDeploymentByLabel(label string, allNamespaces bool) (*v11.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentByLabel", label, allNamespaces)
	ret0, _ := ret[0].(*v11.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentByLabel indicates an expected call of GetDeploymentByLabel.
func (mr *MockKubernetesClientMockRecorder) GetDeploymentByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetDeploymentByLabel), label, allNamespaces)
}

// GetDeploymentsByLabel mocks base method.
func (m *MockKubernetesClient) GetDeploymentsByLabel(label string, allNamespaces bool) ([]v11.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentsByLabel", label, allNamespaces)
	ret0, _ := ret[0].([]v11.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentsByLabel indicates an expected call of GetDeploymentsByLabel.
func (mr *MockKubernetesClientMockRecorder) GetDeploymentsByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetDeploymentsByLabel), label, allNamespaces)
}

// GetNamespace mocks base method.
func (m *MockKubernetesClient) GetNamespace(namespace string) (*v12.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace", namespace)
	ret0, _ := ret[0].(*v12.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockKubernetesClientMockRecorder) GetNamespace(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockKubernetesClient)(nil).GetNamespace), namespace)
}

// GetOpenShiftSCCByName mocks base method.
func (m *MockKubernetesClient) GetOpenShiftSCCByName(user, scc string) (bool, bool, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenShiftSCCByName", user, scc)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].([]byte)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetOpenShiftSCCByName indicates an expected call of GetOpenShiftSCCByName.
func (mr *MockKubernetesClientMockRecorder) GetOpenShiftSCCByName(user, scc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenShiftSCCByName", reflect.TypeOf((*MockKubernetesClient)(nil).GetOpenShiftSCCByName), user, scc)
}

// GetPersistentVolumeClaims mocks base method.
func (m *MockKubernetesClient) GetPersistentVolumeClaims(allNamespaces bool) ([]v12.PersistentVolumeClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersistentVolumeClaims", allNamespaces)
	ret0, _ := ret[0].([]v12.PersistentVolumeClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersistentVolumeClaims indicates an expected call of GetPersistentVolumeClaims.
func (mr *MockKubernetesClientMockRecorder) GetPersistentVolumeClaims(allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersistentVolumeClaims", reflect.TypeOf((*MockKubernetesClient)(nil).GetPersistentVolumeClaims), allNamespaces)
}

// GetPersistentVolumes mocks base method.
func (m *MockKubernetesClient) GetPersistentVolumes() ([]v12.PersistentVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersistentVolumes")
	ret0, _ := ret[0].([]v12.PersistentVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersistentVolumes indicates an expected call of GetPersistentVolumes.
func (mr *MockKubernetesClientMockRecorder) GetPersistentVolumes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersistentVolumes", reflect.TypeOf((*MockKubernetesClient)(nil).GetPersistentVolumes))
}

// GetPodByLabel mocks base method.
func (m *MockKubernetesClient) GetPodByLabel(label string, allNamespaces bool) (*v12.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodByLabel", label, allNamespaces)
	ret0, _ := ret[0].(*v12.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodByLabel indicates an expected call of GetPodByLabel.
func (mr *MockKubernetesClientMockRecorder) GetPodByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetPodByLabel), label, allNamespaces)
}

// GetPodsByLabel mocks base method.
func (m *MockKubernetesClient) GetPodsByLabel(label string, allNamespaces bool) ([]v12.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodsByLabel", label, allNamespaces)
	ret0, _ := ret[0].([]v12.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodsByLabel indicates an expected call of GetPodsByLabel.
func (mr *MockKubernetesClientMockRecorder) GetPodsByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetPodsByLabel), label, allNamespaces)
}

// GetResourceQuota mocks base method.
func (m *MockKubernetesClient) GetResourceQuota(label string) (*v12.ResourceQuota, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceQuota", label)
	ret0, _ := ret[0].(*v12.ResourceQuota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceQuota indicates an expected call of GetResourceQuota.
func (mr *MockKubernetesClientMockRecorder) GetResourceQuota(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceQuota", reflect.TypeOf((*MockKubernetesClient)(nil).GetResourceQuota), label)
}

// GetResourceQuotaByLabel mocks base method.
func (m *MockKubernetesClient) GetResourceQuotaByLabel(label string) (*v12.ResourceQuota, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceQuotaByLabel", label)
	ret0, _ := ret[0].(*v12.ResourceQuota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceQuotaByLabel indicates an expected call of GetResourceQuotaByLabel.
func (mr *MockKubernetesClientMockRecorder) GetResourceQuotaByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceQuotaByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetResourceQuotaByLabel), label)
}

// GetResourceQuotasByLabel mocks base method.
func (m *MockKubernetesClient) GetResourceQuotasByLabel(label string) ([]v12.ResourceQuota, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceQuotasByLabel", label)
	ret0, _ := ret[0].([]v12.ResourceQuota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceQuotasByLabel indicates an expected call of GetResourceQuotasByLabel.
func (mr *MockKubernetesClientMockRecorder) GetResourceQuotasByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceQuotasByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetResourceQuotasByLabel), label)
}

// GetRoleBindingByLabelAndName mocks base method.
func (m *MockKubernetesClient) GetRoleBindingByLabelAndName(label, roleBindingName string) (*v13.RoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleBindingByLabelAndName", label, roleBindingName)
	ret0, _ := ret[0].(*v13.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleBindingByLabelAndName indicates an expected call of GetRoleBindingByLabelAndName.
func (mr *MockKubernetesClientMockRecorder) GetRoleBindingByLabelAndName(label, roleBindingName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleBindingByLabelAndName", reflect.TypeOf((*MockKubernetesClient)(nil).GetRoleBindingByLabelAndName), label, roleBindingName)
}

// GetRoleBindingsByLabel mocks base method.
func (m *MockKubernetesClient) GetRoleBindingsByLabel(label string) ([]v13.RoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleBindingsByLabel", label)
	ret0, _ := ret[0].([]v13.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleBindingsByLabel indicates an expected call of GetRoleBindingsByLabel.
func (mr *MockKubernetesClientMockRecorder) GetRoleBindingsByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleBindingsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetRoleBindingsByLabel), label)
}

// GetRolesByLabel mocks base method.
func (m *MockKubernetesClient) GetRolesByLabel(label string) ([]v13.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolesByLabel", label)
	ret0, _ := ret[0].([]v13.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolesByLabel indicates an expected call of GetRolesByLabel.
func (mr *MockKubernetesClientMockRecorder) GetRolesByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolesByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetRolesByLabel), label)
}

// GetSecret mocks base method.
func (m *MockKubernetesClient) GetSecret(secretName string) (*v12.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", secretName)
	ret0, _ := ret[0].(*v12.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockKubernetesClientMockRecorder) GetSecret(secretName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockKubernetesClient)(nil).GetSecret), secretName)
}

// GetSecretByLabel mocks base method.
func (m *MockKubernetesClient) GetSecretByLabel(label string, allNamespaces bool) (*v12.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretByLabel", label, allNamespaces)
	ret0, _ := ret[0].(*v12.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretByLabel indicates an expected call of GetSecretByLabel.
func (mr *MockKubernetesClientMockRecorder) GetSecretByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetSecretByLabel), label, allNamespaces)
}

// GetSecretsByLabel mocks base method.
func (m *MockKubernetesClient) GetSecretsByLabel(label string, allNamespaces bool) ([]v12.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretsByLabel", label, allNamespaces)
	ret0, _ := ret[0].([]v12.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretsByLabel indicates an expected call of GetSecretsByLabel.
func (mr *MockKubernetesClientMockRecorder) GetSecretsByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetSecretsByLabel), label, allNamespaces)
}

// GetServiceAccountByLabel mocks base method.
func (m *MockKubernetesClient) GetServiceAccountByLabel(label string, allNamespaces bool) (*v12.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccountByLabel", label, allNamespaces)
	ret0, _ := ret[0].(*v12.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccountByLabel indicates an expected call of GetServiceAccountByLabel.
func (mr *MockKubernetesClientMockRecorder) GetServiceAccountByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccountByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetServiceAccountByLabel), label, allNamespaces)
}

// GetServiceAccountByLabelAndName mocks base method.
func (m *MockKubernetesClient) GetServiceAccountByLabelAndName(label, serviceAccountName string, allNamespaces bool) (*v12.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccountByLabelAndName", label, serviceAccountName, allNamespaces)
	ret0, _ := ret[0].(*v12.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccountByLabelAndName indicates an expected call of GetServiceAccountByLabelAndName.
func (mr *MockKubernetesClientMockRecorder) GetServiceAccountByLabelAndName(label, serviceAccountName, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccountByLabelAndName", reflect.TypeOf((*MockKubernetesClient)(nil).GetServiceAccountByLabelAndName), label, serviceAccountName, allNamespaces)
}

// GetServiceAccountsByLabel mocks base method.
func (m *MockKubernetesClient) GetServiceAccountsByLabel(label string, allNamespaces bool) ([]v12.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccountsByLabel", label, allNamespaces)
	ret0, _ := ret[0].([]v12.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccountsByLabel indicates an expected call of GetServiceAccountsByLabel.
func (mr *MockKubernetesClientMockRecorder) GetServiceAccountsByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccountsByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetServiceAccountsByLabel), label, allNamespaces)
}

// GetServiceByLabel mocks base method.
func (m *MockKubernetesClient) GetServiceByLabel(label string, allNamespaces bool) (*v12.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceByLabel", label, allNamespaces)
	ret0, _ := ret[0].(*v12.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceByLabel indicates an expected call of GetServiceByLabel.
func (mr *MockKubernetesClientMockRecorder) GetServiceByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetServiceByLabel), label, allNamespaces)
}

// GetServicesByLabel mocks base method.
func (m *MockKubernetesClient) GetServicesByLabel(label string, allNamespaces bool) ([]v12.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicesByLabel", label, allNamespaces)
	ret0, _ := ret[0].([]v12.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServicesByLabel indicates an expected call of GetServicesByLabel.
func (mr *MockKubernetesClientMockRecorder) GetServicesByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicesByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).GetServicesByLabel), label, allNamespaces)
}

// GetVolumeSnapshotClasses mocks base method.
func (m *MockKubernetesClient) GetVolumeSnapshotClasses() ([]v1.VolumeSnapshotClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeSnapshotClasses")
	ret0, _ := ret[0].([]v1.VolumeSnapshotClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeSnapshotClasses indicates an expected call of GetVolumeSnapshotClasses.
func (mr *MockKubernetesClientMockRecorder) GetVolumeSnapshotClasses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeSnapshotClasses", reflect.TypeOf((*MockKubernetesClient)(nil).GetVolumeSnapshotClasses))
}

// GetVolumeSnapshotContents mocks base method.
func (m *MockKubernetesClient) GetVolumeSnapshotContents() ([]v1.VolumeSnapshotContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeSnapshotContents")
	ret0, _ := ret[0].([]v1.VolumeSnapshotContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeSnapshotContents indicates an expected call of GetVolumeSnapshotContents.
func (mr *MockKubernetesClientMockRecorder) GetVolumeSnapshotContents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeSnapshotContents", reflect.TypeOf((*MockKubernetesClient)(nil).GetVolumeSnapshotContents))
}

// GetVolumeSnapshots mocks base method.
func (m *MockKubernetesClient) GetVolumeSnapshots(allNamespaces bool) ([]v1.VolumeSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeSnapshots", allNamespaces)
	ret0, _ := ret[0].([]v1.VolumeSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeSnapshots indicates an expected call of GetVolumeSnapshots.
func (mr *MockKubernetesClientMockRecorder) GetVolumeSnapshots(allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeSnapshots", reflect.TypeOf((*MockKubernetesClient)(nil).GetVolumeSnapshots), allNamespaces)
}

// Namespace mocks base method.
func (m *MockKubernetesClient) Namespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// Namespace indicates an expected call of Namespace.
func (mr *MockKubernetesClientMockRecorder) Namespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespace", reflect.TypeOf((*MockKubernetesClient)(nil).Namespace))
}

// PatchCRD mocks base method.
func (m *MockKubernetesClient) PatchCRD(crdName string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchCRD", crdName, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCRD indicates an expected call of PatchCRD.
func (mr *MockKubernetesClientMockRecorder) PatchCRD(crdName, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCRD", reflect.TypeOf((*MockKubernetesClient)(nil).PatchCRD), crdName, patchBytes, patchType)
}

// PatchCSIDriverByLabel mocks base method.
func (m *MockKubernetesClient) PatchCSIDriverByLabel(label string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchCSIDriverByLabel", label, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCSIDriverByLabel indicates an expected call of PatchCSIDriverByLabel.
func (mr *MockKubernetesClientMockRecorder) PatchCSIDriverByLabel(label, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCSIDriverByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).PatchCSIDriverByLabel), label, patchBytes, patchType)
}

// PatchClusterRole mocks base method.
func (m *MockKubernetesClient) PatchClusterRole(newClusterRole, currentClusterRole *v13.ClusterRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchClusterRole", newClusterRole, currentClusterRole)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClusterRole indicates an expected call of PatchClusterRole.
func (mr *MockKubernetesClientMockRecorder) PatchClusterRole(newClusterRole, currentClusterRole any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClusterRole", reflect.TypeOf((*MockKubernetesClient)(nil).PatchClusterRole), newClusterRole, currentClusterRole)
}

// PatchClusterRoleBindingByLabel mocks base method.
func (m *MockKubernetesClient) PatchClusterRoleBindingByLabel(label string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchClusterRoleBindingByLabel", label, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClusterRoleBindingByLabel indicates an expected call of PatchClusterRoleBindingByLabel.
func (mr *MockKubernetesClientMockRecorder) PatchClusterRoleBindingByLabel(label, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClusterRoleBindingByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).PatchClusterRoleBindingByLabel), label, patchBytes, patchType)
}

// PatchClusterRoleBindingByLabelAndName mocks base method.
func (m *MockKubernetesClient) PatchClusterRoleBindingByLabelAndName(label, clusterRoleBindingName string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchClusterRoleBindingByLabelAndName", label, clusterRoleBindingName, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClusterRoleBindingByLabelAndName indicates an expected call of PatchClusterRoleBindingByLabelAndName.
func (mr *MockKubernetesClientMockRecorder) PatchClusterRoleBindingByLabelAndName(label, clusterRoleBindingName, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClusterRoleBindingByLabelAndName", reflect.TypeOf((*MockKubernetesClient)(nil).PatchClusterRoleBindingByLabelAndName), label, clusterRoleBindingName, patchBytes, patchType)
}

// PatchClusterRoleByLabel mocks base method.
func (m *MockKubernetesClient) PatchClusterRoleByLabel(label string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchClusterRoleByLabel", label, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClusterRoleByLabel indicates an expected call of PatchClusterRoleByLabel.
func (mr *MockKubernetesClientMockRecorder) PatchClusterRoleByLabel(label, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClusterRoleByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).PatchClusterRoleByLabel), label, patchBytes, patchType)
}

// PatchClusterRoleByLabelAndName mocks base method.
func (m *MockKubernetesClient) PatchClusterRoleByLabelAndName(label, clusterRoleName string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchClusterRoleByLabelAndName", label, clusterRoleName, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClusterRoleByLabelAndName indicates an expected call of PatchClusterRoleByLabelAndName.
func (mr *MockKubernetesClientMockRecorder) PatchClusterRoleByLabelAndName(label, clusterRoleName, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClusterRoleByLabelAndName", reflect.TypeOf((*MockKubernetesClient)(nil).PatchClusterRoleByLabelAndName), label, clusterRoleName, patchBytes, patchType)
}

// PatchDaemonSetByLabel mocks base method.
func (m *MockKubernetesClient) PatchDaemonSetByLabel(label string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDaemonSetByLabel", label, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDaemonSetByLabel indicates an expected call of PatchDaemonSetByLabel.
func (mr *MockKubernetesClientMockRecorder) PatchDaemonSetByLabel(label, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDaemonSetByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).PatchDaemonSetByLabel), label, patchBytes, patchType)
}

// PatchDaemonSetByLabelAndName mocks base method.
func (m *MockKubernetesClient) PatchDaemonSetByLabelAndName(label, daemonSetName string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDaemonSetByLabelAndName", label, daemonSetName, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDaemonSetByLabelAndName indicates an expected call of PatchDaemonSetByLabelAndName.
func (mr *MockKubernetesClientMockRecorder) PatchDaemonSetByLabelAndName(label, daemonSetName, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDaemonSetByLabelAndName", reflect.TypeOf((*MockKubernetesClient)(nil).PatchDaemonSetByLabelAndName), label, daemonSetName, patchBytes, patchType)
}

// PatchDeploymentByLabel mocks base method.
func (m *MockKubernetesClient) PatchDeploymentByLabel(label string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDeploymentByLabel", label, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDeploymentByLabel indicates an expected call of PatchDeploymentByLabel.
func (mr *MockKubernetesClientMockRecorder) PatchDeploymentByLabel(label, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDeploymentByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).PatchDeploymentByLabel), label, patchBytes, patchType)
}

// PatchNamespace mocks base method.
func (m *MockKubernetesClient) PatchNamespace(namespace string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchNamespace", namespace, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchNamespace indicates an expected call of PatchNamespace.
func (mr *MockKubernetesClientMockRecorder) PatchNamespace(namespace, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchNamespace", reflect.TypeOf((*MockKubernetesClient)(nil).PatchNamespace), namespace, patchBytes, patchType)
}

// PatchNamespaceLabels mocks base method.
func (m *MockKubernetesClient) PatchNamespaceLabels(namespace string, labels map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchNamespaceLabels", namespace, labels)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchNamespaceLabels indicates an expected call of PatchNamespaceLabels.
func (mr *MockKubernetesClientMockRecorder) PatchNamespaceLabels(namespace, labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchNamespaceLabels", reflect.TypeOf((*MockKubernetesClient)(nil).PatchNamespaceLabels), namespace, labels)
}

// PatchNodeRemediationTemplate mocks base method.
func (m *MockKubernetesClient) PatchNodeRemediationTemplate(newTnrt, currentTnrt *v10.TridentNodeRemediationTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchNodeRemediationTemplate", newTnrt, currentTnrt)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchNodeRemediationTemplate indicates an expected call of PatchNodeRemediationTemplate.
func (mr *MockKubernetesClientMockRecorder) PatchNodeRemediationTemplate(newTnrt, currentTnrt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchNodeRemediationTemplate", reflect.TypeOf((*MockKubernetesClient)(nil).PatchNodeRemediationTemplate), newTnrt, currentTnrt)
}

// PatchOpenShiftSCC mocks base method.
func (m *MockKubernetesClient) PatchOpenShiftSCC(newJSONData []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchOpenShiftSCC", newJSONData)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchOpenShiftSCC indicates an expected call of PatchOpenShiftSCC.
func (mr *MockKubernetesClientMockRecorder) PatchOpenShiftSCC(newJSONData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchOpenShiftSCC", reflect.TypeOf((*MockKubernetesClient)(nil).PatchOpenShiftSCC), newJSONData)
}

// PatchResourceQuotaByLabel mocks base method.
func (m *MockKubernetesClient) PatchResourceQuotaByLabel(label string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchResourceQuotaByLabel", label, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchResourceQuotaByLabel indicates an expected call of PatchResourceQuotaByLabel.
func (mr *MockKubernetesClientMockRecorder) PatchResourceQuotaByLabel(label, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchResourceQuotaByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).PatchResourceQuotaByLabel), label, patchBytes, patchType)
}

// PatchRoleBindingByLabelAndName mocks base method.
func (m *MockKubernetesClient) PatchRoleBindingByLabelAndName(label, roleBindingName string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchRoleBindingByLabelAndName", label, roleBindingName, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRoleBindingByLabelAndName indicates an expected call of PatchRoleBindingByLabelAndName.
func (mr *MockKubernetesClientMockRecorder) PatchRoleBindingByLabelAndName(label, roleBindingName, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRoleBindingByLabelAndName", reflect.TypeOf((*MockKubernetesClient)(nil).PatchRoleBindingByLabelAndName), label, roleBindingName, patchBytes, patchType)
}

// PatchRoleByLabelAndName mocks base method.
func (m *MockKubernetesClient) PatchRoleByLabelAndName(label, roleName string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchRoleByLabelAndName", label, roleName, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRoleByLabelAndName indicates an expected call of PatchRoleByLabelAndName.
func (mr *MockKubernetesClientMockRecorder) PatchRoleByLabelAndName(label, roleName, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRoleByLabelAndName", reflect.TypeOf((*MockKubernetesClient)(nil).PatchRoleByLabelAndName), label, roleName, patchBytes, patchType)
}

// PatchSecretByLabel mocks base method.
func (m *MockKubernetesClient) PatchSecretByLabel(label string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchSecretByLabel", label, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchSecretByLabel indicates an expected call of PatchSecretByLabel.
func (mr *MockKubernetesClientMockRecorder) PatchSecretByLabel(label, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchSecretByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).PatchSecretByLabel), label, patchBytes, patchType)
}

// PatchServiceAccountByLabel mocks base method.
func (m *MockKubernetesClient) PatchServiceAccountByLabel(label string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchServiceAccountByLabel", label, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchServiceAccountByLabel indicates an expected call of PatchServiceAccountByLabel.
func (mr *MockKubernetesClientMockRecorder) PatchServiceAccountByLabel(label, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchServiceAccountByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).PatchServiceAccountByLabel), label, patchBytes, patchType)
}

// PatchServiceAccountByLabelAndName mocks base method.
func (m *MockKubernetesClient) PatchServiceAccountByLabelAndName(label, serviceAccountName string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchServiceAccountByLabelAndName", label, serviceAccountName, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchServiceAccountByLabelAndName indicates an expected call of PatchServiceAccountByLabelAndName.
func (mr *MockKubernetesClientMockRecorder) PatchServiceAccountByLabelAndName(label, serviceAccountName, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchServiceAccountByLabelAndName", reflect.TypeOf((*MockKubernetesClient)(nil).PatchServiceAccountByLabelAndName), label, serviceAccountName, patchBytes, patchType)
}

// PatchServiceByLabel mocks base method.
func (m *MockKubernetesClient) PatchServiceByLabel(label string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchServiceByLabel", label, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchServiceByLabel indicates an expected call of PatchServiceByLabel.
func (mr *MockKubernetesClientMockRecorder) PatchServiceByLabel(label, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchServiceByLabel", reflect.TypeOf((*MockKubernetesClient)(nil).PatchServiceByLabel), label, patchBytes, patchType)
}

// RemoveFinalizerFromCRD mocks base method.
func (m *MockKubernetesClient) RemoveFinalizerFromCRD(crdName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFinalizerFromCRD", crdName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFinalizerFromCRD indicates an expected call of RemoveFinalizerFromCRD.
func (mr *MockKubernetesClientMockRecorder) RemoveFinalizerFromCRD(crdName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFinalizerFromCRD", reflect.TypeOf((*MockKubernetesClient)(nil).RemoveFinalizerFromCRD), crdName)
}

// RemoveTridentUserFromOpenShiftSCC mocks base method.
func (m *MockKubernetesClient) RemoveTridentUserFromOpenShiftSCC(user, scc string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTridentUserFromOpenShiftSCC", user, scc)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTridentUserFromOpenShiftSCC indicates an expected call of RemoveTridentUserFromOpenShiftSCC.
func (mr *MockKubernetesClientMockRecorder) RemoveTridentUserFromOpenShiftSCC(user, scc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTridentUserFromOpenShiftSCC", reflect.TypeOf((*MockKubernetesClient)(nil).RemoveTridentUserFromOpenShiftSCC), user, scc)
}

// ServerVersion mocks base method.
func (m *MockKubernetesClient) ServerVersion() *version.Version {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerVersion")
	ret0, _ := ret[0].(*version.Version)
	return ret0
}

// ServerVersion indicates an expected call of ServerVersion.
func (mr *MockKubernetesClientMockRecorder) ServerVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerVersion", reflect.TypeOf((*MockKubernetesClient)(nil).ServerVersion))
}

// SetNamespace mocks base method.
func (m *MockKubernetesClient) SetNamespace(namespace string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNamespace", namespace)
}

// SetNamespace indicates an expected call of SetNamespace.
func (mr *MockKubernetesClientMockRecorder) SetNamespace(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNamespace", reflect.TypeOf((*MockKubernetesClient)(nil).SetNamespace), namespace)
}

// SetTimeout mocks base method.
func (m *MockKubernetesClient) SetTimeout(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTimeout", arg0)
}

// SetTimeout indicates an expected call of SetTimeout.
func (mr *MockKubernetesClientMockRecorder) SetTimeout(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeout", reflect.TypeOf((*MockKubernetesClient)(nil).SetTimeout), arg0)
}

// UpdateSecret mocks base method.
func (m *MockKubernetesClient) UpdateSecret(secret *v12.Secret) (*v12.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecret", secret)
	ret0, _ := ret[0].(*v12.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MockKubernetesClientMockRecorder) UpdateSecret(secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockKubernetesClient)(nil).UpdateSecret), secret)
}

// Version mocks base method.
func (m *MockKubernetesClient) Version() *version0.Info {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(*version0.Info)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockKubernetesClientMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockKubernetesClient)(nil).Version))
}
