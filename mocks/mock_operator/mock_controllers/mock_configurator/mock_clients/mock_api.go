// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/operator/controllers/configurator/clients (interfaces: ConfiguratorClientInterface,ExtendedK8sClientInterface)
//
// Generated by this command:
//
//	mockgen -destination=../../../../mocks/mock_operator/mock_controllers/mock_configurator/mock_clients/mock_api.go github.com/netapp/trident/operator/controllers/configurator/clients ConfiguratorClientInterface,ExtendedK8sClientInterface
//

// Package mock_clients is a generated GoMock package.
package mock_clients

import (
	reflect "reflect"
	time "time"

	v1 "github.com/kubernetes-csi/external-snapshotter/client/v8/apis/volumesnapshot/v1"
	k8sclient "github.com/netapp/trident/cli/k8s_client"
	clients "github.com/netapp/trident/operator/controllers/configurator/clients"
	v10 "github.com/netapp/trident/operator/crd/apis/netapp/v1"
	v11 "github.com/netapp/trident/persistent_store/crd/apis/netapp/v1"
	version "github.com/netapp/trident/utils/version"
	gomock "go.uber.org/mock/gomock"
	v12 "k8s.io/api/apps/v1"
	v13 "k8s.io/api/core/v1"
	v14 "k8s.io/api/rbac/v1"
	v15 "k8s.io/api/storage/v1"
	v16 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	types "k8s.io/apimachinery/pkg/types"
	version0 "k8s.io/apimachinery/pkg/version"
)

// MockConfiguratorClientInterface is a mock of ConfiguratorClientInterface interface.
type MockConfiguratorClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockConfiguratorClientInterfaceMockRecorder
	isgomock struct{}
}

// MockConfiguratorClientInterfaceMockRecorder is the mock recorder for MockConfiguratorClientInterface.
type MockConfiguratorClientInterfaceMockRecorder struct {
	mock *MockConfiguratorClientInterface
}

// NewMockConfiguratorClientInterface creates a new mock instance.
func NewMockConfiguratorClientInterface(ctrl *gomock.Controller) *MockConfiguratorClientInterface {
	mock := &MockConfiguratorClientInterface{ctrl: ctrl}
	mock.recorder = &MockConfiguratorClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfiguratorClientInterface) EXPECT() *MockConfiguratorClientInterfaceMockRecorder {
	return m.recorder
}

// CreateOrPatchObject mocks base method.
func (m *MockConfiguratorClientInterface) CreateOrPatchObject(objType clients.ObjectType, objName, objNamespace, objYAML string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrPatchObject", objType, objName, objNamespace, objYAML)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrPatchObject indicates an expected call of CreateOrPatchObject.
func (mr *MockConfiguratorClientInterfaceMockRecorder) CreateOrPatchObject(objType, objName, objNamespace, objYAML any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrPatchObject", reflect.TypeOf((*MockConfiguratorClientInterface)(nil).CreateOrPatchObject), objType, objName, objNamespace, objYAML)
}

// DeleteObject mocks base method.
func (m *MockConfiguratorClientInterface) DeleteObject(objType clients.ObjectType, objName, objNamespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", objType, objName, objNamespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockConfiguratorClientInterfaceMockRecorder) DeleteObject(objType, objName, objNamespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockConfiguratorClientInterface)(nil).DeleteObject), objType, objName, objNamespace)
}

// GetANFSecrets mocks base method.
func (m *MockConfiguratorClientInterface) GetANFSecrets(secretName string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetANFSecrets", secretName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetANFSecrets indicates an expected call of GetANFSecrets.
func (mr *MockConfiguratorClientInterfaceMockRecorder) GetANFSecrets(secretName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetANFSecrets", reflect.TypeOf((*MockConfiguratorClientInterface)(nil).GetANFSecrets), secretName)
}

// GetControllingTorcCR mocks base method.
func (m *MockConfiguratorClientInterface) GetControllingTorcCR() (*v10.TridentOrchestrator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllingTorcCR")
	ret0, _ := ret[0].(*v10.TridentOrchestrator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControllingTorcCR indicates an expected call of GetControllingTorcCR.
func (mr *MockConfiguratorClientInterfaceMockRecorder) GetControllingTorcCR() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllingTorcCR", reflect.TypeOf((*MockConfiguratorClientInterface)(nil).GetControllingTorcCR))
}

// GetTconfCR mocks base method.
func (m *MockConfiguratorClientInterface) GetTconfCR(name string) (*v10.TridentConfigurator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTconfCR", name)
	ret0, _ := ret[0].(*v10.TridentConfigurator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTconfCR indicates an expected call of GetTconfCR.
func (mr *MockConfiguratorClientInterfaceMockRecorder) GetTconfCR(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTconfCR", reflect.TypeOf((*MockConfiguratorClientInterface)(nil).GetTconfCR), name)
}

// ListObjects mocks base method.
func (m *MockConfiguratorClientInterface) ListObjects(objType clients.ObjectType, objNamespace string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjects", objType, objNamespace)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjects indicates an expected call of ListObjects.
func (mr *MockConfiguratorClientInterfaceMockRecorder) ListObjects(objType, objNamespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjects", reflect.TypeOf((*MockConfiguratorClientInterface)(nil).ListObjects), objType, objNamespace)
}

// UpdateTridentConfiguratorStatus mocks base method.
func (m *MockConfiguratorClientInterface) UpdateTridentConfiguratorStatus(tconfCR *v10.TridentConfigurator, newStatus v10.TridentConfiguratorStatus) (*v10.TridentConfigurator, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTridentConfiguratorStatus", tconfCR, newStatus)
	ret0, _ := ret[0].(*v10.TridentConfigurator)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateTridentConfiguratorStatus indicates an expected call of UpdateTridentConfiguratorStatus.
func (mr *MockConfiguratorClientInterfaceMockRecorder) UpdateTridentConfiguratorStatus(tconfCR, newStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTridentConfiguratorStatus", reflect.TypeOf((*MockConfiguratorClientInterface)(nil).UpdateTridentConfiguratorStatus), tconfCR, newStatus)
}

// MockExtendedK8sClientInterface is a mock of ExtendedK8sClientInterface interface.
type MockExtendedK8sClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockExtendedK8sClientInterfaceMockRecorder
	isgomock struct{}
}

// MockExtendedK8sClientInterfaceMockRecorder is the mock recorder for MockExtendedK8sClientInterface.
type MockExtendedK8sClientInterfaceMockRecorder struct {
	mock *MockExtendedK8sClientInterface
}

// NewMockExtendedK8sClientInterface creates a new mock instance.
func NewMockExtendedK8sClientInterface(ctrl *gomock.Controller) *MockExtendedK8sClientInterface {
	mock := &MockExtendedK8sClientInterface{ctrl: ctrl}
	mock.recorder = &MockExtendedK8sClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtendedK8sClientInterface) EXPECT() *MockExtendedK8sClientInterfaceMockRecorder {
	return m.recorder
}

// AddFinalizerToCRD mocks base method.
func (m *MockExtendedK8sClientInterface) AddFinalizerToCRD(crdName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFinalizerToCRD", crdName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFinalizerToCRD indicates an expected call of AddFinalizerToCRD.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) AddFinalizerToCRD(crdName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFinalizerToCRD", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).AddFinalizerToCRD), crdName)
}

// AddFinalizerToCRDs mocks base method.
func (m *MockExtendedK8sClientInterface) AddFinalizerToCRDs(CRDnames []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFinalizerToCRDs", CRDnames)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFinalizerToCRDs indicates an expected call of AddFinalizerToCRDs.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) AddFinalizerToCRDs(CRDnames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFinalizerToCRDs", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).AddFinalizerToCRDs), CRDnames)
}

// CLI mocks base method.
func (m *MockExtendedK8sClientInterface) CLI() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CLI")
	ret0, _ := ret[0].(string)
	return ret0
}

// CLI indicates an expected call of CLI.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CLI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CLI", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CLI))
}

// CheckCRDExists mocks base method.
func (m *MockExtendedK8sClientInterface) CheckCRDExists(crdName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCRDExists", crdName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCRDExists indicates an expected call of CheckCRDExists.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckCRDExists(crdName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCRDExists", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckCRDExists), crdName)
}

// CheckCSIDriverExistsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) CheckCSIDriverExistsByLabel(label string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCSIDriverExistsByLabel", label)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckCSIDriverExistsByLabel indicates an expected call of CheckCSIDriverExistsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckCSIDriverExistsByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCSIDriverExistsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckCSIDriverExistsByLabel), label)
}

// CheckClusterRoleBindingExistsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) CheckClusterRoleBindingExistsByLabel(label string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckClusterRoleBindingExistsByLabel", label)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckClusterRoleBindingExistsByLabel indicates an expected call of CheckClusterRoleBindingExistsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckClusterRoleBindingExistsByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckClusterRoleBindingExistsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckClusterRoleBindingExistsByLabel), label)
}

// CheckClusterRoleExistsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) CheckClusterRoleExistsByLabel(label string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckClusterRoleExistsByLabel", label)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckClusterRoleExistsByLabel indicates an expected call of CheckClusterRoleExistsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckClusterRoleExistsByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckClusterRoleExistsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckClusterRoleExistsByLabel), label)
}

// CheckDaemonSetExists mocks base method.
func (m *MockExtendedK8sClientInterface) CheckDaemonSetExists(name, namespace string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDaemonSetExists", name, namespace)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDaemonSetExists indicates an expected call of CheckDaemonSetExists.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckDaemonSetExists(name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDaemonSetExists", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckDaemonSetExists), name, namespace)
}

// CheckDaemonSetExistsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) CheckDaemonSetExistsByLabel(label string, allNamespaces bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDaemonSetExistsByLabel", label, allNamespaces)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckDaemonSetExistsByLabel indicates an expected call of CheckDaemonSetExistsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckDaemonSetExistsByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDaemonSetExistsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckDaemonSetExistsByLabel), label, allNamespaces)
}

// CheckDeploymentExists mocks base method.
func (m *MockExtendedK8sClientInterface) CheckDeploymentExists(name, namespace string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDeploymentExists", name, namespace)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDeploymentExists indicates an expected call of CheckDeploymentExists.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckDeploymentExists(name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDeploymentExists", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckDeploymentExists), name, namespace)
}

// CheckDeploymentExistsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) CheckDeploymentExistsByLabel(label string, allNamespaces bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDeploymentExistsByLabel", label, allNamespaces)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckDeploymentExistsByLabel indicates an expected call of CheckDeploymentExistsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckDeploymentExistsByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDeploymentExistsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckDeploymentExistsByLabel), label, allNamespaces)
}

// CheckNamespaceExists mocks base method.
func (m *MockExtendedK8sClientInterface) CheckNamespaceExists(namespace string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNamespaceExists", namespace)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckNamespaceExists indicates an expected call of CheckNamespaceExists.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckNamespaceExists(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNamespaceExists", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckNamespaceExists), namespace)
}

// CheckPodExistsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) CheckPodExistsByLabel(label string, allNamespaces bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPodExistsByLabel", label, allNamespaces)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckPodExistsByLabel indicates an expected call of CheckPodExistsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckPodExistsByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPodExistsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckPodExistsByLabel), label, allNamespaces)
}

// CheckSecretExists mocks base method.
func (m *MockExtendedK8sClientInterface) CheckSecretExists(secretName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSecretExists", secretName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSecretExists indicates an expected call of CheckSecretExists.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckSecretExists(secretName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSecretExists", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckSecretExists), secretName)
}

// CheckServiceAccountExistsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) CheckServiceAccountExistsByLabel(label string, allNamespaces bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckServiceAccountExistsByLabel", label, allNamespaces)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckServiceAccountExistsByLabel indicates an expected call of CheckServiceAccountExistsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckServiceAccountExistsByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckServiceAccountExistsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckServiceAccountExistsByLabel), label, allNamespaces)
}

// CheckServiceExistsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) CheckServiceExistsByLabel(label string, allNamespaces bool) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckServiceExistsByLabel", label, allNamespaces)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckServiceExistsByLabel indicates an expected call of CheckServiceExistsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckServiceExistsByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckServiceExistsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckServiceExistsByLabel), label, allNamespaces)
}

// CheckStorageClassExists mocks base method.
func (m *MockExtendedK8sClientInterface) CheckStorageClassExists(name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckStorageClassExists", name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckStorageClassExists indicates an expected call of CheckStorageClassExists.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CheckStorageClassExists(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStorageClassExists", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CheckStorageClassExists), name)
}

// CreateObjectByFile mocks base method.
func (m *MockExtendedK8sClientInterface) CreateObjectByFile(filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObjectByFile", filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateObjectByFile indicates an expected call of CreateObjectByFile.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CreateObjectByFile(filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObjectByFile", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CreateObjectByFile), filePath)
}

// CreateObjectByYAML mocks base method.
func (m *MockExtendedK8sClientInterface) CreateObjectByYAML(yaml string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObjectByYAML", yaml)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateObjectByYAML indicates an expected call of CreateObjectByYAML.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CreateObjectByYAML(yaml any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObjectByYAML", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CreateObjectByYAML), yaml)
}

// CreateOrPatchClusterRole mocks base method.
func (m *MockExtendedK8sClientInterface) CreateOrPatchClusterRole(clusterRole *v14.ClusterRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrPatchClusterRole", clusterRole)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrPatchClusterRole indicates an expected call of CreateOrPatchClusterRole.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CreateOrPatchClusterRole(clusterRole any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrPatchClusterRole", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CreateOrPatchClusterRole), clusterRole)
}

// CreateOrPatchNodeRemediationTemplate mocks base method.
func (m *MockExtendedK8sClientInterface) CreateOrPatchNodeRemediationTemplate(tnrt *v11.TridentNodeRemediationTemplate, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrPatchNodeRemediationTemplate", tnrt, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrPatchNodeRemediationTemplate indicates an expected call of CreateOrPatchNodeRemediationTemplate.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CreateOrPatchNodeRemediationTemplate(tnrt, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrPatchNodeRemediationTemplate", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CreateOrPatchNodeRemediationTemplate), tnrt, namespace)
}

// CreateSecret mocks base method.
func (m *MockExtendedK8sClientInterface) CreateSecret(secret *v13.Secret) (*v13.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", secret)
	ret0, _ := ret[0].(*v13.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) CreateSecret(secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).CreateSecret), secret)
}

// DeleteCRD mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteCRD(crdName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCRD", crdName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCRD indicates an expected call of DeleteCRD.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteCRD(crdName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCRD", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteCRD), crdName)
}

// DeleteCSIDriver mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteCSIDriver(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCSIDriver", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCSIDriver indicates an expected call of DeleteCSIDriver.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteCSIDriver(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCSIDriver", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteCSIDriver), name)
}

// DeleteCSIDriverByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteCSIDriverByLabel(label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCSIDriverByLabel", label)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCSIDriverByLabel indicates an expected call of DeleteCSIDriverByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteCSIDriverByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCSIDriverByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteCSIDriverByLabel), label)
}

// DeleteClusterRole mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteClusterRole(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRole", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRole indicates an expected call of DeleteClusterRole.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteClusterRole(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRole", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteClusterRole), name)
}

// DeleteClusterRoleBinding mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteClusterRoleBinding(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRoleBinding", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRoleBinding indicates an expected call of DeleteClusterRoleBinding.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteClusterRoleBinding(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRoleBinding", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteClusterRoleBinding), name)
}

// DeleteClusterRoleBindingByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteClusterRoleBindingByLabel(label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRoleBindingByLabel", label)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRoleBindingByLabel indicates an expected call of DeleteClusterRoleBindingByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteClusterRoleBindingByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRoleBindingByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteClusterRoleBindingByLabel), label)
}

// DeleteClusterRoleByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteClusterRoleByLabel(label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRoleByLabel", label)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRoleByLabel indicates an expected call of DeleteClusterRoleByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteClusterRoleByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRoleByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteClusterRoleByLabel), label)
}

// DeleteDaemonSet mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteDaemonSet(name, namespace string, foreground bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDaemonSet", name, namespace, foreground)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDaemonSet indicates an expected call of DeleteDaemonSet.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteDaemonSet(name, namespace, foreground any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDaemonSet", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteDaemonSet), name, namespace, foreground)
}

// DeleteDaemonSetByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteDaemonSetByLabel(label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDaemonSetByLabel", label)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDaemonSetByLabel indicates an expected call of DeleteDaemonSetByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteDaemonSetByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDaemonSetByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteDaemonSetByLabel), label)
}

// DeleteDaemonSetByLabelAndName mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteDaemonSetByLabelAndName(label, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDaemonSetByLabelAndName", label, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDaemonSetByLabelAndName indicates an expected call of DeleteDaemonSetByLabelAndName.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteDaemonSetByLabelAndName(label, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDaemonSetByLabelAndName", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteDaemonSetByLabelAndName), label, name)
}

// DeleteDeployment mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteDeployment(name, namespace string, foreground bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeployment", name, namespace, foreground)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeployment indicates an expected call of DeleteDeployment.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteDeployment(name, namespace, foreground any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeployment", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteDeployment), name, namespace, foreground)
}

// DeleteDeploymentByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteDeploymentByLabel(label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeploymentByLabel", label)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeploymentByLabel indicates an expected call of DeleteDeploymentByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteDeploymentByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploymentByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteDeploymentByLabel), label)
}

// DeleteObjectByFile mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteObjectByFile(filePath string, ignoreNotFound bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectByFile", filePath, ignoreNotFound)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObjectByFile indicates an expected call of DeleteObjectByFile.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteObjectByFile(filePath, ignoreNotFound any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectByFile", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteObjectByFile), filePath, ignoreNotFound)
}

// DeleteObjectByYAML mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteObjectByYAML(yaml string, ignoreNotFound bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectByYAML", yaml, ignoreNotFound)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObjectByYAML indicates an expected call of DeleteObjectByYAML.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteObjectByYAML(yaml, ignoreNotFound any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectByYAML", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteObjectByYAML), yaml, ignoreNotFound)
}

// DeletePod mocks base method.
func (m *MockExtendedK8sClientInterface) DeletePod(name, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePod", name, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePod indicates an expected call of DeletePod.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeletePod(name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePod", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeletePod), name, namespace)
}

// DeletePodByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) DeletePodByLabel(label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePodByLabel", label)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePodByLabel indicates an expected call of DeletePodByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeletePodByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePodByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeletePodByLabel), label)
}

// DeleteResourceQuota mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteResourceQuota(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceQuota", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResourceQuota indicates an expected call of DeleteResourceQuota.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteResourceQuota(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceQuota", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteResourceQuota), name)
}

// DeleteResourceQuotaByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteResourceQuotaByLabel(label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceQuotaByLabel", label)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResourceQuotaByLabel indicates an expected call of DeleteResourceQuotaByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteResourceQuotaByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceQuotaByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteResourceQuotaByLabel), label)
}

// DeleteRole mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteRole(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteRole(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteRole), name)
}

// DeleteRoleBinding mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteRoleBinding(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleBinding", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleBinding indicates an expected call of DeleteRoleBinding.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteRoleBinding(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleBinding", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteRoleBinding), name)
}

// DeleteSecret mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteSecret(name, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", name, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteSecret(name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteSecret), name, namespace)
}

// DeleteSecretByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteSecretByLabel(label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecretByLabel", label)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecretByLabel indicates an expected call of DeleteSecretByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteSecretByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecretByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteSecretByLabel), label)
}

// DeleteSecretDefault mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteSecretDefault(secretName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecretDefault", secretName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecretDefault indicates an expected call of DeleteSecretDefault.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteSecretDefault(secretName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecretDefault", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteSecretDefault), secretName)
}

// DeleteService mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteService(name, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", name, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteService(name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteService), name, namespace)
}

// DeleteServiceAccount mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteServiceAccount(name, namespace string, foreground bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceAccount", name, namespace, foreground)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceAccount indicates an expected call of DeleteServiceAccount.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteServiceAccount(name, namespace, foreground any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceAccount", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteServiceAccount), name, namespace, foreground)
}

// DeleteServiceAccountByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteServiceAccountByLabel(label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceAccountByLabel", label)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceAccountByLabel indicates an expected call of DeleteServiceAccountByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteServiceAccountByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceAccountByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteServiceAccountByLabel), label)
}

// DeleteServiceByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteServiceByLabel(label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceByLabel", label)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceByLabel indicates an expected call of DeleteServiceByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteServiceByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteServiceByLabel), label)
}

// DeleteStorageClass mocks base method.
func (m *MockExtendedK8sClientInterface) DeleteStorageClass(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStorageClass", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStorageClass indicates an expected call of DeleteStorageClass.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) DeleteStorageClass(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStorageClass", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).DeleteStorageClass), name)
}

// Exec mocks base method.
func (m *MockExtendedK8sClientInterface) Exec(podName, containerName string, commandArgs []string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", podName, containerName, commandArgs)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) Exec(podName, containerName, commandArgs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).Exec), podName, containerName, commandArgs)
}

// Flavor mocks base method.
func (m *MockExtendedK8sClientInterface) Flavor() k8sclient.OrchestratorFlavor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flavor")
	ret0, _ := ret[0].(k8sclient.OrchestratorFlavor)
	return ret0
}

// Flavor indicates an expected call of Flavor.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) Flavor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flavor", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).Flavor))
}

// GetCRD mocks base method.
func (m *MockExtendedK8sClientInterface) GetCRD(crdName string) (*v16.CustomResourceDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCRD", crdName)
	ret0, _ := ret[0].(*v16.CustomResourceDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCRD indicates an expected call of GetCRD.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetCRD(crdName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCRD", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetCRD), crdName)
}

// GetCSIDriverByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetCSIDriverByLabel(label string) (*v15.CSIDriver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSIDriverByLabel", label)
	ret0, _ := ret[0].(*v15.CSIDriver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSIDriverByLabel indicates an expected call of GetCSIDriverByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetCSIDriverByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSIDriverByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetCSIDriverByLabel), label)
}

// GetCSIDriversByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetCSIDriversByLabel(label string) ([]v15.CSIDriver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSIDriversByLabel", label)
	ret0, _ := ret[0].([]v15.CSIDriver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSIDriversByLabel indicates an expected call of GetCSIDriversByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetCSIDriversByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSIDriversByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetCSIDriversByLabel), label)
}

// GetClusterRoleBindingByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetClusterRoleBindingByLabel(label string) (*v14.ClusterRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleBindingByLabel", label)
	ret0, _ := ret[0].(*v14.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleBindingByLabel indicates an expected call of GetClusterRoleBindingByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetClusterRoleBindingByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleBindingByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetClusterRoleBindingByLabel), label)
}

// GetClusterRoleBindingByLabelAndName mocks base method.
func (m *MockExtendedK8sClientInterface) GetClusterRoleBindingByLabelAndName(label, clusterRoleBindingName string) (*v14.ClusterRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleBindingByLabelAndName", label, clusterRoleBindingName)
	ret0, _ := ret[0].(*v14.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleBindingByLabelAndName indicates an expected call of GetClusterRoleBindingByLabelAndName.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetClusterRoleBindingByLabelAndName(label, clusterRoleBindingName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleBindingByLabelAndName", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetClusterRoleBindingByLabelAndName), label, clusterRoleBindingName)
}

// GetClusterRoleBindingsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetClusterRoleBindingsByLabel(label string) ([]v14.ClusterRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleBindingsByLabel", label)
	ret0, _ := ret[0].([]v14.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleBindingsByLabel indicates an expected call of GetClusterRoleBindingsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetClusterRoleBindingsByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleBindingsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetClusterRoleBindingsByLabel), label)
}

// GetClusterRoleByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetClusterRoleByLabel(label string) (*v14.ClusterRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleByLabel", label)
	ret0, _ := ret[0].(*v14.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleByLabel indicates an expected call of GetClusterRoleByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetClusterRoleByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetClusterRoleByLabel), label)
}

// GetClusterRoleByLabelAndName mocks base method.
func (m *MockExtendedK8sClientInterface) GetClusterRoleByLabelAndName(label, clusterRoleName string) (*v14.ClusterRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleByLabelAndName", label, clusterRoleName)
	ret0, _ := ret[0].(*v14.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleByLabelAndName indicates an expected call of GetClusterRoleByLabelAndName.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetClusterRoleByLabelAndName(label, clusterRoleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleByLabelAndName", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetClusterRoleByLabelAndName), label, clusterRoleName)
}

// GetClusterRolesByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetClusterRolesByLabel(label string) ([]v14.ClusterRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRolesByLabel", label)
	ret0, _ := ret[0].([]v14.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRolesByLabel indicates an expected call of GetClusterRolesByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetClusterRolesByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRolesByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetClusterRolesByLabel), label)
}

// GetDaemonSetByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetDaemonSetByLabel(label string, allNamespaces bool) (*v12.DaemonSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDaemonSetByLabel", label, allNamespaces)
	ret0, _ := ret[0].(*v12.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDaemonSetByLabel indicates an expected call of GetDaemonSetByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetDaemonSetByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaemonSetByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetDaemonSetByLabel), label, allNamespaces)
}

// GetDaemonSetByLabelAndName mocks base method.
func (m *MockExtendedK8sClientInterface) GetDaemonSetByLabelAndName(label, name string, allNamespaces bool) (*v12.DaemonSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDaemonSetByLabelAndName", label, name, allNamespaces)
	ret0, _ := ret[0].(*v12.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDaemonSetByLabelAndName indicates an expected call of GetDaemonSetByLabelAndName.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetDaemonSetByLabelAndName(label, name, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaemonSetByLabelAndName", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetDaemonSetByLabelAndName), label, name, allNamespaces)
}

// GetDaemonSetsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetDaemonSetsByLabel(label string, allNamespaces bool) ([]v12.DaemonSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDaemonSetsByLabel", label, allNamespaces)
	ret0, _ := ret[0].([]v12.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDaemonSetsByLabel indicates an expected call of GetDaemonSetsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetDaemonSetsByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaemonSetsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetDaemonSetsByLabel), label, allNamespaces)
}

// GetDeploymentByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetDeploymentByLabel(label string, allNamespaces bool) (*v12.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentByLabel", label, allNamespaces)
	ret0, _ := ret[0].(*v12.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentByLabel indicates an expected call of GetDeploymentByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetDeploymentByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetDeploymentByLabel), label, allNamespaces)
}

// GetDeploymentsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetDeploymentsByLabel(label string, allNamespaces bool) ([]v12.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentsByLabel", label, allNamespaces)
	ret0, _ := ret[0].([]v12.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentsByLabel indicates an expected call of GetDeploymentsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetDeploymentsByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetDeploymentsByLabel), label, allNamespaces)
}

// GetNamespace mocks base method.
func (m *MockExtendedK8sClientInterface) GetNamespace(namespace string) (*v13.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace", namespace)
	ret0, _ := ret[0].(*v13.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetNamespace(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetNamespace), namespace)
}

// GetOpenShiftSCCByName mocks base method.
func (m *MockExtendedK8sClientInterface) GetOpenShiftSCCByName(user, scc string) (bool, bool, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenShiftSCCByName", user, scc)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].([]byte)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetOpenShiftSCCByName indicates an expected call of GetOpenShiftSCCByName.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetOpenShiftSCCByName(user, scc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenShiftSCCByName", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetOpenShiftSCCByName), user, scc)
}

// GetPersistentVolumeClaims mocks base method.
func (m *MockExtendedK8sClientInterface) GetPersistentVolumeClaims(allNamespaces bool) ([]v13.PersistentVolumeClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersistentVolumeClaims", allNamespaces)
	ret0, _ := ret[0].([]v13.PersistentVolumeClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersistentVolumeClaims indicates an expected call of GetPersistentVolumeClaims.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetPersistentVolumeClaims(allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersistentVolumeClaims", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetPersistentVolumeClaims), allNamespaces)
}

// GetPersistentVolumes mocks base method.
func (m *MockExtendedK8sClientInterface) GetPersistentVolumes() ([]v13.PersistentVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersistentVolumes")
	ret0, _ := ret[0].([]v13.PersistentVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersistentVolumes indicates an expected call of GetPersistentVolumes.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetPersistentVolumes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersistentVolumes", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetPersistentVolumes))
}

// GetPodByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetPodByLabel(label string, allNamespaces bool) (*v13.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodByLabel", label, allNamespaces)
	ret0, _ := ret[0].(*v13.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodByLabel indicates an expected call of GetPodByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetPodByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetPodByLabel), label, allNamespaces)
}

// GetPodsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetPodsByLabel(label string, allNamespaces bool) ([]v13.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodsByLabel", label, allNamespaces)
	ret0, _ := ret[0].([]v13.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodsByLabel indicates an expected call of GetPodsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetPodsByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetPodsByLabel), label, allNamespaces)
}

// GetResourceQuota mocks base method.
func (m *MockExtendedK8sClientInterface) GetResourceQuota(label string) (*v13.ResourceQuota, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceQuota", label)
	ret0, _ := ret[0].(*v13.ResourceQuota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceQuota indicates an expected call of GetResourceQuota.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetResourceQuota(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceQuota", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetResourceQuota), label)
}

// GetResourceQuotaByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetResourceQuotaByLabel(label string) (*v13.ResourceQuota, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceQuotaByLabel", label)
	ret0, _ := ret[0].(*v13.ResourceQuota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceQuotaByLabel indicates an expected call of GetResourceQuotaByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetResourceQuotaByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceQuotaByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetResourceQuotaByLabel), label)
}

// GetResourceQuotasByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetResourceQuotasByLabel(label string) ([]v13.ResourceQuota, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceQuotasByLabel", label)
	ret0, _ := ret[0].([]v13.ResourceQuota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceQuotasByLabel indicates an expected call of GetResourceQuotasByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetResourceQuotasByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceQuotasByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetResourceQuotasByLabel), label)
}

// GetRoleBindingByLabelAndName mocks base method.
func (m *MockExtendedK8sClientInterface) GetRoleBindingByLabelAndName(label, roleBindingName string) (*v14.RoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleBindingByLabelAndName", label, roleBindingName)
	ret0, _ := ret[0].(*v14.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleBindingByLabelAndName indicates an expected call of GetRoleBindingByLabelAndName.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetRoleBindingByLabelAndName(label, roleBindingName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleBindingByLabelAndName", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetRoleBindingByLabelAndName), label, roleBindingName)
}

// GetRoleBindingsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetRoleBindingsByLabel(label string) ([]v14.RoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleBindingsByLabel", label)
	ret0, _ := ret[0].([]v14.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleBindingsByLabel indicates an expected call of GetRoleBindingsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetRoleBindingsByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleBindingsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetRoleBindingsByLabel), label)
}

// GetRolesByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetRolesByLabel(label string) ([]v14.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolesByLabel", label)
	ret0, _ := ret[0].([]v14.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolesByLabel indicates an expected call of GetRolesByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetRolesByLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolesByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetRolesByLabel), label)
}

// GetSecret mocks base method.
func (m *MockExtendedK8sClientInterface) GetSecret(secretName string) (*v13.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", secretName)
	ret0, _ := ret[0].(*v13.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetSecret(secretName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetSecret), secretName)
}

// GetSecretByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetSecretByLabel(label string, allNamespaces bool) (*v13.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretByLabel", label, allNamespaces)
	ret0, _ := ret[0].(*v13.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretByLabel indicates an expected call of GetSecretByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetSecretByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetSecretByLabel), label, allNamespaces)
}

// GetSecretsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetSecretsByLabel(label string, allNamespaces bool) ([]v13.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretsByLabel", label, allNamespaces)
	ret0, _ := ret[0].([]v13.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretsByLabel indicates an expected call of GetSecretsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetSecretsByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetSecretsByLabel), label, allNamespaces)
}

// GetServiceAccountByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetServiceAccountByLabel(label string, allNamespaces bool) (*v13.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccountByLabel", label, allNamespaces)
	ret0, _ := ret[0].(*v13.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccountByLabel indicates an expected call of GetServiceAccountByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetServiceAccountByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccountByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetServiceAccountByLabel), label, allNamespaces)
}

// GetServiceAccountByLabelAndName mocks base method.
func (m *MockExtendedK8sClientInterface) GetServiceAccountByLabelAndName(label, serviceAccountName string, allNamespaces bool) (*v13.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccountByLabelAndName", label, serviceAccountName, allNamespaces)
	ret0, _ := ret[0].(*v13.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccountByLabelAndName indicates an expected call of GetServiceAccountByLabelAndName.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetServiceAccountByLabelAndName(label, serviceAccountName, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccountByLabelAndName", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetServiceAccountByLabelAndName), label, serviceAccountName, allNamespaces)
}

// GetServiceAccountsByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetServiceAccountsByLabel(label string, allNamespaces bool) ([]v13.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccountsByLabel", label, allNamespaces)
	ret0, _ := ret[0].([]v13.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccountsByLabel indicates an expected call of GetServiceAccountsByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetServiceAccountsByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccountsByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetServiceAccountsByLabel), label, allNamespaces)
}

// GetServiceByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetServiceByLabel(label string, allNamespaces bool) (*v13.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceByLabel", label, allNamespaces)
	ret0, _ := ret[0].(*v13.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceByLabel indicates an expected call of GetServiceByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetServiceByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetServiceByLabel), label, allNamespaces)
}

// GetServicesByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) GetServicesByLabel(label string, allNamespaces bool) ([]v13.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicesByLabel", label, allNamespaces)
	ret0, _ := ret[0].([]v13.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServicesByLabel indicates an expected call of GetServicesByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetServicesByLabel(label, allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicesByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetServicesByLabel), label, allNamespaces)
}

// GetStorageClass mocks base method.
func (m *MockExtendedK8sClientInterface) GetStorageClass(name string) (*v15.StorageClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageClass", name)
	ret0, _ := ret[0].(*v15.StorageClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageClass indicates an expected call of GetStorageClass.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetStorageClass(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageClass", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetStorageClass), name)
}

// GetVolumeSnapshotClasses mocks base method.
func (m *MockExtendedK8sClientInterface) GetVolumeSnapshotClasses() ([]v1.VolumeSnapshotClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeSnapshotClasses")
	ret0, _ := ret[0].([]v1.VolumeSnapshotClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeSnapshotClasses indicates an expected call of GetVolumeSnapshotClasses.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetVolumeSnapshotClasses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeSnapshotClasses", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetVolumeSnapshotClasses))
}

// GetVolumeSnapshotContents mocks base method.
func (m *MockExtendedK8sClientInterface) GetVolumeSnapshotContents() ([]v1.VolumeSnapshotContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeSnapshotContents")
	ret0, _ := ret[0].([]v1.VolumeSnapshotContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeSnapshotContents indicates an expected call of GetVolumeSnapshotContents.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetVolumeSnapshotContents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeSnapshotContents", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetVolumeSnapshotContents))
}

// GetVolumeSnapshots mocks base method.
func (m *MockExtendedK8sClientInterface) GetVolumeSnapshots(allNamespaces bool) ([]v1.VolumeSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeSnapshots", allNamespaces)
	ret0, _ := ret[0].([]v1.VolumeSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeSnapshots indicates an expected call of GetVolumeSnapshots.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) GetVolumeSnapshots(allNamespaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeSnapshots", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).GetVolumeSnapshots), allNamespaces)
}

// Namespace mocks base method.
func (m *MockExtendedK8sClientInterface) Namespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// Namespace indicates an expected call of Namespace.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) Namespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespace", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).Namespace))
}

// PatchCRD mocks base method.
func (m *MockExtendedK8sClientInterface) PatchCRD(crdName string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchCRD", crdName, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCRD indicates an expected call of PatchCRD.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchCRD(crdName, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCRD", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchCRD), crdName, patchBytes, patchType)
}

// PatchCSIDriverByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) PatchCSIDriverByLabel(label string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchCSIDriverByLabel", label, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCSIDriverByLabel indicates an expected call of PatchCSIDriverByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchCSIDriverByLabel(label, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCSIDriverByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchCSIDriverByLabel), label, patchBytes, patchType)
}

// PatchClusterRole mocks base method.
func (m *MockExtendedK8sClientInterface) PatchClusterRole(newClusterRole, currentClusterRole *v14.ClusterRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchClusterRole", newClusterRole, currentClusterRole)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClusterRole indicates an expected call of PatchClusterRole.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchClusterRole(newClusterRole, currentClusterRole any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClusterRole", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchClusterRole), newClusterRole, currentClusterRole)
}

// PatchClusterRoleBindingByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) PatchClusterRoleBindingByLabel(label string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchClusterRoleBindingByLabel", label, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClusterRoleBindingByLabel indicates an expected call of PatchClusterRoleBindingByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchClusterRoleBindingByLabel(label, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClusterRoleBindingByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchClusterRoleBindingByLabel), label, patchBytes, patchType)
}

// PatchClusterRoleBindingByLabelAndName mocks base method.
func (m *MockExtendedK8sClientInterface) PatchClusterRoleBindingByLabelAndName(label, clusterRoleBindingName string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchClusterRoleBindingByLabelAndName", label, clusterRoleBindingName, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClusterRoleBindingByLabelAndName indicates an expected call of PatchClusterRoleBindingByLabelAndName.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchClusterRoleBindingByLabelAndName(label, clusterRoleBindingName, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClusterRoleBindingByLabelAndName", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchClusterRoleBindingByLabelAndName), label, clusterRoleBindingName, patchBytes, patchType)
}

// PatchClusterRoleByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) PatchClusterRoleByLabel(label string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchClusterRoleByLabel", label, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClusterRoleByLabel indicates an expected call of PatchClusterRoleByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchClusterRoleByLabel(label, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClusterRoleByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchClusterRoleByLabel), label, patchBytes, patchType)
}

// PatchClusterRoleByLabelAndName mocks base method.
func (m *MockExtendedK8sClientInterface) PatchClusterRoleByLabelAndName(label, clusterRoleName string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchClusterRoleByLabelAndName", label, clusterRoleName, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClusterRoleByLabelAndName indicates an expected call of PatchClusterRoleByLabelAndName.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchClusterRoleByLabelAndName(label, clusterRoleName, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClusterRoleByLabelAndName", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchClusterRoleByLabelAndName), label, clusterRoleName, patchBytes, patchType)
}

// PatchDaemonSetByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) PatchDaemonSetByLabel(label string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDaemonSetByLabel", label, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDaemonSetByLabel indicates an expected call of PatchDaemonSetByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchDaemonSetByLabel(label, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDaemonSetByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchDaemonSetByLabel), label, patchBytes, patchType)
}

// PatchDaemonSetByLabelAndName mocks base method.
func (m *MockExtendedK8sClientInterface) PatchDaemonSetByLabelAndName(label, daemonSetName string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDaemonSetByLabelAndName", label, daemonSetName, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDaemonSetByLabelAndName indicates an expected call of PatchDaemonSetByLabelAndName.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchDaemonSetByLabelAndName(label, daemonSetName, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDaemonSetByLabelAndName", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchDaemonSetByLabelAndName), label, daemonSetName, patchBytes, patchType)
}

// PatchDeploymentByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) PatchDeploymentByLabel(label string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDeploymentByLabel", label, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDeploymentByLabel indicates an expected call of PatchDeploymentByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchDeploymentByLabel(label, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDeploymentByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchDeploymentByLabel), label, patchBytes, patchType)
}

// PatchNamespace mocks base method.
func (m *MockExtendedK8sClientInterface) PatchNamespace(namespace string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchNamespace", namespace, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchNamespace indicates an expected call of PatchNamespace.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchNamespace(namespace, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchNamespace", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchNamespace), namespace, patchBytes, patchType)
}

// PatchNamespaceLabels mocks base method.
func (m *MockExtendedK8sClientInterface) PatchNamespaceLabels(namespace string, labels map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchNamespaceLabels", namespace, labels)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchNamespaceLabels indicates an expected call of PatchNamespaceLabels.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchNamespaceLabels(namespace, labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchNamespaceLabels", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchNamespaceLabels), namespace, labels)
}

// PatchNodeRemediationTemplate mocks base method.
func (m *MockExtendedK8sClientInterface) PatchNodeRemediationTemplate(newTnrt, currentTnrt *v11.TridentNodeRemediationTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchNodeRemediationTemplate", newTnrt, currentTnrt)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchNodeRemediationTemplate indicates an expected call of PatchNodeRemediationTemplate.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchNodeRemediationTemplate(newTnrt, currentTnrt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchNodeRemediationTemplate", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchNodeRemediationTemplate), newTnrt, currentTnrt)
}

// PatchOpenShiftSCC mocks base method.
func (m *MockExtendedK8sClientInterface) PatchOpenShiftSCC(newJSONData []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchOpenShiftSCC", newJSONData)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchOpenShiftSCC indicates an expected call of PatchOpenShiftSCC.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchOpenShiftSCC(newJSONData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchOpenShiftSCC", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchOpenShiftSCC), newJSONData)
}

// PatchResourceQuotaByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) PatchResourceQuotaByLabel(label string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchResourceQuotaByLabel", label, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchResourceQuotaByLabel indicates an expected call of PatchResourceQuotaByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchResourceQuotaByLabel(label, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchResourceQuotaByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchResourceQuotaByLabel), label, patchBytes, patchType)
}

// PatchRoleBindingByLabelAndName mocks base method.
func (m *MockExtendedK8sClientInterface) PatchRoleBindingByLabelAndName(label, roleBindingName string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchRoleBindingByLabelAndName", label, roleBindingName, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRoleBindingByLabelAndName indicates an expected call of PatchRoleBindingByLabelAndName.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchRoleBindingByLabelAndName(label, roleBindingName, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRoleBindingByLabelAndName", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchRoleBindingByLabelAndName), label, roleBindingName, patchBytes, patchType)
}

// PatchRoleByLabelAndName mocks base method.
func (m *MockExtendedK8sClientInterface) PatchRoleByLabelAndName(label, roleName string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchRoleByLabelAndName", label, roleName, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRoleByLabelAndName indicates an expected call of PatchRoleByLabelAndName.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchRoleByLabelAndName(label, roleName, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRoleByLabelAndName", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchRoleByLabelAndName), label, roleName, patchBytes, patchType)
}

// PatchSecretByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) PatchSecretByLabel(label string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchSecretByLabel", label, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchSecretByLabel indicates an expected call of PatchSecretByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchSecretByLabel(label, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchSecretByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchSecretByLabel), label, patchBytes, patchType)
}

// PatchServiceAccountByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) PatchServiceAccountByLabel(label string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchServiceAccountByLabel", label, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchServiceAccountByLabel indicates an expected call of PatchServiceAccountByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchServiceAccountByLabel(label, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchServiceAccountByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchServiceAccountByLabel), label, patchBytes, patchType)
}

// PatchServiceAccountByLabelAndName mocks base method.
func (m *MockExtendedK8sClientInterface) PatchServiceAccountByLabelAndName(label, serviceAccountName string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchServiceAccountByLabelAndName", label, serviceAccountName, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchServiceAccountByLabelAndName indicates an expected call of PatchServiceAccountByLabelAndName.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchServiceAccountByLabelAndName(label, serviceAccountName, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchServiceAccountByLabelAndName", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchServiceAccountByLabelAndName), label, serviceAccountName, patchBytes, patchType)
}

// PatchServiceByLabel mocks base method.
func (m *MockExtendedK8sClientInterface) PatchServiceByLabel(label string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchServiceByLabel", label, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchServiceByLabel indicates an expected call of PatchServiceByLabel.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchServiceByLabel(label, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchServiceByLabel", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchServiceByLabel), label, patchBytes, patchType)
}

// PatchStorageClass mocks base method.
func (m *MockExtendedK8sClientInterface) PatchStorageClass(name string, patchBytes []byte, patchType types.PatchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchStorageClass", name, patchBytes, patchType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchStorageClass indicates an expected call of PatchStorageClass.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) PatchStorageClass(name, patchBytes, patchType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchStorageClass", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).PatchStorageClass), name, patchBytes, patchType)
}

// RemoveFinalizerFromCRD mocks base method.
func (m *MockExtendedK8sClientInterface) RemoveFinalizerFromCRD(crdName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFinalizerFromCRD", crdName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFinalizerFromCRD indicates an expected call of RemoveFinalizerFromCRD.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) RemoveFinalizerFromCRD(crdName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFinalizerFromCRD", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).RemoveFinalizerFromCRD), crdName)
}

// RemoveTridentUserFromOpenShiftSCC mocks base method.
func (m *MockExtendedK8sClientInterface) RemoveTridentUserFromOpenShiftSCC(user, scc string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTridentUserFromOpenShiftSCC", user, scc)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTridentUserFromOpenShiftSCC indicates an expected call of RemoveTridentUserFromOpenShiftSCC.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) RemoveTridentUserFromOpenShiftSCC(user, scc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTridentUserFromOpenShiftSCC", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).RemoveTridentUserFromOpenShiftSCC), user, scc)
}

// ServerVersion mocks base method.
func (m *MockExtendedK8sClientInterface) ServerVersion() *version.Version {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerVersion")
	ret0, _ := ret[0].(*version.Version)
	return ret0
}

// ServerVersion indicates an expected call of ServerVersion.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) ServerVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerVersion", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).ServerVersion))
}

// SetNamespace mocks base method.
func (m *MockExtendedK8sClientInterface) SetNamespace(namespace string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNamespace", namespace)
}

// SetNamespace indicates an expected call of SetNamespace.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) SetNamespace(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNamespace", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).SetNamespace), namespace)
}

// SetTimeout mocks base method.
func (m *MockExtendedK8sClientInterface) SetTimeout(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTimeout", arg0)
}

// SetTimeout indicates an expected call of SetTimeout.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) SetTimeout(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeout", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).SetTimeout), arg0)
}

// UpdateSecret mocks base method.
func (m *MockExtendedK8sClientInterface) UpdateSecret(secret *v13.Secret) (*v13.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecret", secret)
	ret0, _ := ret[0].(*v13.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) UpdateSecret(secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).UpdateSecret), secret)
}

// Version mocks base method.
func (m *MockExtendedK8sClientInterface) Version() *version0.Info {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(*version0.Info)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockExtendedK8sClientInterfaceMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockExtendedK8sClientInterface)(nil).Version))
}
