// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/utils/devices (interfaces: Devices)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/mock_utils/mock_devices/mock_devices_client.go github.com/netapp/trident/utils/devices Devices
//

// Package mock_devices is a generated GoMock package.
package mock_devices

import (
	reflect "reflect"
	time "time"

	models "github.com/netapp/trident/utils/models"
	gomock "go.uber.org/mock/gomock"
	context "golang.org/x/net/context"
)

// MockDevices is a mock of Devices interface.
type MockDevices struct {
	ctrl     *gomock.Controller
	recorder *MockDevicesMockRecorder
	isgomock struct{}
}

// MockDevicesMockRecorder is the mock recorder for MockDevices.
type MockDevicesMockRecorder struct {
	mock *MockDevices
}

// NewMockDevices creates a new mock instance.
func NewMockDevices(ctrl *gomock.Controller) *MockDevices {
	mock := &MockDevices{ctrl: ctrl}
	mock.recorder = &MockDevicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevices) EXPECT() *MockDevicesMockRecorder {
	return m.recorder
}

// ClearFormatting mocks base method.
func (m *MockDevices) ClearFormatting(ctx context.Context, devicePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearFormatting", ctx, devicePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearFormatting indicates an expected call of ClearFormatting.
func (mr *MockDevicesMockRecorder) ClearFormatting(ctx, devicePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearFormatting", reflect.TypeOf((*MockDevices)(nil).ClearFormatting), ctx, devicePath)
}

// CloseLUKSDevice mocks base method.
func (m *MockDevices) CloseLUKSDevice(ctx context.Context, devicePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseLUKSDevice", ctx, devicePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseLUKSDevice indicates an expected call of CloseLUKSDevice.
func (mr *MockDevicesMockRecorder) CloseLUKSDevice(ctx, devicePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseLUKSDevice", reflect.TypeOf((*MockDevices)(nil).CloseLUKSDevice), ctx, devicePath)
}

// EnsureDeviceReadable mocks base method.
func (m *MockDevices) EnsureDeviceReadable(ctx context.Context, device string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureDeviceReadable", ctx, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureDeviceReadable indicates an expected call of EnsureDeviceReadable.
func (mr *MockDevicesMockRecorder) EnsureDeviceReadable(ctx, device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureDeviceReadable", reflect.TypeOf((*MockDevices)(nil).EnsureDeviceReadable), ctx, device)
}

// EnsureLUKSDeviceClosed mocks base method.
func (m *MockDevices) EnsureLUKSDeviceClosed(ctx context.Context, devicePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureLUKSDeviceClosed", ctx, devicePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureLUKSDeviceClosed indicates an expected call of EnsureLUKSDeviceClosed.
func (mr *MockDevicesMockRecorder) EnsureLUKSDeviceClosed(ctx, devicePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureLUKSDeviceClosed", reflect.TypeOf((*MockDevices)(nil).EnsureLUKSDeviceClosed), ctx, devicePath)
}

// EnsureLUKSDeviceClosedWithMaxWaitLimit mocks base method.
func (m *MockDevices) EnsureLUKSDeviceClosedWithMaxWaitLimit(ctx context.Context, luksDevicePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureLUKSDeviceClosedWithMaxWaitLimit", ctx, luksDevicePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureLUKSDeviceClosedWithMaxWaitLimit indicates an expected call of EnsureLUKSDeviceClosedWithMaxWaitLimit.
func (mr *MockDevicesMockRecorder) EnsureLUKSDeviceClosedWithMaxWaitLimit(ctx, luksDevicePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureLUKSDeviceClosedWithMaxWaitLimit", reflect.TypeOf((*MockDevices)(nil).EnsureLUKSDeviceClosedWithMaxWaitLimit), ctx, luksDevicePath)
}

// FindDevicesForMultipathDevice mocks base method.
func (m *MockDevices) FindDevicesForMultipathDevice(ctx context.Context, device string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDevicesForMultipathDevice", ctx, device)
	ret0, _ := ret[0].([]string)
	return ret0
}

// FindDevicesForMultipathDevice indicates an expected call of FindDevicesForMultipathDevice.
func (mr *MockDevicesMockRecorder) FindDevicesForMultipathDevice(ctx, device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDevicesForMultipathDevice", reflect.TypeOf((*MockDevices)(nil).FindDevicesForMultipathDevice), ctx, device)
}

// FindMultipathDeviceForDevice mocks base method.
func (m *MockDevices) FindMultipathDeviceForDevice(ctx context.Context, device string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMultipathDeviceForDevice", ctx, device)
	ret0, _ := ret[0].(string)
	return ret0
}

// FindMultipathDeviceForDevice indicates an expected call of FindMultipathDeviceForDevice.
func (mr *MockDevicesMockRecorder) FindMultipathDeviceForDevice(ctx, device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMultipathDeviceForDevice", reflect.TypeOf((*MockDevices)(nil).FindMultipathDeviceForDevice), ctx, device)
}

// FlushDevice mocks base method.
func (m *MockDevices) FlushDevice(ctx context.Context, deviceInfo *models.ScsiDeviceInfo, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushDevice", ctx, deviceInfo, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushDevice indicates an expected call of FlushDevice.
func (mr *MockDevicesMockRecorder) FlushDevice(ctx, deviceInfo, force any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushDevice", reflect.TypeOf((*MockDevices)(nil).FlushDevice), ctx, deviceInfo, force)
}

// FlushOneDevice mocks base method.
func (m *MockDevices) FlushOneDevice(ctx context.Context, devicePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushOneDevice", ctx, devicePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushOneDevice indicates an expected call of FlushOneDevice.
func (mr *MockDevicesMockRecorder) FlushOneDevice(ctx, devicePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushOneDevice", reflect.TypeOf((*MockDevices)(nil).FlushOneDevice), ctx, devicePath)
}

// GetDeviceFSType mocks base method.
func (m *MockDevices) GetDeviceFSType(ctx context.Context, device string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceFSType", ctx, device)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceFSType indicates an expected call of GetDeviceFSType.
func (mr *MockDevicesMockRecorder) GetDeviceFSType(ctx, device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceFSType", reflect.TypeOf((*MockDevices)(nil).GetDeviceFSType), ctx, device)
}

// GetDiskSize mocks base method.
func (m *MockDevices) GetDiskSize(ctx context.Context, devicePath string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiskSize", ctx, devicePath)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiskSize indicates an expected call of GetDiskSize.
func (mr *MockDevicesMockRecorder) GetDiskSize(ctx, devicePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskSize", reflect.TypeOf((*MockDevices)(nil).GetDiskSize), ctx, devicePath)
}

// GetLUKSDeviceForMultipathDevice mocks base method.
func (m *MockDevices) GetLUKSDeviceForMultipathDevice(multipathDevice string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLUKSDeviceForMultipathDevice", multipathDevice)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLUKSDeviceForMultipathDevice indicates an expected call of GetLUKSDeviceForMultipathDevice.
func (mr *MockDevicesMockRecorder) GetLUKSDeviceForMultipathDevice(multipathDevice any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLUKSDeviceForMultipathDevice", reflect.TypeOf((*MockDevices)(nil).GetLUKSDeviceForMultipathDevice), multipathDevice)
}

// GetLunSerial mocks base method.
func (m *MockDevices) GetLunSerial(ctx context.Context, path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLunSerial", ctx, path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLunSerial indicates an expected call of GetLunSerial.
func (mr *MockDevicesMockRecorder) GetLunSerial(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLunSerial", reflect.TypeOf((*MockDevices)(nil).GetLunSerial), ctx, path)
}

// GetMultipathDeviceBySerial mocks base method.
func (m *MockDevices) GetMultipathDeviceBySerial(ctx context.Context, hexSerial string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultipathDeviceBySerial", ctx, hexSerial)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMultipathDeviceBySerial indicates an expected call of GetMultipathDeviceBySerial.
func (mr *MockDevicesMockRecorder) GetMultipathDeviceBySerial(ctx, hexSerial any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultipathDeviceBySerial", reflect.TypeOf((*MockDevices)(nil).GetMultipathDeviceBySerial), ctx, hexSerial)
}

// GetMultipathDeviceUUID mocks base method.
func (m *MockDevices) GetMultipathDeviceUUID(multipathDevicePath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultipathDeviceUUID", multipathDevicePath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMultipathDeviceUUID indicates an expected call of GetMultipathDeviceUUID.
func (mr *MockDevicesMockRecorder) GetMultipathDeviceUUID(multipathDevicePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultipathDeviceUUID", reflect.TypeOf((*MockDevices)(nil).GetMultipathDeviceUUID), multipathDevicePath)
}

// IsDeviceUnformatted mocks base method.
func (m *MockDevices) IsDeviceUnformatted(ctx context.Context, device string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDeviceUnformatted", ctx, device)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDeviceUnformatted indicates an expected call of IsDeviceUnformatted.
func (mr *MockDevicesMockRecorder) IsDeviceUnformatted(ctx, device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDeviceUnformatted", reflect.TypeOf((*MockDevices)(nil).IsDeviceUnformatted), ctx, device)
}

// ListAllDevices mocks base method.
func (m *MockDevices) ListAllDevices(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListAllDevices", ctx)
}

// ListAllDevices indicates an expected call of ListAllDevices.
func (mr *MockDevicesMockRecorder) ListAllDevices(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllDevices", reflect.TypeOf((*MockDevices)(nil).ListAllDevices), ctx)
}

// MultipathFlushDevice mocks base method.
func (m *MockDevices) MultipathFlushDevice(ctx context.Context, deviceInfo *models.ScsiDeviceInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultipathFlushDevice", ctx, deviceInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// MultipathFlushDevice indicates an expected call of MultipathFlushDevice.
func (mr *MockDevicesMockRecorder) MultipathFlushDevice(ctx, deviceInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipathFlushDevice", reflect.TypeOf((*MockDevices)(nil).MultipathFlushDevice), ctx, deviceInfo)
}

// RemoveDevice mocks base method.
func (m *MockDevices) RemoveDevice(ctx context.Context, devices []string, ignoreErrors bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDevice", ctx, devices, ignoreErrors)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDevice indicates an expected call of RemoveDevice.
func (mr *MockDevicesMockRecorder) RemoveDevice(ctx, devices, ignoreErrors any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDevice", reflect.TypeOf((*MockDevices)(nil).RemoveDevice), ctx, devices, ignoreErrors)
}

// RemoveMultipathDeviceMapping mocks base method.
func (m *MockDevices) RemoveMultipathDeviceMapping(ctx context.Context, devicePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMultipathDeviceMapping", ctx, devicePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMultipathDeviceMapping indicates an expected call of RemoveMultipathDeviceMapping.
func (mr *MockDevicesMockRecorder) RemoveMultipathDeviceMapping(ctx, devicePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMultipathDeviceMapping", reflect.TypeOf((*MockDevices)(nil).RemoveMultipathDeviceMapping), ctx, devicePath)
}

// RemoveMultipathDeviceMappingWithRetries mocks base method.
func (m *MockDevices) RemoveMultipathDeviceMappingWithRetries(ctx context.Context, devicePath string, retries uint64, sleep time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMultipathDeviceMappingWithRetries", ctx, devicePath, retries, sleep)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMultipathDeviceMappingWithRetries indicates an expected call of RemoveMultipathDeviceMappingWithRetries.
func (mr *MockDevicesMockRecorder) RemoveMultipathDeviceMappingWithRetries(ctx, devicePath, retries, sleep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMultipathDeviceMappingWithRetries", reflect.TypeOf((*MockDevices)(nil).RemoveMultipathDeviceMappingWithRetries), ctx, devicePath, retries, sleep)
}

// ScanTargetLUN mocks base method.
func (m *MockDevices) ScanTargetLUN(ctx context.Context, deviceAddresses []models.ScsiDeviceAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanTargetLUN", ctx, deviceAddresses)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanTargetLUN indicates an expected call of ScanTargetLUN.
func (mr *MockDevicesMockRecorder) ScanTargetLUN(ctx, deviceAddresses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanTargetLUN", reflect.TypeOf((*MockDevices)(nil).ScanTargetLUN), ctx, deviceAddresses)
}

// VerifyMultipathDevice mocks base method.
func (m *MockDevices) VerifyMultipathDevice(ctx context.Context, publishInfo *models.VolumePublishInfo, allPublishInfos []models.VolumePublishInfo, deviceInfo *models.ScsiDeviceInfo) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyMultipathDevice", ctx, publishInfo, allPublishInfos, deviceInfo)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyMultipathDevice indicates an expected call of VerifyMultipathDevice.
func (mr *MockDevicesMockRecorder) VerifyMultipathDevice(ctx, publishInfo, allPublishInfos, deviceInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyMultipathDevice", reflect.TypeOf((*MockDevices)(nil).VerifyMultipathDevice), ctx, publishInfo, allPublishInfos, deviceInfo)
}

// VerifyMultipathDeviceSize mocks base method.
func (m *MockDevices) VerifyMultipathDeviceSize(ctx context.Context, multipathDevice, device string) (int64, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyMultipathDeviceSize", ctx, multipathDevice, device)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// VerifyMultipathDeviceSize indicates an expected call of VerifyMultipathDeviceSize.
func (mr *MockDevicesMockRecorder) VerifyMultipathDeviceSize(ctx, multipathDevice, device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyMultipathDeviceSize", reflect.TypeOf((*MockDevices)(nil).VerifyMultipathDeviceSize), ctx, multipathDevice, device)
}

// WaitForDevice mocks base method.
func (m *MockDevices) WaitForDevice(ctx context.Context, device string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForDevice", ctx, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForDevice indicates an expected call of WaitForDevice.
func (mr *MockDevicesMockRecorder) WaitForDevice(ctx, device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForDevice", reflect.TypeOf((*MockDevices)(nil).WaitForDevice), ctx, device)
}

// WaitForDevicesRemoval mocks base method.
func (m *MockDevices) WaitForDevicesRemoval(ctx context.Context, devicePathPrefix string, deviceNames []string, maxWaitTime time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForDevicesRemoval", ctx, devicePathPrefix, deviceNames, maxWaitTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForDevicesRemoval indicates an expected call of WaitForDevicesRemoval.
func (mr *MockDevicesMockRecorder) WaitForDevicesRemoval(ctx, devicePathPrefix, deviceNames, maxWaitTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForDevicesRemoval", reflect.TypeOf((*MockDevices)(nil).WaitForDevicesRemoval), ctx, devicePathPrefix, deviceNames, maxWaitTime)
}
