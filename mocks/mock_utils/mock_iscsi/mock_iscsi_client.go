// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/utils/iscsi (interfaces: ISCSI)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/mock_utils/mock_iscsi/mock_iscsi_client.go github.com/netapp/trident/utils/iscsi ISCSI
//

// Package mock_iscsi is a generated GoMock package.
package mock_iscsi

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/netapp/trident/utils/models"
	gomock "go.uber.org/mock/gomock"
)

// MockISCSI is a mock of ISCSI interface.
type MockISCSI struct {
	ctrl     *gomock.Controller
	recorder *MockISCSIMockRecorder
}

// MockISCSIMockRecorder is the mock recorder for MockISCSI.
type MockISCSIMockRecorder struct {
	mock *MockISCSI
}

// NewMockISCSI creates a new mock instance.
func NewMockISCSI(ctrl *gomock.Controller) *MockISCSI {
	mock := &MockISCSI{ctrl: ctrl}
	mock.recorder = &MockISCSIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISCSI) EXPECT() *MockISCSIMockRecorder {
	return m.recorder
}

// AddSession mocks base method.
func (m *MockISCSI) AddSession(arg0 context.Context, arg1 *models.ISCSISessions, arg2 *models.VolumePublishInfo, arg3, arg4 string, arg5 models.PortalInvalid) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSession", arg0, arg1, arg2, arg3, arg4, arg5)
}

// AddSession indicates an expected call of AddSession.
func (mr *MockISCSIMockRecorder) AddSession(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSession", reflect.TypeOf((*MockISCSI)(nil).AddSession), arg0, arg1, arg2, arg3, arg4, arg5)
}

// AttachVolumeRetry mocks base method.
func (m *MockISCSI) AttachVolumeRetry(arg0 context.Context, arg1, arg2 string, arg3 *models.VolumePublishInfo, arg4 map[string]string, arg5 time.Duration) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachVolumeRetry", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachVolumeRetry indicates an expected call of AttachVolumeRetry.
func (mr *MockISCSIMockRecorder) AttachVolumeRetry(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachVolumeRetry", reflect.TypeOf((*MockISCSI)(nil).AttachVolumeRetry), arg0, arg1, arg2, arg3, arg4, arg5)
}

// EnsureISCSISessionWithPortalDiscovery mocks base method.
func (m *MockISCSI) EnsureISCSISessionWithPortalDiscovery(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureISCSISessionWithPortalDiscovery", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureISCSISessionWithPortalDiscovery indicates an expected call of EnsureISCSISessionWithPortalDiscovery.
func (mr *MockISCSIMockRecorder) EnsureISCSISessionWithPortalDiscovery(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureISCSISessionWithPortalDiscovery", reflect.TypeOf((*MockISCSI)(nil).EnsureISCSISessionWithPortalDiscovery), arg0, arg1)
}

// EnsureISCSISessionsWithPortalDiscovery mocks base method.
func (m *MockISCSI) EnsureISCSISessionsWithPortalDiscovery(arg0 context.Context, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureISCSISessionsWithPortalDiscovery", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureISCSISessionsWithPortalDiscovery indicates an expected call of EnsureISCSISessionsWithPortalDiscovery.
func (mr *MockISCSIMockRecorder) EnsureISCSISessionsWithPortalDiscovery(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureISCSISessionsWithPortalDiscovery", reflect.TypeOf((*MockISCSI)(nil).EnsureISCSISessionsWithPortalDiscovery), arg0, arg1)
}

// GetDeviceInfoForLUN mocks base method.
func (m *MockISCSI) GetDeviceInfoForLUN(arg0 context.Context, arg1 map[int]int, arg2 int, arg3 string, arg4 bool) (*models.ScsiDeviceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceInfoForLUN", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*models.ScsiDeviceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceInfoForLUN indicates an expected call of GetDeviceInfoForLUN.
func (mr *MockISCSIMockRecorder) GetDeviceInfoForLUN(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceInfoForLUN", reflect.TypeOf((*MockISCSI)(nil).GetDeviceInfoForLUN), arg0, arg1, arg2, arg3, arg4)
}

// ISCSIActiveOnHost mocks base method.
func (m *MockISCSI) ISCSIActiveOnHost(arg0 context.Context, arg1 models.HostSystem) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ISCSIActiveOnHost", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ISCSIActiveOnHost indicates an expected call of ISCSIActiveOnHost.
func (mr *MockISCSIMockRecorder) ISCSIActiveOnHost(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ISCSIActiveOnHost", reflect.TypeOf((*MockISCSI)(nil).ISCSIActiveOnHost), arg0, arg1)
}

// ISCSIDiscovery mocks base method.
func (m *MockISCSI) ISCSIDiscovery(arg0 context.Context, arg1 string) ([]models.ISCSIDiscoveryInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ISCSIDiscovery", arg0, arg1)
	ret0, _ := ret[0].([]models.ISCSIDiscoveryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ISCSIDiscovery indicates an expected call of ISCSIDiscovery.
func (mr *MockISCSIMockRecorder) ISCSIDiscovery(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ISCSIDiscovery", reflect.TypeOf((*MockISCSI)(nil).ISCSIDiscovery), arg0, arg1)
}

// InspectAllISCSISessions mocks base method.
func (m *MockISCSI) InspectAllISCSISessions(arg0 context.Context, arg1, arg2 *models.ISCSISessions, arg3 time.Duration) ([]string, []string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InspectAllISCSISessions", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].([]string)
	return ret0, ret1
}

// InspectAllISCSISessions indicates an expected call of InspectAllISCSISessions.
func (mr *MockISCSIMockRecorder) InspectAllISCSISessions(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectAllISCSISessions", reflect.TypeOf((*MockISCSI)(nil).InspectAllISCSISessions), arg0, arg1, arg2, arg3)
}

// IsAlreadyAttached mocks base method.
func (m *MockISCSI) IsAlreadyAttached(arg0 context.Context, arg1 int, arg2 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAlreadyAttached", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAlreadyAttached indicates an expected call of IsAlreadyAttached.
func (mr *MockISCSIMockRecorder) IsAlreadyAttached(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAlreadyAttached", reflect.TypeOf((*MockISCSI)(nil).IsAlreadyAttached), arg0, arg1, arg2)
}

// IsPortalAccessible mocks base method.
func (m *MockISCSI) IsPortalAccessible(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPortalAccessible", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPortalAccessible indicates an expected call of IsPortalAccessible.
func (mr *MockISCSIMockRecorder) IsPortalAccessible(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPortalAccessible", reflect.TypeOf((*MockISCSI)(nil).IsPortalAccessible), arg0, arg1)
}

// IsSessionStale mocks base method.
func (m *MockISCSI) IsSessionStale(arg0 context.Context, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSessionStale", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSessionStale indicates an expected call of IsSessionStale.
func (mr *MockISCSIMockRecorder) IsSessionStale(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSessionStale", reflect.TypeOf((*MockISCSI)(nil).IsSessionStale), arg0, arg1)
}

// Logout mocks base method.
func (m *MockISCSI) Logout(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockISCSIMockRecorder) Logout(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockISCSI)(nil).Logout), arg0, arg1, arg2)
}

// PopulateCurrentSessions mocks base method.
func (m *MockISCSI) PopulateCurrentSessions(arg0 context.Context, arg1 *models.ISCSISessions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopulateCurrentSessions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PopulateCurrentSessions indicates an expected call of PopulateCurrentSessions.
func (mr *MockISCSIMockRecorder) PopulateCurrentSessions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopulateCurrentSessions", reflect.TypeOf((*MockISCSI)(nil).PopulateCurrentSessions), arg0, arg1)
}

// PreChecks mocks base method.
func (m *MockISCSI) PreChecks(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreChecks", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreChecks indicates an expected call of PreChecks.
func (mr *MockISCSIMockRecorder) PreChecks(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreChecks", reflect.TypeOf((*MockISCSI)(nil).PreChecks), arg0)
}

// PrepareDeviceForRemoval mocks base method.
func (m *MockISCSI) PrepareDeviceForRemoval(arg0 context.Context, arg1 *models.ScsiDeviceInfo, arg2 *models.VolumePublishInfo, arg3 []models.VolumePublishInfo, arg4, arg5 bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareDeviceForRemoval", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareDeviceForRemoval indicates an expected call of PrepareDeviceForRemoval.
func (mr *MockISCSIMockRecorder) PrepareDeviceForRemoval(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareDeviceForRemoval", reflect.TypeOf((*MockISCSI)(nil).PrepareDeviceForRemoval), arg0, arg1, arg2, arg3, arg4, arg5)
}

// RemoveLUNFromSessions mocks base method.
func (m *MockISCSI) RemoveLUNFromSessions(arg0 context.Context, arg1 *models.VolumePublishInfo, arg2 *models.ISCSISessions) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveLUNFromSessions", arg0, arg1, arg2)
}

// RemoveLUNFromSessions indicates an expected call of RemoveLUNFromSessions.
func (mr *MockISCSIMockRecorder) RemoveLUNFromSessions(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLUNFromSessions", reflect.TypeOf((*MockISCSI)(nil).RemoveLUNFromSessions), arg0, arg1, arg2)
}

// RemovePortalsFromSession mocks base method.
func (m *MockISCSI) RemovePortalsFromSession(arg0 context.Context, arg1 *models.VolumePublishInfo, arg2 *models.ISCSISessions) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemovePortalsFromSession", arg0, arg1, arg2)
}

// RemovePortalsFromSession indicates an expected call of RemovePortalsFromSession.
func (mr *MockISCSIMockRecorder) RemovePortalsFromSession(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePortalsFromSession", reflect.TypeOf((*MockISCSI)(nil).RemovePortalsFromSession), arg0, arg1, arg2)
}

// RescanDevices mocks base method.
func (m *MockISCSI) RescanDevices(arg0 context.Context, arg1 string, arg2 int32, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RescanDevices", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RescanDevices indicates an expected call of RescanDevices.
func (mr *MockISCSIMockRecorder) RescanDevices(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RescanDevices", reflect.TypeOf((*MockISCSI)(nil).RescanDevices), arg0, arg1, arg2, arg3)
}

// SafeToLogOut mocks base method.
func (m *MockISCSI) SafeToLogOut(arg0 context.Context, arg1, arg2 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SafeToLogOut", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SafeToLogOut indicates an expected call of SafeToLogOut.
func (mr *MockISCSIMockRecorder) SafeToLogOut(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SafeToLogOut", reflect.TypeOf((*MockISCSI)(nil).SafeToLogOut), arg0, arg1, arg2)
}

// Supported mocks base method.
func (m *MockISCSI) Supported(arg0 context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Supported", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Supported indicates an expected call of Supported.
func (mr *MockISCSIMockRecorder) Supported(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Supported", reflect.TypeOf((*MockISCSI)(nil).Supported), arg0)
}

// TargetHasMountedDevice mocks base method.
func (m *MockISCSI) TargetHasMountedDevice(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TargetHasMountedDevice", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TargetHasMountedDevice indicates an expected call of TargetHasMountedDevice.
func (mr *MockISCSIMockRecorder) TargetHasMountedDevice(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TargetHasMountedDevice", reflect.TypeOf((*MockISCSI)(nil).TargetHasMountedDevice), arg0, arg1)
}
