// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/frontend/crd (interfaces: NodeRemediationUtils)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/mock_frontend/crd/mock_node_remediation.go github.com/netapp/trident/frontend/crd NodeRemediationUtils
//

// Package mock_crd is a generated GoMock package.
package mock_crd

import (
	context "context"
	reflect "reflect"

	storage "github.com/netapp/trident/storage"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockNodeRemediationUtils is a mock of NodeRemediationUtils interface.
type MockNodeRemediationUtils struct {
	ctrl     *gomock.Controller
	recorder *MockNodeRemediationUtilsMockRecorder
	isgomock struct{}
}

// MockNodeRemediationUtilsMockRecorder is the mock recorder for MockNodeRemediationUtils.
type MockNodeRemediationUtilsMockRecorder struct {
	mock *MockNodeRemediationUtils
}

// NewMockNodeRemediationUtils creates a new mock instance.
func NewMockNodeRemediationUtils(ctrl *gomock.Controller) *MockNodeRemediationUtils {
	mock := &MockNodeRemediationUtils{ctrl: ctrl}
	mock.recorder = &MockNodeRemediationUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeRemediationUtils) EXPECT() *MockNodeRemediationUtilsMockRecorder {
	return m.recorder
}

// DeleteVolumeAttachment mocks base method.
func (m *MockNodeRemediationUtils) DeleteVolumeAttachment(ctx context.Context, attachmentName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolumeAttachment", ctx, attachmentName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolumeAttachment indicates an expected call of DeleteVolumeAttachment.
func (mr *MockNodeRemediationUtilsMockRecorder) DeleteVolumeAttachment(ctx, attachmentName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolumeAttachment", reflect.TypeOf((*MockNodeRemediationUtils)(nil).DeleteVolumeAttachment), ctx, attachmentName)
}

// ForceDeletePod mocks base method.
func (m *MockNodeRemediationUtils) ForceDeletePod(ctx context.Context, pod *v1.Pod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceDeletePod", ctx, pod)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForceDeletePod indicates an expected call of ForceDeletePod.
func (mr *MockNodeRemediationUtilsMockRecorder) ForceDeletePod(ctx, pod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceDeletePod", reflect.TypeOf((*MockNodeRemediationUtils)(nil).ForceDeletePod), ctx, pod)
}

// GetNodePods mocks base method.
func (m *MockNodeRemediationUtils) GetNodePods(ctx context.Context, nodeName string) ([]*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodePods", ctx, nodeName)
	ret0, _ := ret[0].([]*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodePods indicates an expected call of GetNodePods.
func (mr *MockNodeRemediationUtilsMockRecorder) GetNodePods(ctx, nodeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodePods", reflect.TypeOf((*MockNodeRemediationUtils)(nil).GetNodePods), ctx, nodeName)
}

// GetPodsToDelete mocks base method.
func (m *MockNodeRemediationUtils) GetPodsToDelete(ctx context.Context, nodePods []*v1.Pod, pvcToTvolMap map[string]*storage.VolumeExternal) []*v1.Pod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodsToDelete", ctx, nodePods, pvcToTvolMap)
	ret0, _ := ret[0].([]*v1.Pod)
	return ret0
}

// GetPodsToDelete indicates an expected call of GetPodsToDelete.
func (mr *MockNodeRemediationUtilsMockRecorder) GetPodsToDelete(ctx, nodePods, pvcToTvolMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodsToDelete", reflect.TypeOf((*MockNodeRemediationUtils)(nil).GetPodsToDelete), ctx, nodePods, pvcToTvolMap)
}

// GetPvcToTvolMap mocks base method.
func (m *MockNodeRemediationUtils) GetPvcToTvolMap(ctx context.Context, nodeName string) (map[string]*storage.VolumeExternal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPvcToTvolMap", ctx, nodeName)
	ret0, _ := ret[0].(map[string]*storage.VolumeExternal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPvcToTvolMap indicates an expected call of GetPvcToTvolMap.
func (mr *MockNodeRemediationUtilsMockRecorder) GetPvcToTvolMap(ctx, nodeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPvcToTvolMap", reflect.TypeOf((*MockNodeRemediationUtils)(nil).GetPvcToTvolMap), ctx, nodeName)
}

// GetTridentVolumesOnNode mocks base method.
func (m *MockNodeRemediationUtils) GetTridentVolumesOnNode(ctx context.Context, nodeName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTridentVolumesOnNode", ctx, nodeName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTridentVolumesOnNode indicates an expected call of GetTridentVolumesOnNode.
func (mr *MockNodeRemediationUtilsMockRecorder) GetTridentVolumesOnNode(ctx, nodeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTridentVolumesOnNode", reflect.TypeOf((*MockNodeRemediationUtils)(nil).GetTridentVolumesOnNode), ctx, nodeName)
}

// GetVolumeAttachmentsToDelete mocks base method.
func (m *MockNodeRemediationUtils) GetVolumeAttachmentsToDelete(ctx context.Context, podsToDelete []*v1.Pod, pvcToTvols map[string]*storage.VolumeExternal, nodeName string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeAttachmentsToDelete", ctx, podsToDelete, pvcToTvols, nodeName)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeAttachmentsToDelete indicates an expected call of GetVolumeAttachmentsToDelete.
func (mr *MockNodeRemediationUtilsMockRecorder) GetVolumeAttachmentsToDelete(ctx, podsToDelete, pvcToTvols, nodeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeAttachmentsToDelete", reflect.TypeOf((*MockNodeRemediationUtils)(nil).GetVolumeAttachmentsToDelete), ctx, podsToDelete, pvcToTvols, nodeName)
}
