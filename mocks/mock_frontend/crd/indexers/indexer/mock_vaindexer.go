// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/frontend/crd/indexers (interfaces: VolumeAttachmentIndexer)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/mock_frontend/crd/indexers/indexer/mock_vaindexer.go -package=mock_indexer github.com/netapp/trident/frontend/crd/indexers VolumeAttachmentIndexer
//

// Package mock_indexer is a generated GoMock package.
package mock_indexer

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/storage/v1"
)

// MockVolumeAttachmentIndexer is a mock of VolumeAttachmentIndexer interface.
type MockVolumeAttachmentIndexer struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeAttachmentIndexerMockRecorder
	isgomock struct{}
}

// MockVolumeAttachmentIndexerMockRecorder is the mock recorder for MockVolumeAttachmentIndexer.
type MockVolumeAttachmentIndexerMockRecorder struct {
	mock *MockVolumeAttachmentIndexer
}

// NewMockVolumeAttachmentIndexer creates a new mock instance.
func NewMockVolumeAttachmentIndexer(ctrl *gomock.Controller) *MockVolumeAttachmentIndexer {
	mock := &MockVolumeAttachmentIndexer{ctrl: ctrl}
	mock.recorder = &MockVolumeAttachmentIndexerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVolumeAttachmentIndexer) EXPECT() *MockVolumeAttachmentIndexerMockRecorder {
	return m.recorder
}

// Activate mocks base method.
func (m *MockVolumeAttachmentIndexer) Activate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Activate")
}

// Activate indicates an expected call of Activate.
func (mr *MockVolumeAttachmentIndexerMockRecorder) Activate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Activate", reflect.TypeOf((*MockVolumeAttachmentIndexer)(nil).Activate))
}

// Deactivate mocks base method.
func (m *MockVolumeAttachmentIndexer) Deactivate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Deactivate")
}

// Deactivate indicates an expected call of Deactivate.
func (mr *MockVolumeAttachmentIndexerMockRecorder) Deactivate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deactivate", reflect.TypeOf((*MockVolumeAttachmentIndexer)(nil).Deactivate))
}

// GetCachedVolumeAttachmentsByNode mocks base method.
func (m *MockVolumeAttachmentIndexer) GetCachedVolumeAttachmentsByNode(ctx context.Context, nodeName string) ([]*v1.VolumeAttachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachedVolumeAttachmentsByNode", ctx, nodeName)
	ret0, _ := ret[0].([]*v1.VolumeAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCachedVolumeAttachmentsByNode indicates an expected call of GetCachedVolumeAttachmentsByNode.
func (mr *MockVolumeAttachmentIndexerMockRecorder) GetCachedVolumeAttachmentsByNode(ctx, nodeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachedVolumeAttachmentsByNode", reflect.TypeOf((*MockVolumeAttachmentIndexer)(nil).GetCachedVolumeAttachmentsByNode), ctx, nodeName)
}

// WaitForCacheSync mocks base method.
func (m *MockVolumeAttachmentIndexer) WaitForCacheSync(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForCacheSync", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// WaitForCacheSync indicates an expected call of WaitForCacheSync.
func (mr *MockVolumeAttachmentIndexerMockRecorder) WaitForCacheSync(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForCacheSync", reflect.TypeOf((*MockVolumeAttachmentIndexer)(nil).WaitForCacheSync), ctx)
}
