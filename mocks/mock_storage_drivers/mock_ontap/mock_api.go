// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/storage_drivers/ontap/api (interfaces: OntapAPI,AggregateSpace,Response)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/mock_storage_drivers/mock_ontap/mock_api.go github.com/netapp/trident/storage_drivers/ontap/api OntapAPI,AggregateSpace,Response
//

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"
	time "time"

	api "github.com/netapp/trident/storage_drivers/ontap/api"
	gomock "go.uber.org/mock/gomock"
)

// MockOntapAPI is a mock of OntapAPI interface.
type MockOntapAPI struct {
	ctrl     *gomock.Controller
	recorder *MockOntapAPIMockRecorder
}

// MockOntapAPIMockRecorder is the mock recorder for MockOntapAPI.
type MockOntapAPIMockRecorder struct {
	mock *MockOntapAPI
}

// NewMockOntapAPI creates a new mock instance.
func NewMockOntapAPI(ctrl *gomock.Controller) *MockOntapAPI {
	mock := &MockOntapAPI{ctrl: ctrl}
	mock.recorder = &MockOntapAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOntapAPI) EXPECT() *MockOntapAPIMockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *MockOntapAPI) APIVersion(arg0 context.Context, arg1 bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// APIVersion indicates an expected call of APIVersion.
func (mr *MockOntapAPIMockRecorder) APIVersion(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*MockOntapAPI)(nil).APIVersion), arg0, arg1)
}

// ConsistencyGroupSnapshot mocks base method.
func (m *MockOntapAPI) ConsistencyGroupSnapshot(arg0 context.Context, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsistencyGroupSnapshot", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsistencyGroupSnapshot indicates an expected call of ConsistencyGroupSnapshot.
func (mr *MockOntapAPIMockRecorder) ConsistencyGroupSnapshot(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsistencyGroupSnapshot", reflect.TypeOf((*MockOntapAPI)(nil).ConsistencyGroupSnapshot), arg0, arg1, arg2)
}

// EmsAutosupportLog mocks base method.
func (m *MockOntapAPI) EmsAutosupportLog(arg0 context.Context, arg1, arg2 string, arg3 bool, arg4, arg5, arg6 string, arg7 int, arg8 string, arg9 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmsAutosupportLog", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
}

// EmsAutosupportLog indicates an expected call of EmsAutosupportLog.
func (mr *MockOntapAPIMockRecorder) EmsAutosupportLog(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmsAutosupportLog", reflect.TypeOf((*MockOntapAPI)(nil).EmsAutosupportLog), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
}

// EnsureIgroupAdded mocks base method.
func (m *MockOntapAPI) EnsureIgroupAdded(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureIgroupAdded", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureIgroupAdded indicates an expected call of EnsureIgroupAdded.
func (mr *MockOntapAPIMockRecorder) EnsureIgroupAdded(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureIgroupAdded", reflect.TypeOf((*MockOntapAPI)(nil).EnsureIgroupAdded), arg0, arg1, arg2)
}

// EnsureLunMapped mocks base method.
func (m *MockOntapAPI) EnsureLunMapped(arg0 context.Context, arg1, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureLunMapped", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureLunMapped indicates an expected call of EnsureLunMapped.
func (mr *MockOntapAPIMockRecorder) EnsureLunMapped(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureLunMapped", reflect.TypeOf((*MockOntapAPI)(nil).EnsureLunMapped), arg0, arg1, arg2)
}

// ExportPolicyCreate mocks base method.
func (m *MockOntapAPI) ExportPolicyCreate(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPolicyCreate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExportPolicyCreate indicates an expected call of ExportPolicyCreate.
func (mr *MockOntapAPIMockRecorder) ExportPolicyCreate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPolicyCreate", reflect.TypeOf((*MockOntapAPI)(nil).ExportPolicyCreate), arg0, arg1)
}

// ExportPolicyDestroy mocks base method.
func (m *MockOntapAPI) ExportPolicyDestroy(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPolicyDestroy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExportPolicyDestroy indicates an expected call of ExportPolicyDestroy.
func (mr *MockOntapAPIMockRecorder) ExportPolicyDestroy(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPolicyDestroy", reflect.TypeOf((*MockOntapAPI)(nil).ExportPolicyDestroy), arg0, arg1)
}

// ExportPolicyExists mocks base method.
func (m *MockOntapAPI) ExportPolicyExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPolicyExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportPolicyExists indicates an expected call of ExportPolicyExists.
func (mr *MockOntapAPIMockRecorder) ExportPolicyExists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPolicyExists", reflect.TypeOf((*MockOntapAPI)(nil).ExportPolicyExists), arg0, arg1)
}

// ExportRuleCreate mocks base method.
func (m *MockOntapAPI) ExportRuleCreate(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportRuleCreate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExportRuleCreate indicates an expected call of ExportRuleCreate.
func (mr *MockOntapAPIMockRecorder) ExportRuleCreate(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportRuleCreate", reflect.TypeOf((*MockOntapAPI)(nil).ExportRuleCreate), arg0, arg1, arg2, arg3)
}

// ExportRuleDestroy mocks base method.
func (m *MockOntapAPI) ExportRuleDestroy(arg0 context.Context, arg1 string, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportRuleDestroy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExportRuleDestroy indicates an expected call of ExportRuleDestroy.
func (mr *MockOntapAPIMockRecorder) ExportRuleDestroy(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportRuleDestroy", reflect.TypeOf((*MockOntapAPI)(nil).ExportRuleDestroy), arg0, arg1, arg2)
}

// ExportRuleList mocks base method.
func (m *MockOntapAPI) ExportRuleList(arg0 context.Context, arg1 string) (map[int]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportRuleList", arg0, arg1)
	ret0, _ := ret[0].(map[int]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportRuleList indicates an expected call of ExportRuleList.
func (mr *MockOntapAPIMockRecorder) ExportRuleList(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportRuleList", reflect.TypeOf((*MockOntapAPI)(nil).ExportRuleList), arg0, arg1)
}

// FcpInterfaceGet mocks base method.
func (m *MockOntapAPI) FcpInterfaceGet(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FcpInterfaceGet", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FcpInterfaceGet indicates an expected call of FcpInterfaceGet.
func (mr *MockOntapAPIMockRecorder) FcpInterfaceGet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FcpInterfaceGet", reflect.TypeOf((*MockOntapAPI)(nil).FcpInterfaceGet), arg0, arg1)
}

// FcpNodeGetNameRequest mocks base method.
func (m *MockOntapAPI) FcpNodeGetNameRequest(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FcpNodeGetNameRequest", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FcpNodeGetNameRequest indicates an expected call of FcpNodeGetNameRequest.
func (mr *MockOntapAPIMockRecorder) FcpNodeGetNameRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FcpNodeGetNameRequest", reflect.TypeOf((*MockOntapAPI)(nil).FcpNodeGetNameRequest), arg0)
}

// FlexgroupCloneSplitStart mocks base method.
func (m *MockOntapAPI) FlexgroupCloneSplitStart(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupCloneSplitStart", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupCloneSplitStart indicates an expected call of FlexgroupCloneSplitStart.
func (mr *MockOntapAPIMockRecorder) FlexgroupCloneSplitStart(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupCloneSplitStart", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupCloneSplitStart), arg0, arg1)
}

// FlexgroupCreate mocks base method.
func (m *MockOntapAPI) FlexgroupCreate(arg0 context.Context, arg1 api.Volume) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupCreate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupCreate indicates an expected call of FlexgroupCreate.
func (mr *MockOntapAPIMockRecorder) FlexgroupCreate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupCreate", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupCreate), arg0, arg1)
}

// FlexgroupDestroy mocks base method.
func (m *MockOntapAPI) FlexgroupDestroy(arg0 context.Context, arg1 string, arg2, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupDestroy", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupDestroy indicates an expected call of FlexgroupDestroy.
func (mr *MockOntapAPIMockRecorder) FlexgroupDestroy(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupDestroy", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupDestroy), arg0, arg1, arg2, arg3)
}

// FlexgroupExists mocks base method.
func (m *MockOntapAPI) FlexgroupExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexgroupExists indicates an expected call of FlexgroupExists.
func (mr *MockOntapAPIMockRecorder) FlexgroupExists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupExists", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupExists), arg0, arg1)
}

// FlexgroupInfo mocks base method.
func (m *MockOntapAPI) FlexgroupInfo(arg0 context.Context, arg1 string) (*api.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupInfo", arg0, arg1)
	ret0, _ := ret[0].(*api.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexgroupInfo indicates an expected call of FlexgroupInfo.
func (mr *MockOntapAPIMockRecorder) FlexgroupInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupInfo", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupInfo), arg0, arg1)
}

// FlexgroupListByPrefix mocks base method.
func (m *MockOntapAPI) FlexgroupListByPrefix(arg0 context.Context, arg1 string) (api.Volumes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupListByPrefix", arg0, arg1)
	ret0, _ := ret[0].(api.Volumes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexgroupListByPrefix indicates an expected call of FlexgroupListByPrefix.
func (mr *MockOntapAPIMockRecorder) FlexgroupListByPrefix(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupListByPrefix", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupListByPrefix), arg0, arg1)
}

// FlexgroupModifyExportPolicy mocks base method.
func (m *MockOntapAPI) FlexgroupModifyExportPolicy(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupModifyExportPolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupModifyExportPolicy indicates an expected call of FlexgroupModifyExportPolicy.
func (mr *MockOntapAPIMockRecorder) FlexgroupModifyExportPolicy(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupModifyExportPolicy", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupModifyExportPolicy), arg0, arg1, arg2)
}

// FlexgroupModifySnapshotDirectoryAccess mocks base method.
func (m *MockOntapAPI) FlexgroupModifySnapshotDirectoryAccess(arg0 context.Context, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupModifySnapshotDirectoryAccess", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupModifySnapshotDirectoryAccess indicates an expected call of FlexgroupModifySnapshotDirectoryAccess.
func (mr *MockOntapAPIMockRecorder) FlexgroupModifySnapshotDirectoryAccess(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupModifySnapshotDirectoryAccess", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupModifySnapshotDirectoryAccess), arg0, arg1, arg2)
}

// FlexgroupModifyUnixPermissions mocks base method.
func (m *MockOntapAPI) FlexgroupModifyUnixPermissions(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupModifyUnixPermissions", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupModifyUnixPermissions indicates an expected call of FlexgroupModifyUnixPermissions.
func (mr *MockOntapAPIMockRecorder) FlexgroupModifyUnixPermissions(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupModifyUnixPermissions", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupModifyUnixPermissions), arg0, arg1, arg2, arg3)
}

// FlexgroupMount mocks base method.
func (m *MockOntapAPI) FlexgroupMount(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupMount", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupMount indicates an expected call of FlexgroupMount.
func (mr *MockOntapAPIMockRecorder) FlexgroupMount(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupMount", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupMount), arg0, arg1, arg2)
}

// FlexgroupSetComment mocks base method.
func (m *MockOntapAPI) FlexgroupSetComment(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupSetComment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupSetComment indicates an expected call of FlexgroupSetComment.
func (mr *MockOntapAPIMockRecorder) FlexgroupSetComment(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupSetComment", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupSetComment), arg0, arg1, arg2, arg3)
}

// FlexgroupSetQosPolicyGroupName mocks base method.
func (m *MockOntapAPI) FlexgroupSetQosPolicyGroupName(arg0 context.Context, arg1 string, arg2 api.QosPolicyGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupSetQosPolicyGroupName", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupSetQosPolicyGroupName indicates an expected call of FlexgroupSetQosPolicyGroupName.
func (mr *MockOntapAPIMockRecorder) FlexgroupSetQosPolicyGroupName(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupSetQosPolicyGroupName", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupSetQosPolicyGroupName), arg0, arg1, arg2)
}

// FlexgroupSetSize mocks base method.
func (m *MockOntapAPI) FlexgroupSetSize(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupSetSize", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupSetSize indicates an expected call of FlexgroupSetSize.
func (mr *MockOntapAPIMockRecorder) FlexgroupSetSize(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupSetSize", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupSetSize), arg0, arg1, arg2)
}

// FlexgroupSize mocks base method.
func (m *MockOntapAPI) FlexgroupSize(arg0 context.Context, arg1 string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupSize", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexgroupSize indicates an expected call of FlexgroupSize.
func (mr *MockOntapAPIMockRecorder) FlexgroupSize(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupSize", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupSize), arg0, arg1)
}

// FlexgroupSnapshotCreate mocks base method.
func (m *MockOntapAPI) FlexgroupSnapshotCreate(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupSnapshotCreate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupSnapshotCreate indicates an expected call of FlexgroupSnapshotCreate.
func (mr *MockOntapAPIMockRecorder) FlexgroupSnapshotCreate(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupSnapshotCreate", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupSnapshotCreate), arg0, arg1, arg2)
}

// FlexgroupSnapshotDelete mocks base method.
func (m *MockOntapAPI) FlexgroupSnapshotDelete(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupSnapshotDelete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupSnapshotDelete indicates an expected call of FlexgroupSnapshotDelete.
func (mr *MockOntapAPIMockRecorder) FlexgroupSnapshotDelete(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupSnapshotDelete", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupSnapshotDelete), arg0, arg1, arg2)
}

// FlexgroupSnapshotList mocks base method.
func (m *MockOntapAPI) FlexgroupSnapshotList(arg0 context.Context, arg1 string) (api.Snapshots, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupSnapshotList", arg0, arg1)
	ret0, _ := ret[0].(api.Snapshots)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexgroupSnapshotList indicates an expected call of FlexgroupSnapshotList.
func (mr *MockOntapAPIMockRecorder) FlexgroupSnapshotList(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupSnapshotList", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupSnapshotList), arg0, arg1)
}

// FlexgroupUnmount mocks base method.
func (m *MockOntapAPI) FlexgroupUnmount(arg0 context.Context, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupUnmount", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupUnmount indicates an expected call of FlexgroupUnmount.
func (mr *MockOntapAPIMockRecorder) FlexgroupUnmount(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupUnmount", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupUnmount), arg0, arg1, arg2)
}

// FlexgroupUsedSize mocks base method.
func (m *MockOntapAPI) FlexgroupUsedSize(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupUsedSize", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexgroupUsedSize indicates an expected call of FlexgroupUsedSize.
func (mr *MockOntapAPIMockRecorder) FlexgroupUsedSize(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupUsedSize", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupUsedSize), arg0, arg1)
}

// GetSLMDataLifs mocks base method.
func (m *MockOntapAPI) GetSLMDataLifs(arg0 context.Context, arg1, arg2 []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSLMDataLifs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSLMDataLifs indicates an expected call of GetSLMDataLifs.
func (mr *MockOntapAPIMockRecorder) GetSLMDataLifs(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSLMDataLifs", reflect.TypeOf((*MockOntapAPI)(nil).GetSLMDataLifs), arg0, arg1, arg2)
}

// GetSVMAggregateAttributes mocks base method.
func (m *MockOntapAPI) GetSVMAggregateAttributes(arg0 context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSVMAggregateAttributes", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSVMAggregateAttributes indicates an expected call of GetSVMAggregateAttributes.
func (mr *MockOntapAPIMockRecorder) GetSVMAggregateAttributes(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSVMAggregateAttributes", reflect.TypeOf((*MockOntapAPI)(nil).GetSVMAggregateAttributes), arg0)
}

// GetSVMAggregateNames mocks base method.
func (m *MockOntapAPI) GetSVMAggregateNames(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSVMAggregateNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSVMAggregateNames indicates an expected call of GetSVMAggregateNames.
func (mr *MockOntapAPIMockRecorder) GetSVMAggregateNames(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSVMAggregateNames", reflect.TypeOf((*MockOntapAPI)(nil).GetSVMAggregateNames), arg0)
}

// GetSVMAggregateSpace mocks base method.
func (m *MockOntapAPI) GetSVMAggregateSpace(arg0 context.Context, arg1 string) ([]api.SVMAggregateSpace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSVMAggregateSpace", arg0, arg1)
	ret0, _ := ret[0].([]api.SVMAggregateSpace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSVMAggregateSpace indicates an expected call of GetSVMAggregateSpace.
func (mr *MockOntapAPIMockRecorder) GetSVMAggregateSpace(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSVMAggregateSpace", reflect.TypeOf((*MockOntapAPI)(nil).GetSVMAggregateSpace), arg0, arg1)
}

// GetSVMPeers mocks base method.
func (m *MockOntapAPI) GetSVMPeers(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSVMPeers", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSVMPeers indicates an expected call of GetSVMPeers.
func (mr *MockOntapAPIMockRecorder) GetSVMPeers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSVMPeers", reflect.TypeOf((*MockOntapAPI)(nil).GetSVMPeers), arg0)
}

// GetSVMState mocks base method.
func (m *MockOntapAPI) GetSVMState(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSVMState", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSVMState indicates an expected call of GetSVMState.
func (mr *MockOntapAPIMockRecorder) GetSVMState(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSVMState", reflect.TypeOf((*MockOntapAPI)(nil).GetSVMState), arg0)
}

// GetSVMUUID mocks base method.
func (m *MockOntapAPI) GetSVMUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSVMUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSVMUUID indicates an expected call of GetSVMUUID.
func (mr *MockOntapAPIMockRecorder) GetSVMUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSVMUUID", reflect.TypeOf((*MockOntapAPI)(nil).GetSVMUUID))
}

// IgroupCreate mocks base method.
func (m *MockOntapAPI) IgroupCreate(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupCreate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// IgroupCreate indicates an expected call of IgroupCreate.
func (mr *MockOntapAPIMockRecorder) IgroupCreate(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupCreate", reflect.TypeOf((*MockOntapAPI)(nil).IgroupCreate), arg0, arg1, arg2, arg3)
}

// IgroupDestroy mocks base method.
func (m *MockOntapAPI) IgroupDestroy(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupDestroy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IgroupDestroy indicates an expected call of IgroupDestroy.
func (mr *MockOntapAPIMockRecorder) IgroupDestroy(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupDestroy", reflect.TypeOf((*MockOntapAPI)(nil).IgroupDestroy), arg0, arg1)
}

// IgroupGetByName mocks base method.
func (m *MockOntapAPI) IgroupGetByName(arg0 context.Context, arg1 string) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupGetByName", arg0, arg1)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IgroupGetByName indicates an expected call of IgroupGetByName.
func (mr *MockOntapAPIMockRecorder) IgroupGetByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupGetByName", reflect.TypeOf((*MockOntapAPI)(nil).IgroupGetByName), arg0, arg1)
}

// IgroupList mocks base method.
func (m *MockOntapAPI) IgroupList(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupList", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IgroupList indicates an expected call of IgroupList.
func (mr *MockOntapAPIMockRecorder) IgroupList(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupList", reflect.TypeOf((*MockOntapAPI)(nil).IgroupList), arg0)
}

// IgroupListLUNsMapped mocks base method.
func (m *MockOntapAPI) IgroupListLUNsMapped(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupListLUNsMapped", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IgroupListLUNsMapped indicates an expected call of IgroupListLUNsMapped.
func (mr *MockOntapAPIMockRecorder) IgroupListLUNsMapped(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupListLUNsMapped", reflect.TypeOf((*MockOntapAPI)(nil).IgroupListLUNsMapped), arg0, arg1)
}

// IgroupRemove mocks base method.
func (m *MockOntapAPI) IgroupRemove(arg0 context.Context, arg1, arg2 string, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupRemove", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// IgroupRemove indicates an expected call of IgroupRemove.
func (mr *MockOntapAPIMockRecorder) IgroupRemove(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupRemove", reflect.TypeOf((*MockOntapAPI)(nil).IgroupRemove), arg0, arg1, arg2, arg3)
}

// IsDisaggregated mocks base method.
func (m *MockOntapAPI) IsDisaggregated() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDisaggregated")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDisaggregated indicates an expected call of IsDisaggregated.
func (mr *MockOntapAPIMockRecorder) IsDisaggregated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDisaggregated", reflect.TypeOf((*MockOntapAPI)(nil).IsDisaggregated))
}

// IsSANOptimized mocks base method.
func (m *MockOntapAPI) IsSANOptimized() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSANOptimized")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSANOptimized indicates an expected call of IsSANOptimized.
func (mr *MockOntapAPIMockRecorder) IsSANOptimized() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSANOptimized", reflect.TypeOf((*MockOntapAPI)(nil).IsSANOptimized))
}

// IsSVMDRCapable mocks base method.
func (m *MockOntapAPI) IsSVMDRCapable(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSVMDRCapable", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSVMDRCapable indicates an expected call of IsSVMDRCapable.
func (mr *MockOntapAPIMockRecorder) IsSVMDRCapable(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSVMDRCapable", reflect.TypeOf((*MockOntapAPI)(nil).IsSVMDRCapable), arg0)
}

// IscsiInitiatorGetDefaultAuth mocks base method.
func (m *MockOntapAPI) IscsiInitiatorGetDefaultAuth(arg0 context.Context) (api.IscsiInitiatorAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IscsiInitiatorGetDefaultAuth", arg0)
	ret0, _ := ret[0].(api.IscsiInitiatorAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IscsiInitiatorGetDefaultAuth indicates an expected call of IscsiInitiatorGetDefaultAuth.
func (mr *MockOntapAPIMockRecorder) IscsiInitiatorGetDefaultAuth(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IscsiInitiatorGetDefaultAuth", reflect.TypeOf((*MockOntapAPI)(nil).IscsiInitiatorGetDefaultAuth), arg0)
}

// IscsiInitiatorSetDefaultAuth mocks base method.
func (m *MockOntapAPI) IscsiInitiatorSetDefaultAuth(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IscsiInitiatorSetDefaultAuth", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// IscsiInitiatorSetDefaultAuth indicates an expected call of IscsiInitiatorSetDefaultAuth.
func (mr *MockOntapAPIMockRecorder) IscsiInitiatorSetDefaultAuth(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IscsiInitiatorSetDefaultAuth", reflect.TypeOf((*MockOntapAPI)(nil).IscsiInitiatorSetDefaultAuth), arg0, arg1, arg2, arg3, arg4, arg5)
}

// IscsiInterfaceGet mocks base method.
func (m *MockOntapAPI) IscsiInterfaceGet(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IscsiInterfaceGet", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IscsiInterfaceGet indicates an expected call of IscsiInterfaceGet.
func (mr *MockOntapAPIMockRecorder) IscsiInterfaceGet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IscsiInterfaceGet", reflect.TypeOf((*MockOntapAPI)(nil).IscsiInterfaceGet), arg0, arg1)
}

// IscsiNodeGetNameRequest mocks base method.
func (m *MockOntapAPI) IscsiNodeGetNameRequest(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IscsiNodeGetNameRequest", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IscsiNodeGetNameRequest indicates an expected call of IscsiNodeGetNameRequest.
func (mr *MockOntapAPIMockRecorder) IscsiNodeGetNameRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IscsiNodeGetNameRequest", reflect.TypeOf((*MockOntapAPI)(nil).IscsiNodeGetNameRequest), arg0)
}

// JobScheduleExists mocks base method.
func (m *MockOntapAPI) JobScheduleExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JobScheduleExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JobScheduleExists indicates an expected call of JobScheduleExists.
func (mr *MockOntapAPIMockRecorder) JobScheduleExists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobScheduleExists", reflect.TypeOf((*MockOntapAPI)(nil).JobScheduleExists), arg0, arg1)
}

// LunCloneCreate mocks base method.
func (m *MockOntapAPI) LunCloneCreate(arg0 context.Context, arg1, arg2, arg3 string, arg4 api.QosPolicyGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunCloneCreate", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunCloneCreate indicates an expected call of LunCloneCreate.
func (mr *MockOntapAPIMockRecorder) LunCloneCreate(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunCloneCreate", reflect.TypeOf((*MockOntapAPI)(nil).LunCloneCreate), arg0, arg1, arg2, arg3, arg4)
}

// LunCreate mocks base method.
func (m *MockOntapAPI) LunCreate(arg0 context.Context, arg1 api.Lun) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunCreate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunCreate indicates an expected call of LunCreate.
func (mr *MockOntapAPIMockRecorder) LunCreate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunCreate", reflect.TypeOf((*MockOntapAPI)(nil).LunCreate), arg0, arg1)
}

// LunDestroy mocks base method.
func (m *MockOntapAPI) LunDestroy(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunDestroy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunDestroy indicates an expected call of LunDestroy.
func (mr *MockOntapAPIMockRecorder) LunDestroy(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunDestroy", reflect.TypeOf((*MockOntapAPI)(nil).LunDestroy), arg0, arg1)
}

// LunExists mocks base method.
func (m *MockOntapAPI) LunExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunExists indicates an expected call of LunExists.
func (mr *MockOntapAPIMockRecorder) LunExists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunExists", reflect.TypeOf((*MockOntapAPI)(nil).LunExists), arg0, arg1)
}

// LunGetAttribute mocks base method.
func (m *MockOntapAPI) LunGetAttribute(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunGetAttribute", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunGetAttribute indicates an expected call of LunGetAttribute.
func (mr *MockOntapAPIMockRecorder) LunGetAttribute(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunGetAttribute", reflect.TypeOf((*MockOntapAPI)(nil).LunGetAttribute), arg0, arg1, arg2)
}

// LunGetByName mocks base method.
func (m *MockOntapAPI) LunGetByName(arg0 context.Context, arg1 string) (*api.Lun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunGetByName", arg0, arg1)
	ret0, _ := ret[0].(*api.Lun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunGetByName indicates an expected call of LunGetByName.
func (mr *MockOntapAPIMockRecorder) LunGetByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunGetByName", reflect.TypeOf((*MockOntapAPI)(nil).LunGetByName), arg0, arg1)
}

// LunGetFSType mocks base method.
func (m *MockOntapAPI) LunGetFSType(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunGetFSType", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunGetFSType indicates an expected call of LunGetFSType.
func (mr *MockOntapAPIMockRecorder) LunGetFSType(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunGetFSType", reflect.TypeOf((*MockOntapAPI)(nil).LunGetFSType), arg0, arg1)
}

// LunGetGeometry mocks base method.
func (m *MockOntapAPI) LunGetGeometry(arg0 context.Context, arg1 string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunGetGeometry", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunGetGeometry indicates an expected call of LunGetGeometry.
func (mr *MockOntapAPIMockRecorder) LunGetGeometry(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunGetGeometry", reflect.TypeOf((*MockOntapAPI)(nil).LunGetGeometry), arg0, arg1)
}

// LunList mocks base method.
func (m *MockOntapAPI) LunList(arg0 context.Context, arg1 string) (api.Luns, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunList", arg0, arg1)
	ret0, _ := ret[0].(api.Luns)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunList indicates an expected call of LunList.
func (mr *MockOntapAPIMockRecorder) LunList(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunList", reflect.TypeOf((*MockOntapAPI)(nil).LunList), arg0, arg1)
}

// LunListIgroupsMapped mocks base method.
func (m *MockOntapAPI) LunListIgroupsMapped(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunListIgroupsMapped", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunListIgroupsMapped indicates an expected call of LunListIgroupsMapped.
func (mr *MockOntapAPIMockRecorder) LunListIgroupsMapped(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunListIgroupsMapped", reflect.TypeOf((*MockOntapAPI)(nil).LunListIgroupsMapped), arg0, arg1)
}

// LunMapGetReportingNodes mocks base method.
func (m *MockOntapAPI) LunMapGetReportingNodes(arg0 context.Context, arg1, arg2 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunMapGetReportingNodes", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunMapGetReportingNodes indicates an expected call of LunMapGetReportingNodes.
func (mr *MockOntapAPIMockRecorder) LunMapGetReportingNodes(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunMapGetReportingNodes", reflect.TypeOf((*MockOntapAPI)(nil).LunMapGetReportingNodes), arg0, arg1, arg2)
}

// LunMapInfo mocks base method.
func (m *MockOntapAPI) LunMapInfo(arg0 context.Context, arg1, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunMapInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunMapInfo indicates an expected call of LunMapInfo.
func (mr *MockOntapAPIMockRecorder) LunMapInfo(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunMapInfo", reflect.TypeOf((*MockOntapAPI)(nil).LunMapInfo), arg0, arg1, arg2)
}

// LunRename mocks base method.
func (m *MockOntapAPI) LunRename(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunRename", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunRename indicates an expected call of LunRename.
func (mr *MockOntapAPIMockRecorder) LunRename(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunRename", reflect.TypeOf((*MockOntapAPI)(nil).LunRename), arg0, arg1, arg2)
}

// LunSetAttribute mocks base method.
func (m *MockOntapAPI) LunSetAttribute(arg0 context.Context, arg1, arg2, arg3, arg4, arg5, arg6 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunSetAttribute", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunSetAttribute indicates an expected call of LunSetAttribute.
func (mr *MockOntapAPIMockRecorder) LunSetAttribute(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunSetAttribute", reflect.TypeOf((*MockOntapAPI)(nil).LunSetAttribute), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// LunSetComment mocks base method.
func (m *MockOntapAPI) LunSetComment(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunSetComment", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunSetComment indicates an expected call of LunSetComment.
func (mr *MockOntapAPIMockRecorder) LunSetComment(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunSetComment", reflect.TypeOf((*MockOntapAPI)(nil).LunSetComment), arg0, arg1, arg2)
}

// LunSetQosPolicyGroup mocks base method.
func (m *MockOntapAPI) LunSetQosPolicyGroup(arg0 context.Context, arg1 string, arg2 api.QosPolicyGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunSetQosPolicyGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunSetQosPolicyGroup indicates an expected call of LunSetQosPolicyGroup.
func (mr *MockOntapAPIMockRecorder) LunSetQosPolicyGroup(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunSetQosPolicyGroup", reflect.TypeOf((*MockOntapAPI)(nil).LunSetQosPolicyGroup), arg0, arg1, arg2)
}

// LunSetSize mocks base method.
func (m *MockOntapAPI) LunSetSize(arg0 context.Context, arg1, arg2 string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunSetSize", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunSetSize indicates an expected call of LunSetSize.
func (mr *MockOntapAPIMockRecorder) LunSetSize(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunSetSize", reflect.TypeOf((*MockOntapAPI)(nil).LunSetSize), arg0, arg1, arg2)
}

// LunSize mocks base method.
func (m *MockOntapAPI) LunSize(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunSize", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunSize indicates an expected call of LunSize.
func (mr *MockOntapAPIMockRecorder) LunSize(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunSize", reflect.TypeOf((*MockOntapAPI)(nil).LunSize), arg0, arg1)
}

// LunUnmap mocks base method.
func (m *MockOntapAPI) LunUnmap(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunUnmap", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunUnmap indicates an expected call of LunUnmap.
func (mr *MockOntapAPIMockRecorder) LunUnmap(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunUnmap", reflect.TypeOf((*MockOntapAPI)(nil).LunUnmap), arg0, arg1, arg2)
}

// NVMeAddHostToSubsystem mocks base method.
func (m *MockOntapAPI) NVMeAddHostToSubsystem(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NVMeAddHostToSubsystem", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// NVMeAddHostToSubsystem indicates an expected call of NVMeAddHostToSubsystem.
func (mr *MockOntapAPIMockRecorder) NVMeAddHostToSubsystem(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NVMeAddHostToSubsystem", reflect.TypeOf((*MockOntapAPI)(nil).NVMeAddHostToSubsystem), arg0, arg1, arg2)
}

// NVMeEnsureNamespaceMapped mocks base method.
func (m *MockOntapAPI) NVMeEnsureNamespaceMapped(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NVMeEnsureNamespaceMapped", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// NVMeEnsureNamespaceMapped indicates an expected call of NVMeEnsureNamespaceMapped.
func (mr *MockOntapAPIMockRecorder) NVMeEnsureNamespaceMapped(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NVMeEnsureNamespaceMapped", reflect.TypeOf((*MockOntapAPI)(nil).NVMeEnsureNamespaceMapped), arg0, arg1, arg2)
}

// NVMeEnsureNamespaceUnmapped mocks base method.
func (m *MockOntapAPI) NVMeEnsureNamespaceUnmapped(arg0 context.Context, arg1, arg2, arg3 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NVMeEnsureNamespaceUnmapped", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NVMeEnsureNamespaceUnmapped indicates an expected call of NVMeEnsureNamespaceUnmapped.
func (mr *MockOntapAPIMockRecorder) NVMeEnsureNamespaceUnmapped(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NVMeEnsureNamespaceUnmapped", reflect.TypeOf((*MockOntapAPI)(nil).NVMeEnsureNamespaceUnmapped), arg0, arg1, arg2, arg3)
}

// NVMeIsNamespaceMapped mocks base method.
func (m *MockOntapAPI) NVMeIsNamespaceMapped(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NVMeIsNamespaceMapped", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NVMeIsNamespaceMapped indicates an expected call of NVMeIsNamespaceMapped.
func (mr *MockOntapAPIMockRecorder) NVMeIsNamespaceMapped(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NVMeIsNamespaceMapped", reflect.TypeOf((*MockOntapAPI)(nil).NVMeIsNamespaceMapped), arg0, arg1, arg2)
}

// NVMeNamespaceCreate mocks base method.
func (m *MockOntapAPI) NVMeNamespaceCreate(arg0 context.Context, arg1 api.NVMeNamespace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NVMeNamespaceCreate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NVMeNamespaceCreate indicates an expected call of NVMeNamespaceCreate.
func (mr *MockOntapAPIMockRecorder) NVMeNamespaceCreate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NVMeNamespaceCreate", reflect.TypeOf((*MockOntapAPI)(nil).NVMeNamespaceCreate), arg0, arg1)
}

// NVMeNamespaceDelete mocks base method.
func (m *MockOntapAPI) NVMeNamespaceDelete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NVMeNamespaceDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NVMeNamespaceDelete indicates an expected call of NVMeNamespaceDelete.
func (mr *MockOntapAPIMockRecorder) NVMeNamespaceDelete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NVMeNamespaceDelete", reflect.TypeOf((*MockOntapAPI)(nil).NVMeNamespaceDelete), arg0, arg1)
}

// NVMeNamespaceExists mocks base method.
func (m *MockOntapAPI) NVMeNamespaceExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NVMeNamespaceExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NVMeNamespaceExists indicates an expected call of NVMeNamespaceExists.
func (mr *MockOntapAPIMockRecorder) NVMeNamespaceExists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NVMeNamespaceExists", reflect.TypeOf((*MockOntapAPI)(nil).NVMeNamespaceExists), arg0, arg1)
}

// NVMeNamespaceGetByName mocks base method.
func (m *MockOntapAPI) NVMeNamespaceGetByName(arg0 context.Context, arg1 string) (*api.NVMeNamespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NVMeNamespaceGetByName", arg0, arg1)
	ret0, _ := ret[0].(*api.NVMeNamespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NVMeNamespaceGetByName indicates an expected call of NVMeNamespaceGetByName.
func (mr *MockOntapAPIMockRecorder) NVMeNamespaceGetByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NVMeNamespaceGetByName", reflect.TypeOf((*MockOntapAPI)(nil).NVMeNamespaceGetByName), arg0, arg1)
}

// NVMeNamespaceGetSize mocks base method.
func (m *MockOntapAPI) NVMeNamespaceGetSize(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NVMeNamespaceGetSize", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NVMeNamespaceGetSize indicates an expected call of NVMeNamespaceGetSize.
func (mr *MockOntapAPIMockRecorder) NVMeNamespaceGetSize(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NVMeNamespaceGetSize", reflect.TypeOf((*MockOntapAPI)(nil).NVMeNamespaceGetSize), arg0, arg1)
}

// NVMeNamespaceList mocks base method.
func (m *MockOntapAPI) NVMeNamespaceList(arg0 context.Context, arg1 string) (api.NVMeNamespaces, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NVMeNamespaceList", arg0, arg1)
	ret0, _ := ret[0].(api.NVMeNamespaces)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NVMeNamespaceList indicates an expected call of NVMeNamespaceList.
func (mr *MockOntapAPIMockRecorder) NVMeNamespaceList(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NVMeNamespaceList", reflect.TypeOf((*MockOntapAPI)(nil).NVMeNamespaceList), arg0, arg1)
}

// NVMeNamespaceRename mocks base method.
func (m *MockOntapAPI) NVMeNamespaceRename(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NVMeNamespaceRename", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// NVMeNamespaceRename indicates an expected call of NVMeNamespaceRename.
func (mr *MockOntapAPIMockRecorder) NVMeNamespaceRename(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NVMeNamespaceRename", reflect.TypeOf((*MockOntapAPI)(nil).NVMeNamespaceRename), arg0, arg1, arg2)
}

// NVMeNamespaceSetComment mocks base method.
func (m *MockOntapAPI) NVMeNamespaceSetComment(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NVMeNamespaceSetComment", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// NVMeNamespaceSetComment indicates an expected call of NVMeNamespaceSetComment.
func (mr *MockOntapAPIMockRecorder) NVMeNamespaceSetComment(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NVMeNamespaceSetComment", reflect.TypeOf((*MockOntapAPI)(nil).NVMeNamespaceSetComment), arg0, arg1, arg2)
}

// NVMeNamespaceSetQosPolicyGroup mocks base method.
func (m *MockOntapAPI) NVMeNamespaceSetQosPolicyGroup(arg0 context.Context, arg1 string, arg2 api.QosPolicyGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NVMeNamespaceSetQosPolicyGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// NVMeNamespaceSetQosPolicyGroup indicates an expected call of NVMeNamespaceSetQosPolicyGroup.
func (mr *MockOntapAPIMockRecorder) NVMeNamespaceSetQosPolicyGroup(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NVMeNamespaceSetQosPolicyGroup", reflect.TypeOf((*MockOntapAPI)(nil).NVMeNamespaceSetQosPolicyGroup), arg0, arg1, arg2)
}

// NVMeNamespaceSetSize mocks base method.
func (m *MockOntapAPI) NVMeNamespaceSetSize(arg0 context.Context, arg1 string, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NVMeNamespaceSetSize", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// NVMeNamespaceSetSize indicates an expected call of NVMeNamespaceSetSize.
func (mr *MockOntapAPIMockRecorder) NVMeNamespaceSetSize(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NVMeNamespaceSetSize", reflect.TypeOf((*MockOntapAPI)(nil).NVMeNamespaceSetSize), arg0, arg1, arg2)
}

// NVMeRemoveHostFromSubsystem mocks base method.
func (m *MockOntapAPI) NVMeRemoveHostFromSubsystem(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NVMeRemoveHostFromSubsystem", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// NVMeRemoveHostFromSubsystem indicates an expected call of NVMeRemoveHostFromSubsystem.
func (mr *MockOntapAPIMockRecorder) NVMeRemoveHostFromSubsystem(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NVMeRemoveHostFromSubsystem", reflect.TypeOf((*MockOntapAPI)(nil).NVMeRemoveHostFromSubsystem), arg0, arg1, arg2)
}

// NVMeSubsystemAddNamespace mocks base method.
func (m *MockOntapAPI) NVMeSubsystemAddNamespace(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NVMeSubsystemAddNamespace", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// NVMeSubsystemAddNamespace indicates an expected call of NVMeSubsystemAddNamespace.
func (mr *MockOntapAPIMockRecorder) NVMeSubsystemAddNamespace(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NVMeSubsystemAddNamespace", reflect.TypeOf((*MockOntapAPI)(nil).NVMeSubsystemAddNamespace), arg0, arg1, arg2)
}

// NVMeSubsystemCreate mocks base method.
func (m *MockOntapAPI) NVMeSubsystemCreate(arg0 context.Context, arg1, arg2 string) (*api.NVMeSubsystem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NVMeSubsystemCreate", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.NVMeSubsystem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NVMeSubsystemCreate indicates an expected call of NVMeSubsystemCreate.
func (mr *MockOntapAPIMockRecorder) NVMeSubsystemCreate(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NVMeSubsystemCreate", reflect.TypeOf((*MockOntapAPI)(nil).NVMeSubsystemCreate), arg0, arg1, arg2)
}

// NVMeSubsystemDelete mocks base method.
func (m *MockOntapAPI) NVMeSubsystemDelete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NVMeSubsystemDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NVMeSubsystemDelete indicates an expected call of NVMeSubsystemDelete.
func (mr *MockOntapAPIMockRecorder) NVMeSubsystemDelete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NVMeSubsystemDelete", reflect.TypeOf((*MockOntapAPI)(nil).NVMeSubsystemDelete), arg0, arg1)
}

// NVMeSubsystemGetNamespaceCount mocks base method.
func (m *MockOntapAPI) NVMeSubsystemGetNamespaceCount(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NVMeSubsystemGetNamespaceCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NVMeSubsystemGetNamespaceCount indicates an expected call of NVMeSubsystemGetNamespaceCount.
func (mr *MockOntapAPIMockRecorder) NVMeSubsystemGetNamespaceCount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NVMeSubsystemGetNamespaceCount", reflect.TypeOf((*MockOntapAPI)(nil).NVMeSubsystemGetNamespaceCount), arg0, arg1)
}

// NVMeSubsystemRemoveNamespace mocks base method.
func (m *MockOntapAPI) NVMeSubsystemRemoveNamespace(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NVMeSubsystemRemoveNamespace", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// NVMeSubsystemRemoveNamespace indicates an expected call of NVMeSubsystemRemoveNamespace.
func (mr *MockOntapAPIMockRecorder) NVMeSubsystemRemoveNamespace(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NVMeSubsystemRemoveNamespace", reflect.TypeOf((*MockOntapAPI)(nil).NVMeSubsystemRemoveNamespace), arg0, arg1, arg2)
}

// NetFcpInterfaceGetDataLIFs mocks base method.
func (m *MockOntapAPI) NetFcpInterfaceGetDataLIFs(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetFcpInterfaceGetDataLIFs", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetFcpInterfaceGetDataLIFs indicates an expected call of NetFcpInterfaceGetDataLIFs.
func (mr *MockOntapAPIMockRecorder) NetFcpInterfaceGetDataLIFs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetFcpInterfaceGetDataLIFs", reflect.TypeOf((*MockOntapAPI)(nil).NetFcpInterfaceGetDataLIFs), arg0, arg1)
}

// NetInterfaceGetDataLIFs mocks base method.
func (m *MockOntapAPI) NetInterfaceGetDataLIFs(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetInterfaceGetDataLIFs", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetInterfaceGetDataLIFs indicates an expected call of NetInterfaceGetDataLIFs.
func (mr *MockOntapAPIMockRecorder) NetInterfaceGetDataLIFs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetInterfaceGetDataLIFs", reflect.TypeOf((*MockOntapAPI)(nil).NetInterfaceGetDataLIFs), arg0, arg1)
}

// NodeListSerialNumbers mocks base method.
func (m *MockOntapAPI) NodeListSerialNumbers(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeListSerialNumbers", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeListSerialNumbers indicates an expected call of NodeListSerialNumbers.
func (mr *MockOntapAPIMockRecorder) NodeListSerialNumbers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeListSerialNumbers", reflect.TypeOf((*MockOntapAPI)(nil).NodeListSerialNumbers), arg0)
}

// QtreeCount mocks base method.
func (m *MockOntapAPI) QtreeCount(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeCount", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QtreeCount indicates an expected call of QtreeCount.
func (mr *MockOntapAPIMockRecorder) QtreeCount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeCount", reflect.TypeOf((*MockOntapAPI)(nil).QtreeCount), arg0, arg1)
}

// QtreeCreate mocks base method.
func (m *MockOntapAPI) QtreeCreate(arg0 context.Context, arg1, arg2, arg3, arg4, arg5, arg6 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeCreate", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// QtreeCreate indicates an expected call of QtreeCreate.
func (mr *MockOntapAPIMockRecorder) QtreeCreate(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeCreate", reflect.TypeOf((*MockOntapAPI)(nil).QtreeCreate), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// QtreeDestroyAsync mocks base method.
func (m *MockOntapAPI) QtreeDestroyAsync(arg0 context.Context, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeDestroyAsync", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// QtreeDestroyAsync indicates an expected call of QtreeDestroyAsync.
func (mr *MockOntapAPIMockRecorder) QtreeDestroyAsync(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeDestroyAsync", reflect.TypeOf((*MockOntapAPI)(nil).QtreeDestroyAsync), arg0, arg1, arg2)
}

// QtreeExists mocks base method.
func (m *MockOntapAPI) QtreeExists(arg0 context.Context, arg1, arg2 string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeExists", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QtreeExists indicates an expected call of QtreeExists.
func (mr *MockOntapAPIMockRecorder) QtreeExists(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeExists", reflect.TypeOf((*MockOntapAPI)(nil).QtreeExists), arg0, arg1, arg2)
}

// QtreeGetByName mocks base method.
func (m *MockOntapAPI) QtreeGetByName(arg0 context.Context, arg1, arg2 string) (*api.Qtree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeGetByName", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.Qtree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QtreeGetByName indicates an expected call of QtreeGetByName.
func (mr *MockOntapAPIMockRecorder) QtreeGetByName(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeGetByName", reflect.TypeOf((*MockOntapAPI)(nil).QtreeGetByName), arg0, arg1, arg2)
}

// QtreeListByPrefix mocks base method.
func (m *MockOntapAPI) QtreeListByPrefix(arg0 context.Context, arg1, arg2 string) (api.Qtrees, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeListByPrefix", arg0, arg1, arg2)
	ret0, _ := ret[0].(api.Qtrees)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QtreeListByPrefix indicates an expected call of QtreeListByPrefix.
func (mr *MockOntapAPIMockRecorder) QtreeListByPrefix(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeListByPrefix", reflect.TypeOf((*MockOntapAPI)(nil).QtreeListByPrefix), arg0, arg1, arg2)
}

// QtreeModifyExportPolicy mocks base method.
func (m *MockOntapAPI) QtreeModifyExportPolicy(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeModifyExportPolicy", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// QtreeModifyExportPolicy indicates an expected call of QtreeModifyExportPolicy.
func (mr *MockOntapAPIMockRecorder) QtreeModifyExportPolicy(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeModifyExportPolicy", reflect.TypeOf((*MockOntapAPI)(nil).QtreeModifyExportPolicy), arg0, arg1, arg2, arg3)
}

// QtreeRename mocks base method.
func (m *MockOntapAPI) QtreeRename(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeRename", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// QtreeRename indicates an expected call of QtreeRename.
func (mr *MockOntapAPIMockRecorder) QtreeRename(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeRename", reflect.TypeOf((*MockOntapAPI)(nil).QtreeRename), arg0, arg1, arg2)
}

// QuotaEntryList mocks base method.
func (m *MockOntapAPI) QuotaEntryList(arg0 context.Context, arg1 string) (api.QuotaEntries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaEntryList", arg0, arg1)
	ret0, _ := ret[0].(api.QuotaEntries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuotaEntryList indicates an expected call of QuotaEntryList.
func (mr *MockOntapAPIMockRecorder) QuotaEntryList(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaEntryList", reflect.TypeOf((*MockOntapAPI)(nil).QuotaEntryList), arg0, arg1)
}

// QuotaGetEntry mocks base method.
func (m *MockOntapAPI) QuotaGetEntry(arg0 context.Context, arg1, arg2, arg3 string) (*api.QuotaEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaGetEntry", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*api.QuotaEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuotaGetEntry indicates an expected call of QuotaGetEntry.
func (mr *MockOntapAPIMockRecorder) QuotaGetEntry(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaGetEntry", reflect.TypeOf((*MockOntapAPI)(nil).QuotaGetEntry), arg0, arg1, arg2, arg3)
}

// QuotaOff mocks base method.
func (m *MockOntapAPI) QuotaOff(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaOff", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// QuotaOff indicates an expected call of QuotaOff.
func (mr *MockOntapAPIMockRecorder) QuotaOff(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaOff", reflect.TypeOf((*MockOntapAPI)(nil).QuotaOff), arg0, arg1)
}

// QuotaOn mocks base method.
func (m *MockOntapAPI) QuotaOn(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaOn", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// QuotaOn indicates an expected call of QuotaOn.
func (mr *MockOntapAPIMockRecorder) QuotaOn(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaOn", reflect.TypeOf((*MockOntapAPI)(nil).QuotaOn), arg0, arg1)
}

// QuotaResize mocks base method.
func (m *MockOntapAPI) QuotaResize(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaResize", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// QuotaResize indicates an expected call of QuotaResize.
func (mr *MockOntapAPIMockRecorder) QuotaResize(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaResize", reflect.TypeOf((*MockOntapAPI)(nil).QuotaResize), arg0, arg1)
}

// QuotaSetEntry mocks base method.
func (m *MockOntapAPI) QuotaSetEntry(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaSetEntry", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// QuotaSetEntry indicates an expected call of QuotaSetEntry.
func (mr *MockOntapAPIMockRecorder) QuotaSetEntry(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaSetEntry", reflect.TypeOf((*MockOntapAPI)(nil).QuotaSetEntry), arg0, arg1, arg2, arg3, arg4)
}

// QuotaStatus mocks base method.
func (m *MockOntapAPI) QuotaStatus(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaStatus", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuotaStatus indicates an expected call of QuotaStatus.
func (mr *MockOntapAPIMockRecorder) QuotaStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaStatus", reflect.TypeOf((*MockOntapAPI)(nil).QuotaStatus), arg0, arg1)
}

// SMBShareAccessControlCreate mocks base method.
func (m *MockOntapAPI) SMBShareAccessControlCreate(arg0 context.Context, arg1 string, arg2 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMBShareAccessControlCreate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SMBShareAccessControlCreate indicates an expected call of SMBShareAccessControlCreate.
func (mr *MockOntapAPIMockRecorder) SMBShareAccessControlCreate(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMBShareAccessControlCreate", reflect.TypeOf((*MockOntapAPI)(nil).SMBShareAccessControlCreate), arg0, arg1, arg2)
}

// SMBShareAccessControlDelete mocks base method.
func (m *MockOntapAPI) SMBShareAccessControlDelete(arg0 context.Context, arg1 string, arg2 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMBShareAccessControlDelete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SMBShareAccessControlDelete indicates an expected call of SMBShareAccessControlDelete.
func (mr *MockOntapAPIMockRecorder) SMBShareAccessControlDelete(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMBShareAccessControlDelete", reflect.TypeOf((*MockOntapAPI)(nil).SMBShareAccessControlDelete), arg0, arg1, arg2)
}

// SMBShareCreate mocks base method.
func (m *MockOntapAPI) SMBShareCreate(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMBShareCreate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SMBShareCreate indicates an expected call of SMBShareCreate.
func (mr *MockOntapAPIMockRecorder) SMBShareCreate(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMBShareCreate", reflect.TypeOf((*MockOntapAPI)(nil).SMBShareCreate), arg0, arg1, arg2)
}

// SMBShareDestroy mocks base method.
func (m *MockOntapAPI) SMBShareDestroy(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMBShareDestroy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SMBShareDestroy indicates an expected call of SMBShareDestroy.
func (mr *MockOntapAPIMockRecorder) SMBShareDestroy(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMBShareDestroy", reflect.TypeOf((*MockOntapAPI)(nil).SMBShareDestroy), arg0, arg1)
}

// SMBShareExists mocks base method.
func (m *MockOntapAPI) SMBShareExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMBShareExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SMBShareExists indicates an expected call of SMBShareExists.
func (mr *MockOntapAPIMockRecorder) SMBShareExists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMBShareExists", reflect.TypeOf((*MockOntapAPI)(nil).SMBShareExists), arg0, arg1)
}

// SVMName mocks base method.
func (m *MockOntapAPI) SVMName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SVMName")
	ret0, _ := ret[0].(string)
	return ret0
}

// SVMName indicates an expected call of SVMName.
func (mr *MockOntapAPIMockRecorder) SVMName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SVMName", reflect.TypeOf((*MockOntapAPI)(nil).SVMName))
}

// SnapmirrorAbort mocks base method.
func (m *MockOntapAPI) SnapmirrorAbort(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorAbort", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapmirrorAbort indicates an expected call of SnapmirrorAbort.
func (mr *MockOntapAPIMockRecorder) SnapmirrorAbort(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorAbort", reflect.TypeOf((*MockOntapAPI)(nil).SnapmirrorAbort), arg0, arg1, arg2, arg3, arg4)
}

// SnapmirrorBreak mocks base method.
func (m *MockOntapAPI) SnapmirrorBreak(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorBreak", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapmirrorBreak indicates an expected call of SnapmirrorBreak.
func (mr *MockOntapAPIMockRecorder) SnapmirrorBreak(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorBreak", reflect.TypeOf((*MockOntapAPI)(nil).SnapmirrorBreak), arg0, arg1, arg2, arg3, arg4, arg5)
}

// SnapmirrorCreate mocks base method.
func (m *MockOntapAPI) SnapmirrorCreate(arg0 context.Context, arg1, arg2, arg3, arg4, arg5, arg6 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorCreate", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapmirrorCreate indicates an expected call of SnapmirrorCreate.
func (mr *MockOntapAPIMockRecorder) SnapmirrorCreate(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorCreate", reflect.TypeOf((*MockOntapAPI)(nil).SnapmirrorCreate), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// SnapmirrorDelete mocks base method.
func (m *MockOntapAPI) SnapmirrorDelete(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorDelete", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapmirrorDelete indicates an expected call of SnapmirrorDelete.
func (mr *MockOntapAPIMockRecorder) SnapmirrorDelete(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorDelete", reflect.TypeOf((*MockOntapAPI)(nil).SnapmirrorDelete), arg0, arg1, arg2, arg3, arg4)
}

// SnapmirrorDeleteViaDestination mocks base method.
func (m *MockOntapAPI) SnapmirrorDeleteViaDestination(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorDeleteViaDestination", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapmirrorDeleteViaDestination indicates an expected call of SnapmirrorDeleteViaDestination.
func (mr *MockOntapAPIMockRecorder) SnapmirrorDeleteViaDestination(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorDeleteViaDestination", reflect.TypeOf((*MockOntapAPI)(nil).SnapmirrorDeleteViaDestination), arg0, arg1, arg2)
}

// SnapmirrorGet mocks base method.
func (m *MockOntapAPI) SnapmirrorGet(arg0 context.Context, arg1, arg2, arg3, arg4 string) (*api.Snapmirror, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorGet", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*api.Snapmirror)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapmirrorGet indicates an expected call of SnapmirrorGet.
func (mr *MockOntapAPIMockRecorder) SnapmirrorGet(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorGet", reflect.TypeOf((*MockOntapAPI)(nil).SnapmirrorGet), arg0, arg1, arg2, arg3, arg4)
}

// SnapmirrorInitialize mocks base method.
func (m *MockOntapAPI) SnapmirrorInitialize(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorInitialize", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapmirrorInitialize indicates an expected call of SnapmirrorInitialize.
func (mr *MockOntapAPIMockRecorder) SnapmirrorInitialize(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorInitialize", reflect.TypeOf((*MockOntapAPI)(nil).SnapmirrorInitialize), arg0, arg1, arg2, arg3, arg4)
}

// SnapmirrorPolicyGet mocks base method.
func (m *MockOntapAPI) SnapmirrorPolicyGet(arg0 context.Context, arg1 string) (*api.SnapmirrorPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorPolicyGet", arg0, arg1)
	ret0, _ := ret[0].(*api.SnapmirrorPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapmirrorPolicyGet indicates an expected call of SnapmirrorPolicyGet.
func (mr *MockOntapAPIMockRecorder) SnapmirrorPolicyGet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorPolicyGet", reflect.TypeOf((*MockOntapAPI)(nil).SnapmirrorPolicyGet), arg0, arg1)
}

// SnapmirrorQuiesce mocks base method.
func (m *MockOntapAPI) SnapmirrorQuiesce(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorQuiesce", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapmirrorQuiesce indicates an expected call of SnapmirrorQuiesce.
func (mr *MockOntapAPIMockRecorder) SnapmirrorQuiesce(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorQuiesce", reflect.TypeOf((*MockOntapAPI)(nil).SnapmirrorQuiesce), arg0, arg1, arg2, arg3, arg4)
}

// SnapmirrorRelease mocks base method.
func (m *MockOntapAPI) SnapmirrorRelease(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorRelease", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapmirrorRelease indicates an expected call of SnapmirrorRelease.
func (mr *MockOntapAPIMockRecorder) SnapmirrorRelease(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorRelease", reflect.TypeOf((*MockOntapAPI)(nil).SnapmirrorRelease), arg0, arg1, arg2)
}

// SnapmirrorResync mocks base method.
func (m *MockOntapAPI) SnapmirrorResync(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorResync", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapmirrorResync indicates an expected call of SnapmirrorResync.
func (mr *MockOntapAPIMockRecorder) SnapmirrorResync(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorResync", reflect.TypeOf((*MockOntapAPI)(nil).SnapmirrorResync), arg0, arg1, arg2, arg3, arg4)
}

// SnapmirrorUpdate mocks base method.
func (m *MockOntapAPI) SnapmirrorUpdate(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorUpdate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapmirrorUpdate indicates an expected call of SnapmirrorUpdate.
func (mr *MockOntapAPIMockRecorder) SnapmirrorUpdate(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorUpdate", reflect.TypeOf((*MockOntapAPI)(nil).SnapmirrorUpdate), arg0, arg1, arg2)
}

// SnapshotRestoreFlexgroup mocks base method.
func (m *MockOntapAPI) SnapshotRestoreFlexgroup(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotRestoreFlexgroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapshotRestoreFlexgroup indicates an expected call of SnapshotRestoreFlexgroup.
func (mr *MockOntapAPIMockRecorder) SnapshotRestoreFlexgroup(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotRestoreFlexgroup", reflect.TypeOf((*MockOntapAPI)(nil).SnapshotRestoreFlexgroup), arg0, arg1, arg2)
}

// SnapshotRestoreVolume mocks base method.
func (m *MockOntapAPI) SnapshotRestoreVolume(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotRestoreVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapshotRestoreVolume indicates an expected call of SnapshotRestoreVolume.
func (mr *MockOntapAPIMockRecorder) SnapshotRestoreVolume(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotRestoreVolume", reflect.TypeOf((*MockOntapAPI)(nil).SnapshotRestoreVolume), arg0, arg1, arg2)
}

// StorageUnitCloneCreate mocks base method.
func (m *MockOntapAPI) StorageUnitCloneCreate(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageUnitCloneCreate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorageUnitCloneCreate indicates an expected call of StorageUnitCloneCreate.
func (mr *MockOntapAPIMockRecorder) StorageUnitCloneCreate(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageUnitCloneCreate", reflect.TypeOf((*MockOntapAPI)(nil).StorageUnitCloneCreate), arg0, arg1, arg2, arg3)
}

// StorageUnitCloneSplitStart mocks base method.
func (m *MockOntapAPI) StorageUnitCloneSplitStart(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageUnitCloneSplitStart", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorageUnitCloneSplitStart indicates an expected call of StorageUnitCloneSplitStart.
func (mr *MockOntapAPIMockRecorder) StorageUnitCloneSplitStart(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageUnitCloneSplitStart", reflect.TypeOf((*MockOntapAPI)(nil).StorageUnitCloneSplitStart), arg0, arg1)
}

// StorageUnitExists mocks base method.
func (m *MockOntapAPI) StorageUnitExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageUnitExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageUnitExists indicates an expected call of StorageUnitExists.
func (mr *MockOntapAPIMockRecorder) StorageUnitExists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageUnitExists", reflect.TypeOf((*MockOntapAPI)(nil).StorageUnitExists), arg0, arg1)
}

// StorageUnitListBySnapshotParent mocks base method.
func (m *MockOntapAPI) StorageUnitListBySnapshotParent(arg0 context.Context, arg1, arg2 string) (api.VolumeNameList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageUnitListBySnapshotParent", arg0, arg1, arg2)
	ret0, _ := ret[0].(api.VolumeNameList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageUnitListBySnapshotParent indicates an expected call of StorageUnitListBySnapshotParent.
func (mr *MockOntapAPIMockRecorder) StorageUnitListBySnapshotParent(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageUnitListBySnapshotParent", reflect.TypeOf((*MockOntapAPI)(nil).StorageUnitListBySnapshotParent), arg0, arg1, arg2)
}

// StorageUnitSnapshotCreate mocks base method.
func (m *MockOntapAPI) StorageUnitSnapshotCreate(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageUnitSnapshotCreate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorageUnitSnapshotCreate indicates an expected call of StorageUnitSnapshotCreate.
func (mr *MockOntapAPIMockRecorder) StorageUnitSnapshotCreate(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageUnitSnapshotCreate", reflect.TypeOf((*MockOntapAPI)(nil).StorageUnitSnapshotCreate), arg0, arg1, arg2)
}

// StorageUnitSnapshotDelete mocks base method.
func (m *MockOntapAPI) StorageUnitSnapshotDelete(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageUnitSnapshotDelete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorageUnitSnapshotDelete indicates an expected call of StorageUnitSnapshotDelete.
func (mr *MockOntapAPIMockRecorder) StorageUnitSnapshotDelete(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageUnitSnapshotDelete", reflect.TypeOf((*MockOntapAPI)(nil).StorageUnitSnapshotDelete), arg0, arg1, arg2)
}

// StorageUnitSnapshotInfo mocks base method.
func (m *MockOntapAPI) StorageUnitSnapshotInfo(arg0 context.Context, arg1, arg2 string) (*api.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageUnitSnapshotInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageUnitSnapshotInfo indicates an expected call of StorageUnitSnapshotInfo.
func (mr *MockOntapAPIMockRecorder) StorageUnitSnapshotInfo(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageUnitSnapshotInfo", reflect.TypeOf((*MockOntapAPI)(nil).StorageUnitSnapshotInfo), arg0, arg1, arg2)
}

// StorageUnitSnapshotList mocks base method.
func (m *MockOntapAPI) StorageUnitSnapshotList(arg0 context.Context, arg1 string) (*api.Snapshots, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageUnitSnapshotList", arg0, arg1)
	ret0, _ := ret[0].(*api.Snapshots)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageUnitSnapshotList indicates an expected call of StorageUnitSnapshotList.
func (mr *MockOntapAPIMockRecorder) StorageUnitSnapshotList(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageUnitSnapshotList", reflect.TypeOf((*MockOntapAPI)(nil).StorageUnitSnapshotList), arg0, arg1)
}

// StorageUnitSnapshotRestore mocks base method.
func (m *MockOntapAPI) StorageUnitSnapshotRestore(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageUnitSnapshotRestore", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorageUnitSnapshotRestore indicates an expected call of StorageUnitSnapshotRestore.
func (mr *MockOntapAPIMockRecorder) StorageUnitSnapshotRestore(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageUnitSnapshotRestore", reflect.TypeOf((*MockOntapAPI)(nil).StorageUnitSnapshotRestore), arg0, arg1, arg2)
}

// SupportsFeature mocks base method.
func (m *MockOntapAPI) SupportsFeature(arg0 context.Context, arg1 api.Feature) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsFeature", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsFeature indicates an expected call of SupportsFeature.
func (mr *MockOntapAPIMockRecorder) SupportsFeature(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsFeature", reflect.TypeOf((*MockOntapAPI)(nil).SupportsFeature), arg0, arg1)
}

// TieringPolicyValue mocks base method.
func (m *MockOntapAPI) TieringPolicyValue(arg0 context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TieringPolicyValue", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// TieringPolicyValue indicates an expected call of TieringPolicyValue.
func (mr *MockOntapAPIMockRecorder) TieringPolicyValue(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TieringPolicyValue", reflect.TypeOf((*MockOntapAPI)(nil).TieringPolicyValue), arg0)
}

// ValidateAPIVersion mocks base method.
func (m *MockOntapAPI) ValidateAPIVersion(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAPIVersion", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateAPIVersion indicates an expected call of ValidateAPIVersion.
func (mr *MockOntapAPIMockRecorder) ValidateAPIVersion(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAPIVersion", reflect.TypeOf((*MockOntapAPI)(nil).ValidateAPIVersion), arg0)
}

// VolumeCloneCreate mocks base method.
func (m *MockOntapAPI) VolumeCloneCreate(arg0 context.Context, arg1, arg2, arg3 string, arg4 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeCloneCreate", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeCloneCreate indicates an expected call of VolumeCloneCreate.
func (mr *MockOntapAPIMockRecorder) VolumeCloneCreate(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeCloneCreate", reflect.TypeOf((*MockOntapAPI)(nil).VolumeCloneCreate), arg0, arg1, arg2, arg3, arg4)
}

// VolumeCloneSplitStart mocks base method.
func (m *MockOntapAPI) VolumeCloneSplitStart(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeCloneSplitStart", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeCloneSplitStart indicates an expected call of VolumeCloneSplitStart.
func (mr *MockOntapAPIMockRecorder) VolumeCloneSplitStart(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeCloneSplitStart", reflect.TypeOf((*MockOntapAPI)(nil).VolumeCloneSplitStart), arg0, arg1)
}

// VolumeCreate mocks base method.
func (m *MockOntapAPI) VolumeCreate(arg0 context.Context, arg1 api.Volume) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeCreate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeCreate indicates an expected call of VolumeCreate.
func (mr *MockOntapAPIMockRecorder) VolumeCreate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeCreate", reflect.TypeOf((*MockOntapAPI)(nil).VolumeCreate), arg0, arg1)
}

// VolumeDestroy mocks base method.
func (m *MockOntapAPI) VolumeDestroy(arg0 context.Context, arg1 string, arg2, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeDestroy", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeDestroy indicates an expected call of VolumeDestroy.
func (mr *MockOntapAPIMockRecorder) VolumeDestroy(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeDestroy", reflect.TypeOf((*MockOntapAPI)(nil).VolumeDestroy), arg0, arg1, arg2, arg3)
}

// VolumeExists mocks base method.
func (m *MockOntapAPI) VolumeExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeExists indicates an expected call of VolumeExists.
func (mr *MockOntapAPIMockRecorder) VolumeExists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeExists", reflect.TypeOf((*MockOntapAPI)(nil).VolumeExists), arg0, arg1)
}

// VolumeInfo mocks base method.
func (m *MockOntapAPI) VolumeInfo(arg0 context.Context, arg1 string) (*api.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeInfo", arg0, arg1)
	ret0, _ := ret[0].(*api.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeInfo indicates an expected call of VolumeInfo.
func (mr *MockOntapAPIMockRecorder) VolumeInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeInfo", reflect.TypeOf((*MockOntapAPI)(nil).VolumeInfo), arg0, arg1)
}

// VolumeListByAttrs mocks base method.
func (m *MockOntapAPI) VolumeListByAttrs(arg0 context.Context, arg1 *api.Volume) (api.Volumes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeListByAttrs", arg0, arg1)
	ret0, _ := ret[0].(api.Volumes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeListByAttrs indicates an expected call of VolumeListByAttrs.
func (mr *MockOntapAPIMockRecorder) VolumeListByAttrs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeListByAttrs", reflect.TypeOf((*MockOntapAPI)(nil).VolumeListByAttrs), arg0, arg1)
}

// VolumeListByPrefix mocks base method.
func (m *MockOntapAPI) VolumeListByPrefix(arg0 context.Context, arg1 string) (api.Volumes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeListByPrefix", arg0, arg1)
	ret0, _ := ret[0].(api.Volumes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeListByPrefix indicates an expected call of VolumeListByPrefix.
func (mr *MockOntapAPIMockRecorder) VolumeListByPrefix(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeListByPrefix", reflect.TypeOf((*MockOntapAPI)(nil).VolumeListByPrefix), arg0, arg1)
}

// VolumeListBySnapshotParent mocks base method.
func (m *MockOntapAPI) VolumeListBySnapshotParent(arg0 context.Context, arg1, arg2 string) (api.VolumeNameList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeListBySnapshotParent", arg0, arg1, arg2)
	ret0, _ := ret[0].(api.VolumeNameList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeListBySnapshotParent indicates an expected call of VolumeListBySnapshotParent.
func (mr *MockOntapAPIMockRecorder) VolumeListBySnapshotParent(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeListBySnapshotParent", reflect.TypeOf((*MockOntapAPI)(nil).VolumeListBySnapshotParent), arg0, arg1, arg2)
}

// VolumeModifyExportPolicy mocks base method.
func (m *MockOntapAPI) VolumeModifyExportPolicy(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeModifyExportPolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeModifyExportPolicy indicates an expected call of VolumeModifyExportPolicy.
func (mr *MockOntapAPIMockRecorder) VolumeModifyExportPolicy(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeModifyExportPolicy", reflect.TypeOf((*MockOntapAPI)(nil).VolumeModifyExportPolicy), arg0, arg1, arg2)
}

// VolumeModifySnapshotDirectoryAccess mocks base method.
func (m *MockOntapAPI) VolumeModifySnapshotDirectoryAccess(arg0 context.Context, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeModifySnapshotDirectoryAccess", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeModifySnapshotDirectoryAccess indicates an expected call of VolumeModifySnapshotDirectoryAccess.
func (mr *MockOntapAPIMockRecorder) VolumeModifySnapshotDirectoryAccess(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeModifySnapshotDirectoryAccess", reflect.TypeOf((*MockOntapAPI)(nil).VolumeModifySnapshotDirectoryAccess), arg0, arg1, arg2)
}

// VolumeModifyUnixPermissions mocks base method.
func (m *MockOntapAPI) VolumeModifyUnixPermissions(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeModifyUnixPermissions", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeModifyUnixPermissions indicates an expected call of VolumeModifyUnixPermissions.
func (mr *MockOntapAPIMockRecorder) VolumeModifyUnixPermissions(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeModifyUnixPermissions", reflect.TypeOf((*MockOntapAPI)(nil).VolumeModifyUnixPermissions), arg0, arg1, arg2, arg3)
}

// VolumeMount mocks base method.
func (m *MockOntapAPI) VolumeMount(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeMount", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeMount indicates an expected call of VolumeMount.
func (mr *MockOntapAPIMockRecorder) VolumeMount(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeMount", reflect.TypeOf((*MockOntapAPI)(nil).VolumeMount), arg0, arg1, arg2)
}

// VolumeRecoveryQueueGetName mocks base method.
func (m *MockOntapAPI) VolumeRecoveryQueueGetName(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeRecoveryQueueGetName", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeRecoveryQueueGetName indicates an expected call of VolumeRecoveryQueueGetName.
func (mr *MockOntapAPIMockRecorder) VolumeRecoveryQueueGetName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeRecoveryQueueGetName", reflect.TypeOf((*MockOntapAPI)(nil).VolumeRecoveryQueueGetName), arg0, arg1)
}

// VolumeRecoveryQueuePurge mocks base method.
func (m *MockOntapAPI) VolumeRecoveryQueuePurge(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeRecoveryQueuePurge", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeRecoveryQueuePurge indicates an expected call of VolumeRecoveryQueuePurge.
func (mr *MockOntapAPIMockRecorder) VolumeRecoveryQueuePurge(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeRecoveryQueuePurge", reflect.TypeOf((*MockOntapAPI)(nil).VolumeRecoveryQueuePurge), arg0, arg1)
}

// VolumeRename mocks base method.
func (m *MockOntapAPI) VolumeRename(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeRename", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeRename indicates an expected call of VolumeRename.
func (mr *MockOntapAPIMockRecorder) VolumeRename(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeRename", reflect.TypeOf((*MockOntapAPI)(nil).VolumeRename), arg0, arg1, arg2)
}

// VolumeSetComment mocks base method.
func (m *MockOntapAPI) VolumeSetComment(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSetComment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeSetComment indicates an expected call of VolumeSetComment.
func (mr *MockOntapAPIMockRecorder) VolumeSetComment(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSetComment", reflect.TypeOf((*MockOntapAPI)(nil).VolumeSetComment), arg0, arg1, arg2, arg3)
}

// VolumeSetQosPolicyGroupName mocks base method.
func (m *MockOntapAPI) VolumeSetQosPolicyGroupName(arg0 context.Context, arg1 string, arg2 api.QosPolicyGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSetQosPolicyGroupName", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeSetQosPolicyGroupName indicates an expected call of VolumeSetQosPolicyGroupName.
func (mr *MockOntapAPIMockRecorder) VolumeSetQosPolicyGroupName(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSetQosPolicyGroupName", reflect.TypeOf((*MockOntapAPI)(nil).VolumeSetQosPolicyGroupName), arg0, arg1, arg2)
}

// VolumeSetSize mocks base method.
func (m *MockOntapAPI) VolumeSetSize(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSetSize", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeSetSize indicates an expected call of VolumeSetSize.
func (mr *MockOntapAPIMockRecorder) VolumeSetSize(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSetSize", reflect.TypeOf((*MockOntapAPI)(nil).VolumeSetSize), arg0, arg1, arg2)
}

// VolumeSize mocks base method.
func (m *MockOntapAPI) VolumeSize(arg0 context.Context, arg1 string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSize", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeSize indicates an expected call of VolumeSize.
func (mr *MockOntapAPIMockRecorder) VolumeSize(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSize", reflect.TypeOf((*MockOntapAPI)(nil).VolumeSize), arg0, arg1)
}

// VolumeSnapshotCreate mocks base method.
func (m *MockOntapAPI) VolumeSnapshotCreate(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSnapshotCreate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeSnapshotCreate indicates an expected call of VolumeSnapshotCreate.
func (mr *MockOntapAPIMockRecorder) VolumeSnapshotCreate(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSnapshotCreate", reflect.TypeOf((*MockOntapAPI)(nil).VolumeSnapshotCreate), arg0, arg1, arg2)
}

// VolumeSnapshotDelete mocks base method.
func (m *MockOntapAPI) VolumeSnapshotDelete(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSnapshotDelete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeSnapshotDelete indicates an expected call of VolumeSnapshotDelete.
func (mr *MockOntapAPIMockRecorder) VolumeSnapshotDelete(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSnapshotDelete", reflect.TypeOf((*MockOntapAPI)(nil).VolumeSnapshotDelete), arg0, arg1, arg2)
}

// VolumeSnapshotInfo mocks base method.
func (m *MockOntapAPI) VolumeSnapshotInfo(arg0 context.Context, arg1, arg2 string) (api.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSnapshotInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(api.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeSnapshotInfo indicates an expected call of VolumeSnapshotInfo.
func (mr *MockOntapAPIMockRecorder) VolumeSnapshotInfo(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSnapshotInfo", reflect.TypeOf((*MockOntapAPI)(nil).VolumeSnapshotInfo), arg0, arg1, arg2)
}

// VolumeSnapshotList mocks base method.
func (m *MockOntapAPI) VolumeSnapshotList(arg0 context.Context, arg1 string) (api.Snapshots, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSnapshotList", arg0, arg1)
	ret0, _ := ret[0].(api.Snapshots)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeSnapshotList indicates an expected call of VolumeSnapshotList.
func (mr *MockOntapAPIMockRecorder) VolumeSnapshotList(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSnapshotList", reflect.TypeOf((*MockOntapAPI)(nil).VolumeSnapshotList), arg0, arg1)
}

// VolumeUsedSize mocks base method.
func (m *MockOntapAPI) VolumeUsedSize(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeUsedSize", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeUsedSize indicates an expected call of VolumeUsedSize.
func (mr *MockOntapAPIMockRecorder) VolumeUsedSize(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeUsedSize", reflect.TypeOf((*MockOntapAPI)(nil).VolumeUsedSize), arg0, arg1)
}

// VolumeWaitForStates mocks base method.
func (m *MockOntapAPI) VolumeWaitForStates(arg0 context.Context, arg1 string, arg2, arg3 []string, arg4 time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeWaitForStates", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeWaitForStates indicates an expected call of VolumeWaitForStates.
func (mr *MockOntapAPIMockRecorder) VolumeWaitForStates(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeWaitForStates", reflect.TypeOf((*MockOntapAPI)(nil).VolumeWaitForStates), arg0, arg1, arg2, arg3, arg4)
}

// MockAggregateSpace is a mock of AggregateSpace interface.
type MockAggregateSpace struct {
	ctrl     *gomock.Controller
	recorder *MockAggregateSpaceMockRecorder
}

// MockAggregateSpaceMockRecorder is the mock recorder for MockAggregateSpace.
type MockAggregateSpaceMockRecorder struct {
	mock *MockAggregateSpace
}

// NewMockAggregateSpace creates a new mock instance.
func NewMockAggregateSpace(ctrl *gomock.Controller) *MockAggregateSpace {
	mock := &MockAggregateSpace{ctrl: ctrl}
	mock.recorder = &MockAggregateSpaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAggregateSpace) EXPECT() *MockAggregateSpaceMockRecorder {
	return m.recorder
}

// Footprint mocks base method.
func (m *MockAggregateSpace) Footprint() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Footprint")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Footprint indicates an expected call of Footprint.
func (mr *MockAggregateSpaceMockRecorder) Footprint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Footprint", reflect.TypeOf((*MockAggregateSpace)(nil).Footprint))
}

// Size mocks base method.
func (m *MockAggregateSpace) Size() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockAggregateSpaceMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockAggregateSpace)(nil).Size))
}

// Used mocks base method.
func (m *MockAggregateSpace) Used() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Used")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Used indicates an expected call of Used.
func (mr *MockAggregateSpaceMockRecorder) Used() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Used", reflect.TypeOf((*MockAggregateSpace)(nil).Used))
}

// MockResponse is a mock of Response interface.
type MockResponse struct {
	ctrl     *gomock.Controller
	recorder *MockResponseMockRecorder
}

// MockResponseMockRecorder is the mock recorder for MockResponse.
type MockResponseMockRecorder struct {
	mock *MockResponse
}

// NewMockResponse creates a new mock instance.
func NewMockResponse(ctrl *gomock.Controller) *MockResponse {
	mock := &MockResponse{ctrl: ctrl}
	mock.recorder = &MockResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponse) EXPECT() *MockResponseMockRecorder {
	return m.recorder
}

// APIName mocks base method.
func (m *MockResponse) APIName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIName")
	ret0, _ := ret[0].(string)
	return ret0
}

// APIName indicates an expected call of APIName.
func (mr *MockResponseMockRecorder) APIName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIName", reflect.TypeOf((*MockResponse)(nil).APIName))
}

// Client mocks base method.
func (m *MockResponse) Client() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(string)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockResponseMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockResponse)(nil).Client))
}

// Errno mocks base method.
func (m *MockResponse) Errno() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Errno")
	ret0, _ := ret[0].(string)
	return ret0
}

// Errno indicates an expected call of Errno.
func (mr *MockResponseMockRecorder) Errno() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errno", reflect.TypeOf((*MockResponse)(nil).Errno))
}

// Name mocks base method.
func (m *MockResponse) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockResponseMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockResponse)(nil).Name))
}

// Reason mocks base method.
func (m *MockResponse) Reason() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reason")
	ret0, _ := ret[0].(string)
	return ret0
}

// Reason indicates an expected call of Reason.
func (mr *MockResponseMockRecorder) Reason() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reason", reflect.TypeOf((*MockResponse)(nil).Reason))
}

// Status mocks base method.
func (m *MockResponse) Status() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(string)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockResponseMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockResponse)(nil).Status))
}

// Version mocks base method.
func (m *MockResponse) Version() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockResponseMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockResponse)(nil).Version))
}
